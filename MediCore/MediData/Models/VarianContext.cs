using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MediData.Models;

public partial class VarianContext : DbContext
{
    public VarianContext()
    {
    }

    public VarianContext(DbContextOptions<VarianContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AavLinkRttempFldAddon> AavLinkRttempFldAddon { get; set; }

    public virtual DbSet<AavLinkRttempMlcsegment> AavLinkRttempMlcsegment { get; set; }

    public virtual DbSet<AavLinkRttempTable1> AavLinkRttempTable1 { get; set; }

    public virtual DbSet<AavLinkRttempTfa> AavLinkRttempTfa { get; set; }

    public virtual DbSet<AavLinkRttempTrtmntFld> AavLinkRttempTrtmntFld { get; set; }

    public virtual DbSet<AbnormalFlagCd> AbnormalFlagCd { get; set; }

    public virtual DbSet<AccessLog> AccessLog { get; set; }

    public virtual DbSet<AccessStatus> AccessStatus { get; set; }

    public virtual DbSet<AccountBillingCode> AccountBillingCode { get; set; }

    public virtual DbSet<AccountBillingCodeMh> AccountBillingCodeMh { get; set; }

    public virtual DbSet<ActCaptDiagnosis> ActCaptDiagnosis { get; set; }

    public virtual DbSet<ActCaptDiagnosisMh> ActCaptDiagnosisMh { get; set; }

    public virtual DbSet<ActCaptTreatment> ActCaptTreatment { get; set; }

    public virtual DbSet<ActInstChecklistItem> ActInstChecklistItem { get; set; }

    public virtual DbSet<ActInstProcCode> ActInstProcCode { get; set; }

    public virtual DbSet<ActInstProcCodeMh> ActInstProcCodeMh { get; set; }

    public virtual DbSet<Activity> Activity { get; set; }

    public virtual DbSet<ActivityAssociation> ActivityAssociation { get; set; }

    public virtual DbSet<ActivityAttribute> ActivityAttribute { get; set; }

    public virtual DbSet<ActivityAttributeMh> ActivityAttributeMh { get; set; }

    public virtual DbSet<ActivityCapture> ActivityCapture { get; set; }

    public virtual DbSet<ActivityCaptureAttribute> ActivityCaptureAttribute { get; set; }

    public virtual DbSet<ActivityCaptureAttributeMh> ActivityCaptureAttributeMh { get; set; }

    public virtual DbSet<ActivityCaptureMh> ActivityCaptureMh { get; set; }

    public virtual DbSet<ActivityCategory> ActivityCategory { get; set; }

    public virtual DbSet<ActivityChecklistItem> ActivityChecklistItem { get; set; }

    public virtual DbSet<ActivityCodeMd> ActivityCodeMd { get; set; }

    public virtual DbSet<ActivityCodeMdMh> ActivityCodeMdMh { get; set; }

    public virtual DbSet<ActivityInstance> ActivityInstance { get; set; }

    public virtual DbSet<ActivityInstanceLink> ActivityInstanceLink { get; set; }

    public virtual DbSet<ActivityInstanceLinkMh> ActivityInstanceLinkMh { get; set; }

    public virtual DbSet<ActivityInstanceMh> ActivityInstanceMh { get; set; }

    public virtual DbSet<ActivityMh> ActivityMh { get; set; }

    public virtual DbSet<ActivityPttrn> ActivityPttrn { get; set; }

    public virtual DbSet<ActivityPttrnPerCycle> ActivityPttrnPerCycle { get; set; }

    public virtual DbSet<ActivityPttrnResrc> ActivityPttrnResrc { get; set; }

    public virtual DbSet<ActivityPttrnToSchedActivity> ActivityPttrnToSchedActivity { get; set; }

    public virtual DbSet<ActivitySession> ActivitySession { get; set; }

    public virtual DbSet<ActivityToProcedureCode> ActivityToProcedureCode { get; set; }

    public virtual DbSet<ActivityToProcedureItem> ActivityToProcedureItem { get; set; }

    public virtual DbSet<ActtyCatgryResrcType> ActtyCatgryResrcType { get; set; }

    public virtual DbSet<AddOn> AddOn { get; set; }

    public virtual DbSet<AddOnMaterial> AddOnMaterial { get; set; }

    public virtual DbSet<AddOnValidation> AddOnValidation { get; set; }

    public virtual DbSet<Address> Address { get; set; }

    public virtual DbSet<AddressCd> AddressCd { get; set; }

    public virtual DbSet<AdmitCls> AdmitCls { get; set; }

    public virtual DbSet<AdmitPgm> AdmitPgm { get; set; }

    public virtual DbSet<AdmnDoseFrqUnit> AdmnDoseFrqUnit { get; set; }

    public virtual DbSet<AdmnDow> AdmnDow { get; set; }

    public virtual DbSet<AdmnFrqHhmm> AdmnFrqHhmm { get; set; }

    public virtual DbSet<AdmnRoute> AdmnRoute { get; set; }

    public virtual DbSet<AdmnRouteBill> AdmnRouteBill { get; set; }

    public virtual DbSet<AdmnRouteExtDrugDb> AdmnRouteExtDrugDb { get; set; }

    public virtual DbSet<AdmnSite> AdmnSite { get; set; }

    public virtual DbSet<Adt08> Adt08 { get; set; }

    public virtual DbSet<AgendaCatTyp> AgendaCatTyp { get; set; }

    public virtual DbSet<AgendaStatusTyp> AgendaStatusTyp { get; set; }

    public virtual DbSet<AgendaTask> AgendaTask { get; set; }

    public virtual DbSet<AgendaTemplate> AgendaTemplate { get; set; }

    public virtual DbSet<AgendaTemplateGroup> AgendaTemplateGroup { get; set; }

    public virtual DbSet<AgendaTemplateTask> AgendaTemplateTask { get; set; }

    public virtual DbSet<AgendaTemplateTaskUser> AgendaTemplateTaskUser { get; set; }

    public virtual DbSet<AgtBill> AgtBill { get; set; }

    public virtual DbSet<AgtContraInd> AgtContraInd { get; set; }

    public virtual DbSet<AgtContraIndTyp> AgtContraIndTyp { get; set; }

    public virtual DbSet<AgtDosage> AgtDosage { get; set; }

    public virtual DbSet<AgtDxReq> AgtDxReq { get; set; }

    public virtual DbSet<AgtDxReqGroup> AgtDxReqGroup { get; set; }

    public virtual DbSet<AgtFormulary> AgtFormulary { get; set; }

    public virtual DbSet<AgtFormularyDispLocMap> AgtFormularyDispLocMap { get; set; }

    public virtual DbSet<AgtFormularyDoseBand> AgtFormularyDoseBand { get; set; }

    public virtual DbSet<AgtFormularyGroup> AgtFormularyGroup { get; set; }

    public virtual DbSet<AgtFormularyGroupAgt> AgtFormularyGroupAgt { get; set; }

    public virtual DbSet<AgtFormularyLblDtl> AgtFormularyLblDtl { get; set; }

    public virtual DbSet<AgtGrp> AgtGrp { get; set; }

    public virtual DbSet<AgtGrpAgt> AgtGrpAgt { get; set; }

    public virtual DbSet<AgtInfo> AgtInfo { get; set; }

    public virtual DbSet<AgtLookup> AgtLookup { get; set; }

    public virtual DbSet<AgtLookupTyp> AgtLookupTyp { get; set; }

    public virtual DbSet<AgtManufacturer> AgtManufacturer { get; set; }

    public virtual DbSet<AgtName> AgtName { get; set; }

    public virtual DbSet<AgtNameTrans> AgtNameTrans { get; set; }

    public virtual DbSet<AgtNote> AgtNote { get; set; }

    public virtual DbSet<AgtNoteTyp> AgtNoteTyp { get; set; }

    public virtual DbSet<AgtRx> AgtRx { get; set; }

    public virtual DbSet<AgtRxDisp> AgtRxDisp { get; set; }

    public virtual DbSet<AgtRxDispMh> AgtRxDispMh { get; set; }

    public virtual DbSet<AgtRxDispSyringe> AgtRxDispSyringe { get; set; }

    public virtual DbSet<AgtRxDispSyringeMh> AgtRxDispSyringeMh { get; set; }

    public virtual DbSet<AgtRxDoseVrtn> AgtRxDoseVrtn { get; set; }

    public virtual DbSet<AgtRxDoseVrtnMh> AgtRxDoseVrtnMh { get; set; }

    public virtual DbSet<AgtRxDxOvride> AgtRxDxOvride { get; set; }

    public virtual DbSet<AgtRxHxInstr> AgtRxHxInstr { get; set; }

    public virtual DbSet<AgtRxImmun> AgtRxImmun { get; set; }

    public virtual DbSet<AgtRxMh> AgtRxMh { get; set; }

    public virtual DbSet<AgtRxPharm> AgtRxPharm { get; set; }

    public virtual DbSet<AgtRxPharmXref> AgtRxPharmXref { get; set; }

    public virtual DbSet<AgtTr> AgtTr { get; set; }

    public virtual DbSet<AgtTyp> AgtTyp { get; set; }

    public virtual DbSet<AicPatient> AicPatient { get; set; }

    public virtual DbSet<AllergyDesc> AllergyDesc { get; set; }

    public virtual DbSet<AllergyRespTyp> AllergyRespTyp { get; set; }

    public virtual DbSet<AllergySeverity> AllergySeverity { get; set; }

    public virtual DbSet<AllergyTyp> AllergyTyp { get; set; }

    public virtual DbSet<App> App { get; set; }

    public virtual DbSet<AppAccessTime> AppAccessTime { get; set; }

    public virtual DbSet<AppContext> AppContext { get; set; }

    public virtual DbSet<AppLevel> AppLevel { get; set; }

    public virtual DbSet<AppLevelLog> AppLevelLog { get; set; }

    public virtual DbSet<AppLevelTyp> AppLevelTyp { get; set; }

    public virtual DbSet<AppLevelXref> AppLevelXref { get; set; }

    public virtual DbSet<AppMsg> AppMsg { get; set; }

    public virtual DbSet<AppMsgCls> AppMsgCls { get; set; }

    public virtual DbSet<AppMsgDbms> AppMsgDbms { get; set; }

    public virtual DbSet<AppMsgFmt> AppMsgFmt { get; set; }

    public virtual DbSet<AppMsgLog> AppMsgLog { get; set; }

    public virtual DbSet<AppObject> AppObject { get; set; }

    public virtual DbSet<AppTyp> AppTyp { get; set; }

    public virtual DbSet<AppUser> AppUser { get; set; }

    public virtual DbSet<Application> Application { get; set; }

    public virtual DbSet<ApplicationAccessLog> ApplicationAccessLog { get; set; }

    public virtual DbSet<ApplicationPrintReport> ApplicationPrintReport { get; set; }

    public virtual DbSet<Applicator> Applicator { get; set; }

    public virtual DbSet<ApplicatorJawSize> ApplicatorJawSize { get; set; }

    public virtual DbSet<Approval> Approval { get; set; }

    public virtual DbSet<ApprovalOptions> ApprovalOptions { get; set; }

    public virtual DbSet<ArchiveLocation> ArchiveLocation { get; set; }

    public virtual DbSet<ArchiveRestoredFile> ArchiveRestoredFile { get; set; }

    public virtual DbSet<AriaConnectIntfTrgr> AriaConnectIntfTrgr { get; set; }

    public virtual DbSet<AsmtComp> AsmtComp { get; set; }

    public virtual DbSet<AsmtCompBill> AsmtCompBill { get; set; }

    public virtual DbSet<AsmtCompGrade> AsmtCompGrade { get; set; }

    public virtual DbSet<AsmtGroup> AsmtGroup { get; set; }

    public virtual DbSet<AsmtGroupBill> AsmtGroupBill { get; set; }

    public virtual DbSet<AsmtGroupComp> AsmtGroupComp { get; set; }

    public virtual DbSet<AsmtMthd> AsmtMthd { get; set; }

    public virtual DbSet<AspectDesc> AspectDesc { get; set; }

    public virtual DbSet<AspectDescPhys> AspectDescPhys { get; set; }

    public virtual DbSet<Attendee> Attendee { get; set; }

    public virtual DbSet<AttendeeMh> AttendeeMh { get; set; }

    public virtual DbSet<AttrCatTyp> AttrCatTyp { get; set; }

    public virtual DbSet<AttrValueTyp> AttrValueTyp { get; set; }

    public virtual DbSet<AttributeMetaData> AttributeMetaData { get; set; }

    public virtual DbSet<AuditActionTyp> AuditActionTyp { get; set; }

    public virtual DbSet<AuditHistory1> AuditHistory1 { get; set; }

    public virtual DbSet<AuditHistory2> AuditHistory2 { get; set; }

    public virtual DbSet<AuditHistory3> AuditHistory3 { get; set; }

    public virtual DbSet<AuditHistory4> AuditHistory4 { get; set; }

    public virtual DbSet<AuditHistory5> AuditHistory5 { get; set; }

    public virtual DbSet<AuditHistory6> AuditHistory6 { get; set; }

    public virtual DbSet<AuditLog> AuditLog { get; set; }

    public virtual DbSet<AuditModificationLog> AuditModificationLog { get; set; }

    public virtual DbSet<AuditReasonCd> AuditReasonCd { get; set; }

    public virtual DbSet<AuditRec> AuditRec { get; set; }

    public virtual DbSet<AuditRetentionPeriodSpexecution> AuditRetentionPeriodSpexecution { get; set; }

    public virtual DbSet<AuraConfiguration> AuraConfiguration { get; set; }

    public virtual DbSet<AuraParentPackageJobStatus> AuraParentPackageJobStatus { get; set; }

    public virtual DbSet<AuthorTyp> AuthorTyp { get; set; }

    public virtual DbSet<Auxiliary> Auxiliary { get; set; }

    public virtual DbSet<AvailPrefPttrnDetails> AvailPrefPttrnDetails { get; set; }

    public virtual DbSet<AvailPrefWeeklyPttrn> AvailPrefWeeklyPttrn { get; set; }

    public virtual DbSet<AvailableSpace> AvailableSpace { get; set; }

    public virtual DbSet<BaseCd> BaseCd { get; set; }

    public virtual DbSet<BaseClsTyp> BaseClsTyp { get; set; }

    public virtual DbSet<BaseTyp> BaseTyp { get; set; }

    public virtual DbSet<BaseTypPtListQueryXref> BaseTypPtListQueryXref { get; set; }

    public virtual DbSet<BatchCcpndic1> BatchCcpndic1 { get; set; }

    public virtual DbSet<BeamlineOption> BeamlineOption { get; set; }

    public virtual DbSet<BedUseTyp> BedUseTyp { get; set; }

    public virtual DbSet<BehaviorCd> BehaviorCd { get; set; }

    public virtual DbSet<BillAcct> BillAcct { get; set; }

    public virtual DbSet<BillAcctPtVisit> BillAcctPtVisit { get; set; }

    public virtual DbSet<BillCd> BillCd { get; set; }

    public virtual DbSet<BillCdHx> BillCdHx { get; set; }

    public virtual DbSet<BillCdInfo> BillCdInfo { get; set; }

    public virtual DbSet<BillCdInstance> BillCdInstance { get; set; }

    public virtual DbSet<BillCdTyp> BillCdTyp { get; set; }

    public virtual DbSet<BillEmCatTyp> BillEmCatTyp { get; set; }

    public virtual DbSet<BillEmCptTyp> BillEmCptTyp { get; set; }

    public virtual DbSet<BillEmDataTyp> BillEmDataTyp { get; set; }

    public virtual DbSet<BillEmDecisionTyp> BillEmDecisionTyp { get; set; }

    public virtual DbSet<BillEmDefn> BillEmDefn { get; set; }

    public virtual DbSet<BillEmDxTyp> BillEmDxTyp { get; set; }

    public virtual DbSet<BillEmElmtTyp> BillEmElmtTyp { get; set; }

    public virtual DbSet<BillEmMsg> BillEmMsg { get; set; }

    public virtual DbSet<BillEmRiskTyp> BillEmRiskTyp { get; set; }

    public virtual DbSet<BillEvent> BillEvent { get; set; }

    public virtual DbSet<BillEventActual> BillEventActual { get; set; }

    public virtual DbSet<BillEventEmInfo> BillEventEmInfo { get; set; }

    public virtual DbSet<BillEventLink> BillEventLink { get; set; }

    public virtual DbSet<BillEventTyp> BillEventTyp { get; set; }

    public virtual DbSet<BillEvntCharge> BillEvntCharge { get; set; }

    public virtual DbSet<BillEvntChrgWrk> BillEvntChrgWrk { get; set; }

    public virtual DbSet<BillEvntPayment> BillEvntPayment { get; set; }

    public virtual DbSet<BillForm> BillForm { get; set; }

    public virtual DbSet<BillFormItem> BillFormItem { get; set; }

    public virtual DbSet<BillFormTyp> BillFormTyp { get; set; }

    public virtual DbSet<BillModifierTyp> BillModifierTyp { get; set; }

    public virtual DbSet<BillRelVal> BillRelVal { get; set; }

    public virtual DbSet<BillSysBatchDef> BillSysBatchDef { get; set; }

    public virtual DbSet<BillSysBatchGroup> BillSysBatchGroup { get; set; }

    public virtual DbSet<BillSysBatchSetup> BillSysBatchSetup { get; set; }

    public virtual DbSet<BillSysChrgWrk> BillSysChrgWrk { get; set; }

    public virtual DbSet<BillSysHospDeptActivity> BillSysHospDeptActivity { get; set; }

    public virtual DbSet<BillSysKeyCd> BillSysKeyCd { get; set; }

    public virtual DbSet<BillSysPendingTransactions> BillSysPendingTransactions { get; set; }

    public virtual DbSet<BillSysSentCharges> BillSysSentCharges { get; set; }

    public virtual DbSet<BillSystem> BillSystem { get; set; }

    public virtual DbSet<BillVisitEvent> BillVisitEvent { get; set; }

    public virtual DbSet<BillVisitTyp> BillVisitTyp { get; set; }

    public virtual DbSet<BillingService> BillingService { get; set; }

    public virtual DbSet<Block> Block { get; set; }

    public virtual DbSet<BmiTrend> BmiTrend { get; set; }

    public virtual DbSet<BrachyApplicator> BrachyApplicator { get; set; }

    public virtual DbSet<BrachyField> BrachyField { get; set; }

    public virtual DbSet<BrachyFieldHstry> BrachyFieldHstry { get; set; }

    public virtual DbSet<BrachySolidApplicator> BrachySolidApplicator { get; set; }

    public virtual DbSet<BrachyUnit> BrachyUnit { get; set; }

    public virtual DbSet<BreakPoint> BreakPoint { get; set; }

    public virtual DbSet<BsaFormulaTyp> BsaFormulaTyp { get; set; }

    public virtual DbSet<CalcPrcsCd> CalcPrcsCd { get; set; }

    public virtual DbSet<CalcTyp> CalcTyp { get; set; }

    public virtual DbSet<CancelReasonTyp> CancelReasonTyp { get; set; }

    public virtual DbSet<CcdCat> CcdCat { get; set; }

    public virtual DbSet<CcdaError> CcdaError { get; set; }

    public virtual DbSet<CdTblVal> CdTblVal { get; set; }

    public virtual DbSet<CdcEthnicGroups> CdcEthnicGroups { get; set; }

    public virtual DbSet<CdcRaceTyp> CdcRaceTyp { get; set; }

    public virtual DbSet<ChangeTrackingTableList> ChangeTrackingTableList { get; set; }

    public virtual DbSet<Channel> Channel { get; set; }

    public virtual DbSet<ChargesControl> ChargesControl { get; set; }

    public virtual DbSet<ChartQa> ChartQa { get; set; }

    public virtual DbSet<ChartQatreatment> ChartQatreatment { get; set; }

    public virtual DbSet<ChecklistGroup> ChecklistGroup { get; set; }

    public virtual DbSet<ChecklistItem> ChecklistItem { get; set; }

    public virtual DbSet<ChecklistItemGroup> ChecklistItemGroup { get; set; }

    public virtual DbSet<ChildMachine> ChildMachine { get; set; }

    public virtual DbSet<ChildProcessing> ChildProcessing { get; set; }

    public virtual DbSet<ClinNotifPtListQueryXref> ClinNotifPtListQueryXref { get; set; }

    public virtual DbSet<Clinic> Clinic { get; set; }

    public virtual DbSet<ClinicProvider> ClinicProvider { get; set; }

    public virtual DbSet<ClinicalNotifctnUsrGrp> ClinicalNotifctnUsrGrp { get; set; }

    public virtual DbSet<ClinicalNotification> ClinicalNotification { get; set; }

    public virtual DbSet<ClinicalNotificationHstry> ClinicalNotificationHstry { get; set; }

    public virtual DbSet<ClsCritLst> ClsCritLst { get; set; }

    public virtual DbSet<ClsScheme> ClsScheme { get; set; }

    public virtual DbSet<Cmtee> Cmtee { get; set; }

    public virtual DbSet<CmteeActivityPrd> CmteeActivityPrd { get; set; }

    public virtual DbSet<CmteeAgenda> CmteeAgenda { get; set; }

    public virtual DbSet<CmteeAgendaGuest> CmteeAgendaGuest { get; set; }

    public virtual DbSet<CmteeAgendaIssue> CmteeAgendaIssue { get; set; }

    public virtual DbSet<CmteeAgendaMbr> CmteeAgendaMbr { get; set; }

    public virtual DbSet<CmteeAgendaMins> CmteeAgendaMins { get; set; }

    public virtual DbSet<CmteeAgendaMinsMbr> CmteeAgendaMinsMbr { get; set; }

    public virtual DbSet<CmteeAgendaTrial> CmteeAgendaTrial { get; set; }

    public virtual DbSet<CmteeDate> CmteeDate { get; set; }

    public virtual DbSet<CmteeFnctn> CmteeFnctn { get; set; }

    public virtual DbSet<CmteeFnctnTyp> CmteeFnctnTyp { get; set; }

    public virtual DbSet<CmteeIssue> CmteeIssue { get; set; }

    public virtual DbSet<CmteeIssueMotionTyp> CmteeIssueMotionTyp { get; set; }

    public virtual DbSet<CmteeIssueRcmd> CmteeIssueRcmd { get; set; }

    public virtual DbSet<CmteeIssueTyp> CmteeIssueTyp { get; set; }

    public virtual DbSet<CmteeLtrTemplate> CmteeLtrTemplate { get; set; }

    public virtual DbSet<CmteeMbr> CmteeMbr { get; set; }

    public virtual DbSet<CmteeMbrRoleTyp> CmteeMbrRoleTyp { get; set; }

    public virtual DbSet<CmteeMtg> CmteeMtg { get; set; }

    public virtual DbSet<CmteeRcmdAbs> CmteeRcmdAbs { get; set; }

    public virtual DbSet<CmteeRcmdAbstention> CmteeRcmdAbstention { get; set; }

    public virtual DbSet<CmteeRcmdCc> CmteeRcmdCc { get; set; }

    public virtual DbSet<CodeStructureCode> CodeStructureCode { get; set; }

    public virtual DbSet<CodeSystem> CodeSystem { get; set; }

    public virtual DbSet<CollcVol> CollcVol { get; set; }

    public virtual DbSet<CompTyp> CompTyp { get; set; }

    public virtual DbSet<Compensator> Compensator { get; set; }

    public virtual DbSet<ComplaintTyp> ComplaintTyp { get; set; }

    public virtual DbSet<CompletionStatus> CompletionStatus { get; set; }

    public virtual DbSet<ComplianceItem> ComplianceItem { get; set; }

    public virtual DbSet<CompliancePeriodHospital> CompliancePeriodHospital { get; set; }

    public virtual DbSet<CompliancePeriodInst> CompliancePeriodInst { get; set; }

    public virtual DbSet<CompliancePgm> CompliancePgm { get; set; }

    public virtual DbSet<CompliancePrd> CompliancePrd { get; set; }

    public virtual DbSet<CompliancePrdBinaryMeasure> CompliancePrdBinaryMeasure { get; set; }

    public virtual DbSet<ConfigurationGuard> ConfigurationGuard { get; set; }

    public virtual DbSet<ConfigurationItem> ConfigurationItem { get; set; }

    public virtual DbSet<ConfigurationSet> ConfigurationSet { get; set; }

    public virtual DbSet<ConfiguredEmt> ConfiguredEmt { get; set; }

    public virtual DbSet<ContactTyp> ContactTyp { get; set; }

    public virtual DbSet<ContrastBolus> ContrastBolus { get; set; }

    public virtual DbSet<ContrastBolusCode> ContrastBolusCode { get; set; }

    public virtual DbSet<ContrastFlow> ContrastFlow { get; set; }

    public virtual DbSet<ControlPoint> ControlPoint { get; set; }

    public virtual DbSet<ControlPointProton> ControlPointProton { get; set; }

    public virtual DbSet<Country> Country { get; set; }

    public virtual DbSet<CountryField> CountryField { get; set; }

    public virtual DbSet<Course> Course { get; set; }

    public virtual DbSet<CourseDiagnosis> CourseDiagnosis { get; set; }

    public virtual DbSet<CourseModel> CourseModel { get; set; }

    public virtual DbSet<CoursePrintInfo> CoursePrintInfo { get; set; }

    public virtual DbSet<CoursePrintInfo1> CoursePrintInfo1 { get; set; }

    public virtual DbSet<Credit> Credit { get; set; }

    public virtual DbSet<CreditMh> CreditMh { get; set; }

    public virtual DbSet<CrwCurJobs> CrwCurJobs { get; set; }

    public virtual DbSet<CrwDemgrMsg> CrwDemgrMsg { get; set; }

    public virtual DbSet<CrwHxJobs> CrwHxJobs { get; set; }

    public virtual DbSet<CrwReportAccess> CrwReportAccess { get; set; }

    public virtual DbSet<CrwReportLink> CrwReportLink { get; set; }

    public virtual DbSet<CrwReportList> CrwReportList { get; set; }

    public virtual DbSet<CrwReportParm> CrwReportParm { get; set; }

    public virtual DbSet<CrwReportTyp> CrwReportTyp { get; set; }

    public virtual DbSet<CrwReportUser> CrwReportUser { get; set; }

    public virtual DbSet<CsOfDthTyp> CsOfDthTyp { get; set; }

    public virtual DbSet<CtActivity> CtActivity { get; set; }

    public virtual DbSet<CtBudgetTyp> CtBudgetTyp { get; set; }

    public virtual DbSet<CtConsentFormStatus> CtConsentFormStatus { get; set; }

    public virtual DbSet<CtContractTyp> CtContractTyp { get; set; }

    public virtual DbSet<CtCustForm> CtCustForm { get; set; }

    public virtual DbSet<CtCustFormFields> CtCustFormFields { get; set; }

    public virtual DbSet<CtCustFormResultDetail> CtCustFormResultDetail { get; set; }

    public virtual DbSet<CtCustFormResultHdr> CtCustFormResultHdr { get; set; }

    public virtual DbSet<CtCustFormTyp> CtCustFormTyp { get; set; }

    public virtual DbSet<CtDcmnt> CtDcmnt { get; set; }

    public virtual DbSet<CtFinDisclosureTyp> CtFinDisclosureTyp { get; set; }

    public virtual DbSet<CtForm1SignTyp> CtForm1SignTyp { get; set; }

    public virtual DbSet<CtForm1Typ> CtForm1Typ { get; set; }

    public virtual DbSet<CtIbcReviewTyp> CtIbcReviewTyp { get; set; }

    public virtual DbSet<CtIcfTyp> CtIcfTyp { get; set; }

    public virtual DbSet<CtInstrumentsTyp> CtInstrumentsTyp { get; set; }

    public virtual DbSet<CtIssueRcmdTyp> CtIssueRcmdTyp { get; set; }

    public virtual DbSet<CtMatStorage> CtMatStorage { get; set; }

    public virtual DbSet<CtMgdByTyp> CtMgdByTyp { get; set; }

    public virtual DbSet<CtNextStepTyp> CtNextStepTyp { get; set; }

    public virtual DbSet<CtPhaseCd> CtPhaseCd { get; set; }

    public virtual DbSet<CtPlsoTyp> CtPlsoTyp { get; set; }

    public virtual DbSet<CtPriorityListTyp> CtPriorityListTyp { get; set; }

    public virtual DbSet<CtProtocol1572Typ> CtProtocol1572Typ { get; set; }

    public virtual DbSet<CtProtocolRecvStatusTyp> CtProtocolRecvStatusTyp { get; set; }

    public virtual DbSet<CtRegDcmntTyp> CtRegDcmntTyp { get; set; }

    public virtual DbSet<CtResReviewStatusTyp> CtResReviewStatusTyp { get; set; }

    public virtual DbSet<CtRscReviewTyp> CtRscReviewTyp { get; set; }

    public virtual DbSet<CtStaffRoleTyp> CtStaffRoleTyp { get; set; }

    public virtual DbSet<CtStatusTyp> CtStatusTyp { get; set; }

    public virtual DbSet<CtSystemComp> CtSystemComp { get; set; }

    public virtual DbSet<CtWorkFileTyp> CtWorkFileTyp { get; set; }

    public virtual DbSet<Ctscanner> Ctscanner { get; set; }

    public virtual DbSet<Ctsimulator> Ctsimulator { get; set; }

    public virtual DbSet<CultureCd> CultureCd { get; set; }

    public virtual DbSet<CumTyp> CumTyp { get; set; }

    public virtual DbSet<Currency> Currency { get; set; }

    public virtual DbSet<CvxCd> CvxCd { get; set; }

    public virtual DbSet<CycleEvent> CycleEvent { get; set; }

    public virtual DbSet<CycleEventDetail> CycleEventDetail { get; set; }

    public virtual DbSet<CycleEventOrder> CycleEventOrder { get; set; }

    public virtual DbSet<DataUpdateLog> DataUpdateLog { get; set; }

    public virtual DbSet<DateCd> DateCd { get; set; }

    public virtual DbSet<DateChangeLog> DateChangeLog { get; set; }

    public virtual DbSet<DbInst> DbInst { get; set; }

    public virtual DbSet<DbModCompleted> DbModCompleted { get; set; }

    public virtual DbSet<DbPrinterMutex> DbPrinterMutex { get; set; }

    public virtual DbSet<DbTextSelect> DbTextSelect { get; set; }

    public virtual DbSet<DbTimeSelect> DbTimeSelect { get; set; }

    public virtual DbSet<Dbhistory> Dbhistory { get; set; }

    public virtual DbSet<DcmntMailQue> DcmntMailQue { get; set; }

    public virtual DbSet<DcmntMailRcpts> DcmntMailRcpts { get; set; }

    public virtual DbSet<DcmntServer> DcmntServer { get; set; }

    public virtual DbSet<DcobjectPointerSeries> DcobjectPointerSeries { get; set; }

    public virtual DbSet<DcobjectPointerStudy> DcobjectPointerStudy { get; set; }

    public virtual DbSet<DcobjectTrackingInfo> DcobjectTrackingInfo { get; set; }

    public virtual DbSet<DctransferSyntax> DctransferSyntax { get; set; }

    public virtual DbSet<DeliverySetupDevice> DeliverySetupDevice { get; set; }

    public virtual DbSet<DeliverySetupDeviceMachine> DeliverySetupDeviceMachine { get; set; }

    public virtual DbSet<DemExternalBeam> DemExternalBeam { get; set; }

    public virtual DbSet<DemGroup> DemGroup { get; set; }

    public virtual DbSet<Department> Department { get; set; }

    public virtual DbSet<DepartmentPttrnDetails> DepartmentPttrnDetails { get; set; }

    public virtual DbSet<DeptGrpAssociation> DeptGrpAssociation { get; set; }

    public virtual DbSet<DerivedImageCode> DerivedImageCode { get; set; }

    public virtual DbSet<DerivedInstanceUid> DerivedInstanceUid { get; set; }

    public virtual DbSet<DesignationTyp> DesignationTyp { get; set; }

    public virtual DbSet<DfltCtrl> DfltCtrl { get; set; }

    public virtual DbSet<DfltMenu> DfltMenu { get; set; }

    public virtual DbSet<DfltXrefCtrl> DfltXrefCtrl { get; set; }

    public virtual DbSet<DfltXrefMenu> DfltXrefMenu { get; set; }

    public virtual DbSet<Diagnosis> Diagnosis { get; set; }

    public virtual DbSet<DiagnosisCode> DiagnosisCode { get; set; }

    public virtual DbSet<DiagnosisDetail> DiagnosisDetail { get; set; }

    public virtual DbSet<DiagnosisStage> DiagnosisStage { get; set; }

    public virtual DbSet<DicomLocation> DicomLocation { get; set; }

    public virtual DbSet<DicomcodeMeaning> DicomcodeMeaning { get; set; }

    public virtual DbSet<DicomcodeScheme> DicomcodeScheme { get; set; }

    public virtual DbSet<DicomcodeValue> DicomcodeValue { get; set; }

    public virtual DbSet<DictationQueue> DictationQueue { get; set; }

    public virtual DbSet<DictationQueueMh> DictationQueueMh { get; set; }

    public virtual DbSet<DictationTyp> DictationTyp { get; set; }

    public virtual DbSet<Directive> Directive { get; set; }

    public virtual DbSet<DisciplineTyp> DisciplineTyp { get; set; }

    public virtual DbSet<DiskCheckTbl> DiskCheckTbl { get; set; }

    public virtual DbSet<DispLoc> DispLoc { get; set; }

    public virtual DbSet<DispLocTyp> DispLocTyp { get; set; }

    public virtual DbSet<DmDbMod> DmDbMod { get; set; }

    public virtual DbSet<DmDbXref> DmDbXref { get; set; }

    public virtual DbSet<DocFileTyp> DocFileTyp { get; set; }

    public virtual DbSet<Doctor> Doctor { get; set; }

    public virtual DbSet<DoctorBillingService> DoctorBillingService { get; set; }

    public virtual DbSet<DoctorMh> DoctorMh { get; set; }

    public virtual DbSet<DosageForm> DosageForm { get; set; }

    public virtual DbSet<DosageFormExtDrugDb> DosageFormExtDrugDb { get; set; }

    public virtual DbSet<DoseContribution> DoseContribution { get; set; }

    public virtual DbSet<DoseContributionModel> DoseContributionModel { get; set; }

    public virtual DbSet<DoseCorrectionLog> DoseCorrectionLog { get; set; }

    public virtual DbSet<DoseLevel> DoseLevel { get; set; }

    public virtual DbSet<DoseMatrix> DoseMatrix { get; set; }

    public virtual DbSet<DoseObjectives> DoseObjectives { get; set; }

    public virtual DbSet<DoseRate> DoseRate { get; set; }

    public virtual DbSet<DoseRoundMthd> DoseRoundMthd { get; set; }

    public virtual DbSet<DoseTemplate> DoseTemplate { get; set; }

    public virtual DbSet<DoseVrtnTyp> DoseVrtnTyp { get; set; }

    public virtual DbSet<DosimetricData> DosimetricData { get; set; }

    public virtual DbSet<DossiersAPreparer> DossiersAPreparer { get; set; }

    public virtual DbSet<DowFrqUnit> DowFrqUnit { get; set; }

    public virtual DbSet<DrillBit> DrillBit { get; set; }

    public virtual DbSet<DrugBatch> DrugBatch { get; set; }

    public virtual DbSet<DrugBatchAgt> DrugBatchAgt { get; set; }

    public virtual DbSet<DrugBatchLblDtl> DrugBatchLblDtl { get; set; }

    public virtual DbSet<DrugBatchPrint> DrugBatchPrint { get; set; }

    public virtual DbSet<DrugBatchPrintLblDtl> DrugBatchPrintLblDtl { get; set; }

    public virtual DbSet<DrugBatchSignoffDtl> DrugBatchSignoffDtl { get; set; }

    public virtual DbSet<DrugBatchSignoffSect> DrugBatchSignoffSect { get; set; }

    public virtual DbSet<DrugBatchUnit> DrugBatchUnit { get; set; }

    public virtual DbSet<DrugBatchUnitPt> DrugBatchUnitPt { get; set; }

    public virtual DbSet<DurationUnit> DurationUnit { get; set; }

    public virtual DbSet<Dvh> Dvh { get; set; }

    public virtual DbSet<DvhestimationTrainingSet> DvhestimationTrainingSet { get; set; }

    public virtual DbSet<DvhestimationTrainingSetPlanSetup> DvhestimationTrainingSetPlanSetup { get; set; }

    public virtual DbSet<DvhestimationTrainingSetPlanSetupStructureMapping> DvhestimationTrainingSetPlanSetupStructureMapping { get; set; }

    public virtual DbSet<DvhestimationTrainingSetStructure> DvhestimationTrainingSetStructure { get; set; }

    public virtual DbSet<DxMthdTyp> DxMthdTyp { get; set; }

    public virtual DbSet<DxSrvSection> DxSrvSection { get; set; }

    public virtual DbSet<DxTyp> DxTyp { get; set; }

    public virtual DbSet<DynamicWedge> DynamicWedge { get; set; }

    public virtual DbSet<EdiOut> EdiOut { get; set; }

    public virtual DbSet<EducContent> EducContent { get; set; }

    public virtual DbSet<EducTopics> EducTopics { get; set; }

    public virtual DbSet<EducationLvl> EducationLvl { get; set; }

    public virtual DbSet<EducationResource> EducationResource { get; set; }

    public virtual DbSet<EmailAddress> EmailAddress { get; set; }

    public virtual DbSet<EmailCd> EmailCd { get; set; }

    public virtual DbSet<EmailFnctnlAreaCd> EmailFnctnlAreaCd { get; set; }

    public virtual DbSet<EmailIncidentTyp> EmailIncidentTyp { get; set; }

    public virtual DbSet<EmpStatusTyp> EmpStatusTyp { get; set; }

    public virtual DbSet<Employer> Employer { get; set; }

    public virtual DbSet<EnergyMode> EnergyMode { get; set; }

    public virtual DbSet<EnmDbMod> EnmDbMod { get; set; }

    public virtual DbSet<EpcsAuditLog> EpcsAuditLog { get; set; }

    public virtual DbSet<EpcsDrugNdc> EpcsDrugNdc { get; set; }

    public virtual DbSet<EpcsOrganization> EpcsOrganization { get; set; }

    public virtual DbSet<EpcsVendor> EpcsVendor { get; set; }

    public virtual DbSet<EpcsWebServiceReq> EpcsWebServiceReq { get; set; }

    public virtual DbSet<Equipment> Equipment { get; set; }

    public virtual DbSet<ErrorMsg> ErrorMsg { get; set; }

    public virtual DbSet<ErxAgtRx> ErxAgtRx { get; set; }

    public virtual DbSet<ErxAgtRxMh> ErxAgtRxMh { get; set; }

    public virtual DbSet<ErxBenefitIds> ErxBenefitIds { get; set; }

    public virtual DbSet<ErxBenefitSeg> ErxBenefitSeg { get; set; }

    public virtual DbSet<ErxCancelRx> ErxCancelRx { get; set; }

    public virtual DbSet<ErxCancelRxMh> ErxCancelRxMh { get; set; }

    public virtual DbSet<ErxCancelRxRespRsn> ErxCancelRxRespRsn { get; set; }

    public virtual DbSet<ErxChangeRqst> ErxChangeRqst { get; set; }

    public virtual DbSet<ErxChangeRqstMh> ErxChangeRqstMh { get; set; }

    public virtual DbSet<ErxConfig> ErxConfig { get; set; }

    public virtual DbSet<ErxDataTrans> ErxDataTrans { get; set; }

    public virtual DbSet<ErxDrugSeg> ErxDrugSeg { get; set; }

    public virtual DbSet<ErxDueSeg> ErxDueSeg { get; set; }

    public virtual DbSet<ErxErrLog> ErxErrLog { get; set; }

    public virtual DbSet<ErxIds> ErxIds { get; set; }

    public virtual DbSet<ErxInOutXmlLog> ErxInOutXmlLog { get; set; }

    public virtual DbSet<ErxLog> ErxLog { get; set; }

    public virtual DbSet<ErxObsSeg> ErxObsSeg { get; set; }

    public virtual DbSet<ErxOutboundStatusVerifyError> ErxOutboundStatusVerifyError { get; set; }

    public virtual DbSet<ErxOutboundStatusVerifyErrorMh> ErxOutboundStatusVerifyErrorMh { get; set; }

    public virtual DbSet<ErxPhone> ErxPhone { get; set; }

    public virtual DbSet<ErxPttSeg> ErxPttSeg { get; set; }

    public virtual DbSet<ErxPvdSeg> ErxPvdSeg { get; set; }

    public virtual DbSet<ErxRefillDetail> ErxRefillDetail { get; set; }

    public virtual DbSet<ErxRefillDrugCvg> ErxRefillDrugCvg { get; set; }

    public virtual DbSet<ErxRefillRqst> ErxRefillRqst { get; set; }

    public virtual DbSet<ErxRefillRqstMh> ErxRefillRqstMh { get; set; }

    public virtual DbSet<ErxRoutingErrLog> ErxRoutingErrLog { get; set; }

    public virtual DbSet<ErxRxFill> ErxRxFill { get; set; }

    public virtual DbSet<ErxRxFillMh> ErxRxFillMh { get; set; }

    public virtual DbSet<ErxThreadItem> ErxThreadItem { get; set; }

    public virtual DbSet<ErxThreadItemMh> ErxThreadItemMh { get; set; }

    public virtual DbSet<EstimatedDvh> EstimatedDvh { get; set; }

    public virtual DbSet<EthnicGroups> EthnicGroups { get; set; }

    public virtual DbSet<EventTyp> EventTyp { get; set; }

    public virtual DbSet<ExamAsmt> ExamAsmt { get; set; }

    public virtual DbSet<ExamAsmtAttr> ExamAsmtAttr { get; set; }

    public virtual DbSet<ExamAsmtAttrCulture> ExamAsmtAttrCulture { get; set; }

    public virtual DbSet<ExamAsmtCulture> ExamAsmtCulture { get; set; }

    public virtual DbSet<ExamComp> ExamComp { get; set; }

    public virtual DbSet<ExamCompCulture> ExamCompCulture { get; set; }

    public virtual DbSet<ExamDfltDesc> ExamDfltDesc { get; set; }

    public virtual DbSet<ExamSystem> ExamSystem { get; set; }

    public virtual DbSet<ExamSystemDfltCulture> ExamSystemDfltCulture { get; set; }

    public virtual DbSet<ExpDest> ExpDest { get; set; }

    public virtual DbSet<ExpHxMast> ExpHxMast { get; set; }

    public virtual DbSet<ExpHxPt> ExpHxPt { get; set; }

    public virtual DbSet<ExpHxTp> ExpHxTp { get; set; }

    public virtual DbSet<ExtDrugDb> ExtDrugDb { get; set; }

    public virtual DbSet<ExtDrugDbFdbDetail> ExtDrugDbFdbDetail { get; set; }

    public virtual DbSet<ExtDrugDbLog> ExtDrugDbLog { get; set; }

    public virtual DbSet<ExternalBeam> ExternalBeam { get; set; }

    public virtual DbSet<ExternalField> ExternalField { get; set; }

    public virtual DbSet<ExternalFieldCommon> ExternalFieldCommon { get; set; }

    public virtual DbSet<ExternalFieldCommonHstry> ExternalFieldCommonHstry { get; set; }

    public virtual DbSet<ExternalFieldHstry> ExternalFieldHstry { get; set; }

    public virtual DbSet<ExternalIntegration> ExternalIntegration { get; set; }

    public virtual DbSet<Fac> Fac { get; set; }

    public virtual DbSet<FacCalibration> FacCalibration { get; set; }

    public virtual DbSet<FacComp> FacComp { get; set; }

    public virtual DbSet<FacCompMap> FacCompMap { get; set; }

    public virtual DbSet<FacCompVal> FacCompVal { get; set; }

    public virtual DbSet<FacGroup> FacGroup { get; set; }

    public virtual DbSet<FacGroupBill> FacGroupBill { get; set; }

    public virtual DbSet<FacGroupDxReq> FacGroupDxReq { get; set; }

    public virtual DbSet<FacGroupDxReqGroup> FacGroupDxReqGroup { get; set; }

    public virtual DbSet<FacGroupMap> FacGroupMap { get; set; }

    public virtual DbSet<FacGroupReason> FacGroupReason { get; set; }

    public virtual DbSet<FacRqstn> FacRqstn { get; set; }

    public virtual DbSet<FacRqstnCat> FacRqstnCat { get; set; }

    public virtual DbSet<FacTyp> FacTyp { get; set; }

    public virtual DbSet<FacUnavl> FacUnavl { get; set; }

    public virtual DbSet<FacUomMap> FacUomMap { get; set; }

    public virtual DbSet<FaxProduct> FaxProduct { get; set; }

    public virtual DbSet<FbmLtr> FbmLtr { get; set; }

    public virtual DbSet<FbmPgm> FbmPgm { get; set; }

    public virtual DbSet<FbmPgmSch> FbmPgmSch { get; set; }

    public virtual DbSet<FbmPgmTyp> FbmPgmTyp { get; set; }

    public virtual DbSet<FbmPtFuTyp> FbmPtFuTyp { get; set; }

    public virtual DbSet<FbmPtHandlingTyp> FbmPtHandlingTyp { get; set; }

    public virtual DbSet<FbmPtRespTyp> FbmPtRespTyp { get; set; }

    public virtual DbSet<FcnAreaTyp> FcnAreaTyp { get; set; }

    public virtual DbSet<FcnCls> FcnCls { get; set; }

    public virtual DbSet<FcnComp> FcnComp { get; set; }

    public virtual DbSet<FcnCompTyp> FcnCompTyp { get; set; }

    public virtual DbSet<FcnDetail> FcnDetail { get; set; }

    public virtual DbSet<FcnTyp> FcnTyp { get; set; }

    public virtual DbSet<FdaProduct> FdaProduct { get; set; }

    public virtual DbSet<FdbRegNdc> FdbRegNdc { get; set; }

    public virtual DbSet<FdbRegRxnorm> FdbRegRxnorm { get; set; }

    public virtual DbSet<FdbRegStrengths> FdbRegStrengths { get; set; }

    public virtual DbSet<FdbRxnorm> FdbRxnorm { get; set; }

    public virtual DbSet<FieldAddOn> FieldAddOn { get; set; }

    public virtual DbSet<FieldModel> FieldModel { get; set; }

    public virtual DbSet<FieldPhoto> FieldPhoto { get; set; }

    public virtual DbSet<FieldProton> FieldProton { get; set; }

    public virtual DbSet<FieldSpecificTargetParameters> FieldSpecificTargetParameters { get; set; }

    public virtual DbSet<FieldStructure> FieldStructure { get; set; }

    public virtual DbSet<FieldVariation> FieldVariation { get; set; }

    public virtual DbSet<FileLocation> FileLocation { get; set; }

    public virtual DbSet<FilesToPrepare> FilesToPrepare { get; set; }

    public virtual DbSet<Financial> Financial { get; set; }

    public virtual DbSet<FinancialCls> FinancialCls { get; set; }

    public virtual DbSet<FinancialIns> FinancialIns { get; set; }

    public virtual DbSet<FlatPatientDiagnosisSite> FlatPatientDiagnosisSite { get; set; }

    public virtual DbSet<FmtClsTyp> FmtClsTyp { get; set; }

    public virtual DbSet<FmtField> FmtField { get; set; }

    public virtual DbSet<FmtString> FmtString { get; set; }

    public virtual DbSet<FocusStatusTyp> FocusStatusTyp { get; set; }

    public virtual DbSet<FormTyp> FormTyp { get; set; }

    public virtual DbSet<FsCustView> FsCustView { get; set; }

    public virtual DbSet<FsCustViewProvider> FsCustViewProvider { get; set; }

    public virtual DbSet<FsCustViewProviderComp> FsCustViewProviderComp { get; set; }

    public virtual DbSet<FsFcnTyp> FsFcnTyp { get; set; }

    public virtual DbSet<GenderIdentity> GenderIdentity { get; set; }

    public virtual DbSet<GetActivityDetails14days> GetActivityDetails14days { get; set; }

    public virtual DbSet<GetActivityDetailsDosimetry> GetActivityDetailsDosimetry { get; set; }

    public virtual DbSet<GetActivityTransaction14days> GetActivityTransaction14days { get; set; }

    public virtual DbSet<GetActivityTransactionDosimetry> GetActivityTransactionDosimetry { get; set; }

    public virtual DbSet<GetPtPrimaryDateRankedDxSite> GetPtPrimaryDateRankedDxSite { get; set; }

    public virtual DbSet<GetTablenames> GetTablenames { get; set; }

    public virtual DbSet<GnrcGrp> GnrcGrp { get; set; }

    public virtual DbSet<GnrcNote> GnrcNote { get; set; }

    public virtual DbSet<GnrcNoteTyp> GnrcNoteTyp { get; set; }

    public virtual DbSet<GradingCriteria> GradingCriteria { get; set; }

    public virtual DbSet<GradingCriteriaCulture> GradingCriteriaCulture { get; set; }

    public virtual DbSet<GradingSchemes> GradingSchemes { get; set; }

    public virtual DbSet<GraphicAnnotation> GraphicAnnotation { get; set; }

    public virtual DbSet<GraphicAnnotationType> GraphicAnnotationType { get; set; }

    public virtual DbSet<GroupResource> GroupResource { get; set; }

    public virtual DbSet<GsTrSubComp> GsTrSubComp { get; set; }

    public virtual DbSet<GsTrSubCompCulture> GsTrSubCompCulture { get; set; }

    public virtual DbSet<HcpBill> HcpBill { get; set; }

    public virtual DbSet<HcpName> HcpName { get; set; }

    public virtual DbSet<HcpRx> HcpRx { get; set; }

    public virtual DbSet<HcpRxProd> HcpRxProd { get; set; }

    public virtual DbSet<HcpTyp> HcpTyp { get; set; }

    public virtual DbSet<HelpIndex> HelpIndex { get; set; }

    public virtual DbSet<HelpKwrd> HelpKwrd { get; set; }

    public virtual DbSet<HelpUsage> HelpUsage { get; set; }

    public virtual DbSet<HipaaLogHash> HipaaLogHash { get; set; }

    public virtual DbSet<HistologyCode> HistologyCode { get; set; }

    public virtual DbSet<Hl7AppTyp> Hl7AppTyp { get; set; }

    public virtual DbSet<Hl7Comp> Hl7Comp { get; set; }

    public virtual DbSet<Hl7CondDetail> Hl7CondDetail { get; set; }

    public virtual DbSet<Hl7CondHeader> Hl7CondHeader { get; set; }

    public virtual DbSet<Hl7CondHeaderAppMsg> Hl7CondHeaderAppMsg { get; set; }

    public virtual DbSet<Hl7DataTyp> Hl7DataTyp { get; set; }

    public virtual DbSet<Hl7DefTyp> Hl7DefTyp { get; set; }

    public virtual DbSet<Hl7Encoding> Hl7Encoding { get; set; }

    public virtual DbSet<Hl7EvntTyp> Hl7EvntTyp { get; set; }

    public virtual DbSet<Hl7Field> Hl7Field { get; set; }

    public virtual DbSet<Hl7FieldCompXref> Hl7FieldCompXref { get; set; }

    public virtual DbSet<Hl7FinClsTyp> Hl7FinClsTyp { get; set; }

    public virtual DbSet<Hl7HospServiceTyp> Hl7HospServiceTyp { get; set; }

    public virtual DbSet<Hl7In> Hl7In { get; set; }

    public virtual DbSet<Hl7InXml> Hl7InXml { get; set; }

    public virtual DbSet<Hl7Link> Hl7Link { get; set; }

    public virtual DbSet<Hl7MsgAppTypXref> Hl7MsgAppTypXref { get; set; }

    public virtual DbSet<Hl7MsgEvntSegFieldXref> Hl7MsgEvntSegFieldXref { get; set; }

    public virtual DbSet<Hl7MsgEvntSegXref> Hl7MsgEvntSegXref { get; set; }

    public virtual DbSet<Hl7MsgEvntXref> Hl7MsgEvntXref { get; set; }

    public virtual DbSet<Hl7MsgTyp> Hl7MsgTyp { get; set; }

    public virtual DbSet<Hl7MsgTypAuditHist> Hl7MsgTypAuditHist { get; set; }

    public virtual DbSet<Hl7Out> Hl7Out { get; set; }

    public virtual DbSet<Hl7OutXml> Hl7OutXml { get; set; }

    public virtual DbSet<Hl7PtClsTyp> Hl7PtClsTyp { get; set; }

    public virtual DbSet<Hl7PtStatusTyp> Hl7PtStatusTyp { get; set; }

    public virtual DbSet<Hl7PtTyp> Hl7PtTyp { get; set; }

    public virtual DbSet<Hl7SegFieldXref> Hl7SegFieldXref { get; set; }

    public virtual DbSet<Hl7SegTyp> Hl7SegTyp { get; set; }

    public virtual DbSet<Hl7Seq> Hl7Seq { get; set; }

    public virtual DbSet<Hl7Vers> Hl7Vers { get; set; }

    public virtual DbSet<Hospital> Hospital { get; set; }

    public virtual DbSet<HstGradeTyp> HstGradeTyp { get; set; }

    public virtual DbSet<HxHdr> HxHdr { get; set; }

    public virtual DbSet<HxQuestion> HxQuestion { get; set; }

    public virtual DbSet<HydraFluid> HydraFluid { get; set; }

    public virtual DbSet<IcdDx> IcdDx { get; set; }

    public virtual DbSet<IcdDxCulture> IcdDxCulture { get; set; }

    public virtual DbSet<IcdGroup> IcdGroup { get; set; }

    public virtual DbSet<IcdProcedure> IcdProcedure { get; set; }

    public virtual DbSet<IcdoMorphCd> IcdoMorphCd { get; set; }

    public virtual DbSet<IcdoMorphCdCulture> IcdoMorphCdCulture { get; set; }

    public virtual DbSet<IcdoMorphSite> IcdoMorphSite { get; set; }

    public virtual DbSet<IcdoMorphTyp> IcdoMorphTyp { get; set; }

    public virtual DbSet<IcdoMorphTypCulture> IcdoMorphTypCulture { get; set; }

    public virtual DbSet<IcdoSiteCd> IcdoSiteCd { get; set; }

    public virtual DbSet<IcdoSiteCdCulture> IcdoSiteCdCulture { get; set; }

    public virtual DbSet<IcdoSiteTyp> IcdoSiteTyp { get; set; }

    public virtual DbSet<IdTypCd> IdTypCd { get; set; }

    public virtual DbSet<IdealWt> IdealWt { get; set; }

    public virtual DbSet<Image> Image { get; set; }

    public virtual DbSet<Image1> Image1 { get; set; }

    public virtual DbSet<Image4D> Image4D { get; set; }

    public virtual DbSet<ImageMatchResult> ImageMatchResult { get; set; }

    public virtual DbSet<ImageModel> ImageModel { get; set; }

    public virtual DbSet<ImageRelatedInstance> ImageRelatedInstance { get; set; }

    public virtual DbSet<ImageSlice> ImageSlice { get; set; }

    public virtual DbSet<ImageTyp> ImageTyp { get; set; }

    public virtual DbSet<ImagingDevice> ImagingDevice { get; set; }

    public virtual DbSet<ImgDcmnt> ImgDcmnt { get; set; }

    public virtual DbSet<ImgFileTyp> ImgFileTyp { get; set; }

    public virtual DbSet<ImgPage> ImgPage { get; set; }

    public virtual DbSet<ImgPageBatch> ImgPageBatch { get; set; }

    public virtual DbSet<ImgPaperCfg> ImgPaperCfg { get; set; }

    public virtual DbSet<ImgPaperDflt> ImgPaperDflt { get; set; }

    public virtual DbSet<ImgScanMode> ImgScanMode { get; set; }

    public virtual DbSet<ImmunAdmnRoute> ImmunAdmnRoute { get; set; }

    public virtual DbSet<ImmunRegStatus> ImmunRegStatus { get; set; }

    public virtual DbSet<Immunity> Immunity { get; set; }

    public virtual DbSet<ImpHxMast> ImpHxMast { get; set; }

    public virtual DbSet<ImpHxPt> ImpHxPt { get; set; }

    public virtual DbSet<ImpHxTp> ImpHxTp { get; set; }

    public virtual DbSet<ImpexpApp> ImpexpApp { get; set; }

    public virtual DbSet<ImpexpAppTyp> ImpexpAppTyp { get; set; }

    public virtual DbSet<ImpexpColumns> ImpexpColumns { get; set; }

    public virtual DbSet<ImpexpTables> ImpexpTables { get; set; }

    public virtual DbSet<ImpexpThru> ImpexpThru { get; set; }

    public virtual DbSet<ImplantableDevice> ImplantableDevice { get; set; }

    public virtual DbSet<ImplantableDeviceMh> ImplantableDeviceMh { get; set; }

    public virtual DbSet<ImportExportColumn> ImportExportColumn { get; set; }

    public virtual DbSet<ImportExportReference> ImportExportReference { get; set; }

    public virtual DbSet<ImportExportTable> ImportExportTable { get; set; }

    public virtual DbSet<InSightiveConfiguration> InSightiveConfiguration { get; set; }

    public virtual DbSet<InSightiveSimplifiedActivitiesConfigurationTb> InSightiveSimplifiedActivitiesConfigurationTb { get; set; }

    public virtual DbSet<InSightiveSimplifiedDxSiteConfigurationTb> InSightiveSimplifiedDxSiteConfigurationTb { get; set; }

    public virtual DbSet<InSightiveSimplifiedGroupConfigurationTb> InSightiveSimplifiedGroupConfigurationTb { get; set; }

    public virtual DbSet<InSightiveSimplifiedHospDeptConfigurationTb> InSightiveSimplifiedHospDeptConfigurationTb { get; set; }

    public virtual DbSet<InSightiveSimplifiedPrimaryOncoConfigurationTb> InSightiveSimplifiedPrimaryOncoConfigurationTb { get; set; }

    public virtual DbSet<InVivoDosimetry> InVivoDosimetry { get; set; }

    public virtual DbSet<InfectionCtrlTyp> InfectionCtrlTyp { get; set; }

    public virtual DbSet<InfusionDetails> InfusionDetails { get; set; }

    public virtual DbSet<InfusionTyp> InfusionTyp { get; set; }

    public virtual DbSet<IniParms> IniParms { get; set; }

    public virtual DbSet<InitialCtdetails> InitialCtdetails { get; set; }

    public virtual DbSet<InitialCtdetails1> InitialCtdetails1 { get; set; }

    public virtual DbSet<InsCo> InsCo { get; set; }

    public virtual DbSet<InsCoGrp> InsCoGrp { get; set; }

    public virtual DbSet<InsCoParent> InsCoParent { get; set; }

    public virtual DbSet<InsPrecertAlertWindow> InsPrecertAlertWindow { get; set; }

    public virtual DbSet<InsPrecertBillCd> InsPrecertBillCd { get; set; }

    public virtual DbSet<InsPrecertTyp> InsPrecertTyp { get; set; }

    public virtual DbSet<InsRqstn> InsRqstn { get; set; }

    public virtual DbSet<Inst> Inst { get; set; }

    public virtual DbSet<InstAgendaCatTyp> InstAgendaCatTyp { get; set; }

    public virtual DbSet<InstAgentRstr> InstAgentRstr { get; set; }

    public virtual DbSet<InstAgtCat> InstAgtCat { get; set; }

    public virtual DbSet<InstAgtCatAgt> InstAgtCatAgt { get; set; }

    public virtual DbSet<InstAuthEvent> InstAuthEvent { get; set; }

    public virtual DbSet<InstBaseTyp> InstBaseTyp { get; set; }

    public virtual DbSet<InstBillCdInfo> InstBillCdInfo { get; set; }

    public virtual DbSet<InstBillEventTyp> InstBillEventTyp { get; set; }

    public virtual DbSet<InstBsaFormula> InstBsaFormula { get; set; }

    public virtual DbSet<InstCareBed> InstCareBed { get; set; }

    public virtual DbSet<InstCareUnit> InstCareUnit { get; set; }

    public virtual DbSet<InstDept> InstDept { get; set; }

    public virtual DbSet<InstDoseMgmt> InstDoseMgmt { get; set; }

    public virtual DbSet<InstDxCode> InstDxCode { get; set; }

    public virtual DbSet<InstEventTyp> InstEventTyp { get; set; }

    public virtual DbSet<InstExamSystem> InstExamSystem { get; set; }

    public virtual DbSet<InstExtDrugDb> InstExtDrugDb { get; set; }

    public virtual DbSet<InstFcn> InstFcn { get; set; }

    public virtual DbSet<InstFsFcnSort> InstFsFcnSort { get; set; }

    public virtual DbSet<InstHxComp> InstHxComp { get; set; }

    public virtual DbSet<InstHxCompCat> InstHxCompCat { get; set; }

    public virtual DbSet<InstHxCompCatComp> InstHxCompCatComp { get; set; }

    public virtual DbSet<InstHydraRoundMthd> InstHydraRoundMthd { get; set; }

    public virtual DbSet<InstLab> InstLab { get; set; }

    public virtual DbSet<InstLoc> InstLoc { get; set; }

    public virtual DbSet<InstLocBldg> InstLocBldg { get; set; }

    public virtual DbSet<InstLocFloor> InstLocFloor { get; set; }

    public virtual DbSet<InstLocGroup> InstLocGroup { get; set; }

    public virtual DbSet<InstLocRoom> InstLocRoom { get; set; }

    public virtual DbSet<InstNoteGroup> InstNoteGroup { get; set; }

    public virtual DbSet<InstNoteGroupTyp> InstNoteGroupTyp { get; set; }

    public virtual DbSet<InstNoteTyp> InstNoteTyp { get; set; }

    public virtual DbSet<InstOperation> InstOperation { get; set; }

    public virtual DbSet<InstPlcyTyp> InstPlcyTyp { get; set; }

    public virtual DbSet<InstPo> InstPo { get; set; }

    public virtual DbSet<InstPoDetail> InstPoDetail { get; set; }

    public virtual DbSet<InstPoSheet> InstPoSheet { get; set; }

    public virtual DbSet<InstProvider> InstProvider { get; set; }

    public virtual DbSet<InstPtKeyCd> InstPtKeyCd { get; set; }

    public virtual DbSet<InstRouteRstr> InstRouteRstr { get; set; }

    public virtual DbSet<InstRxReport> InstRxReport { get; set; }

    public virtual DbSet<InstSchEventTyp> InstSchEventTyp { get; set; }

    public virtual DbSet<InstScheme> InstScheme { get; set; }

    public virtual DbSet<InstSeq> InstSeq { get; set; }

    public virtual DbSet<InstShift> InstShift { get; set; }

    public virtual DbSet<InstStkhErx> InstStkhErx { get; set; }

    public virtual DbSet<InstTaskAreaTyp> InstTaskAreaTyp { get; set; }

    public virtual DbSet<InstTestComp> InstTestComp { get; set; }

    public virtual DbSet<InstTestCompCalibration> InstTestCompCalibration { get; set; }

    public virtual DbSet<InstTestCompGroup> InstTestCompGroup { get; set; }

    public virtual DbSet<InstTestGroup> InstTestGroup { get; set; }

    public virtual DbSet<InstTpDetail> InstTpDetail { get; set; }

    public virtual DbSet<InstTpKeyCd> InstTpKeyCd { get; set; }

    public virtual DbSet<InstTrComp> InstTrComp { get; set; }

    public virtual DbSet<InstTumGrp> InstTumGrp { get; set; }

    public virtual DbSet<InstTxDecRsn> InstTxDecRsn { get; set; }

    public virtual DbSet<InstTyp> InstTyp { get; set; }

    public virtual DbSet<InstTypOfTest> InstTypOfTest { get; set; }

    public virtual DbSet<InstVisitReasonTyp> InstVisitReasonTyp { get; set; }

    public virtual DbSet<InstVisitTaskTemplate> InstVisitTaskTemplate { get; set; }

    public virtual DbSet<Instr> Instr { get; set; }

    public virtual DbSet<InstrTyp> InstrTyp { get; set; }

    public virtual DbSet<IntfAppParm> IntfAppParm { get; set; }

    public virtual DbSet<IntfAppParmComp> IntfAppParmComp { get; set; }

    public virtual DbSet<IntfAppParmCond> IntfAppParmCond { get; set; }

    public virtual DbSet<IntfAppParmCondDetail> IntfAppParmCondDetail { get; set; }

    public virtual DbSet<IntfAppParmCondExpr> IntfAppParmCondExpr { get; set; }

    public virtual DbSet<IntfAppParmCondHeader> IntfAppParmCondHeader { get; set; }

    public virtual DbSet<IntfAppParmEvnt> IntfAppParmEvnt { get; set; }

    public virtual DbSet<IntfAppParmExtended> IntfAppParmExtended { get; set; }

    public virtual DbSet<IntfAppParmFacId> IntfAppParmFacId { get; set; }

    public virtual DbSet<IntfAppParmField> IntfAppParmField { get; set; }

    public virtual DbSet<IntfAppParmFwd> IntfAppParmFwd { get; set; }

    public virtual DbSet<IntfAppParmSeg> IntfAppParmSeg { get; set; }

    public virtual DbSet<IntfAppParmTrgr> IntfAppParmTrgr { get; set; }

    public virtual DbSet<IntfAppParmTrnsltn> IntfAppParmTrnsltn { get; set; }

    public virtual DbSet<IntfAppParmTrnsltnFld> IntfAppParmTrnsltnFld { get; set; }

    public virtual DbSet<IntfAppParmTrnsltnRecrd> IntfAppParmTrnsltnRecrd { get; set; }

    public virtual DbSet<IntfAppParmTrnsltnXml> IntfAppParmTrnsltnXml { get; set; }

    public virtual DbSet<IntfBillingRun> IntfBillingRun { get; set; }

    public virtual DbSet<IntfBillingRunInfo> IntfBillingRunInfo { get; set; }

    public virtual DbSet<IntfCcsLink> IntfCcsLink { get; set; }

    public virtual DbSet<IntfComm> IntfComm { get; set; }

    public virtual DbSet<IntfDispLoc> IntfDispLoc { get; set; }

    public virtual DbSet<IntfEmail> IntfEmail { get; set; }

    public virtual DbSet<IntfEmailLog> IntfEmailLog { get; set; }

    public virtual DbSet<IntfEmailMsg> IntfEmailMsg { get; set; }

    public virtual DbSet<IntfEmailMsgLog> IntfEmailMsgLog { get; set; }

    public virtual DbSet<IntfEngine> IntfEngine { get; set; }

    public virtual DbSet<IntfExclLabMap> IntfExclLabMap { get; set; }

    public virtual DbSet<IntfFieldCdMap> IntfFieldCdMap { get; set; }

    public virtual DbSet<IntfLabAnalyzer> IntfLabAnalyzer { get; set; }

    public virtual DbSet<IntfLabGrp> IntfLabGrp { get; set; }

    public virtual DbSet<IntfLabObsResult> IntfLabObsResult { get; set; }

    public virtual DbSet<IntfLabOrder> IntfLabOrder { get; set; }

    public virtual DbSet<IntfMap> IntfMap { get; set; }

    public virtual DbSet<IntfMode> IntfMode { get; set; }

    public virtual DbSet<IntfModeApp> IntfModeApp { get; set; }

    public virtual DbSet<IntfModeMsgTyp> IntfModeMsgTyp { get; set; }

    public virtual DbSet<IntfMsgLog> IntfMsgLog { get; set; }

    public virtual DbSet<IntfNoteTypSel> IntfNoteTypSel { get; set; }

    public virtual DbSet<IntfOlPrcsStat> IntfOlPrcsStat { get; set; }

    public virtual DbSet<IntfOlStat> IntfOlStat { get; set; }

    public virtual DbSet<IntfPtKeyMap> IntfPtKeyMap { get; set; }

    public virtual DbSet<IntfPtKeyMapVaris> IntfPtKeyMapVaris { get; set; }

    public virtual DbSet<IntfPtSelectConfig> IntfPtSelectConfig { get; set; }

    public virtual DbSet<IntfPtSelectDefn> IntfPtSelectDefn { get; set; }

    public virtual DbSet<IntfSch> IntfSch { get; set; }

    public virtual DbSet<IntfSchDef> IntfSchDef { get; set; }

    public virtual DbSet<IntfSchMap> IntfSchMap { get; set; }

    public virtual DbSet<IntfService> IntfService { get; set; }

    public virtual DbSet<IntfSmryStats> IntfSmryStats { get; set; }

    public virtual DbSet<IntfStkhKeyMap> IntfStkhKeyMap { get; set; }

    public virtual DbSet<IntfStkhKeyMapRole> IntfStkhKeyMapRole { get; set; }

    public virtual DbSet<IntfTrgr> IntfTrgr { get; set; }

    public virtual DbSet<IntfTrgr1> IntfTrgr1 { get; set; }

    public virtual DbSet<IntfTrgrKeys> IntfTrgrKeys { get; set; }

    public virtual DbSet<IntvCatDflt> IntvCatDflt { get; set; }

    public virtual DbSet<IntvEventStatus> IntvEventStatus { get; set; }

    public virtual DbSet<IntvLibrary> IntvLibrary { get; set; }

    public virtual DbSet<IntvLibraryBill> IntvLibraryBill { get; set; }

    public virtual DbSet<IntvUseTyp> IntvUseTyp { get; set; }

    public virtual DbSet<IsoLanguage> IsoLanguage { get; set; }

    public virtual DbSet<IvCat> IvCat { get; set; }

    public virtual DbSet<IvCatHdr> IvCatHdr { get; set; }

    public virtual DbSet<IvCatResp> IvCatResp { get; set; }

    public virtual DbSet<IvFluid> IvFluid { get; set; }

    public virtual DbSet<IvQstr> IvQstr { get; set; }

    public virtual DbSet<IvQstrBmp> IvQstrBmp { get; set; }

    public virtual DbSet<IvQstrCat> IvQstrCat { get; set; }

    public virtual DbSet<IvQstrResp> IvQstrResp { get; set; }

    public virtual DbSet<IvRespTyp> IvRespTyp { get; set; }

    public virtual DbSet<LangTyp> LangTyp { get; set; }

    public virtual DbSet<LanguageLookup> LanguageLookup { get; set; }

    public virtual DbSet<LateralityTyp> LateralityTyp { get; set; }

    public virtual DbSet<LblForm> LblForm { get; set; }

    public virtual DbSet<LblFormColDet> LblFormColDet { get; set; }

    public virtual DbSet<LblFormColFormat> LblFormColFormat { get; set; }

    public virtual DbSet<LblFormDet> LblFormDet { get; set; }

    public virtual DbSet<LblFormDetComp> LblFormDetComp { get; set; }

    public virtual DbSet<LblFormInst> LblFormInst { get; set; }

    public virtual DbSet<LblFormOptx> LblFormOptx { get; set; }

    public virtual DbSet<LblFormTbl> LblFormTbl { get; set; }

    public virtual DbSet<LinkRttemp> LinkRttemp { get; set; }

    public virtual DbSet<LinkUsage> LinkUsage { get; set; }

    public virtual DbSet<LinkedEvent> LinkedEvent { get; set; }

    public virtual DbSet<LocUnavl> LocUnavl { get; set; }

    public virtual DbSet<LocalizationJig> LocalizationJig { get; set; }

    public virtual DbSet<Loinc> Loinc { get; set; }

    public virtual DbSet<LoincCopyrightSource> LoincCopyrightSource { get; set; }

    public virtual DbSet<LoincLoincXref> LoincLoincXref { get; set; }

    public virtual DbSet<LookupCdCulture> LookupCdCulture { get; set; }

    public virtual DbSet<LookupMapping> LookupMapping { get; set; }

    public virtual DbSet<LookupServiceCache> LookupServiceCache { get; set; }

    public virtual DbSet<LookupTable> LookupTable { get; set; }

    public virtual DbSet<LookupTypCulture> LookupTypCulture { get; set; }

    public virtual DbSet<LtascheduledTask> LtascheduledTask { get; set; }

    public virtual DbSet<LtascheduledTaskPatient> LtascheduledTaskPatient { get; set; }

    public virtual DbSet<Ltr> Ltr { get; set; }

    public virtual DbSet<LtrRcpt> LtrRcpt { get; set; }

    public virtual DbSet<LtrResp> LtrResp { get; set; }

    public virtual DbSet<LtrTemplate> LtrTemplate { get; set; }

    public virtual DbSet<Machine> Machine { get; set; }

    public virtual DbSet<MaritalStatus> MaritalStatus { get; set; }

    public virtual DbSet<MatchResult> MatchResult { get; set; }

    public virtual DbSet<Material> Material { get; set; }

    public virtual DbSet<Matrix> Matrix { get; set; }

    public virtual DbSet<MaxCumDose> MaxCumDose { get; set; }

    public virtual DbSet<MaxSyringeVol> MaxSyringeVol { get; set; }

    public virtual DbSet<MddfDictBaseFormulation> MddfDictBaseFormulation { get; set; }

    public virtual DbSet<MddfDictQualifier> MddfDictQualifier { get; set; }

    public virtual DbSet<MddfDictRoutePrescribed> MddfDictRoutePrescribed { get; set; }

    public virtual DbSet<MddfLinkRouteProduct> MddfLinkRouteProduct { get; set; }

    public virtual DbSet<MddfProduct> MddfProduct { get; set; }

    public virtual DbSet<MddfRegForms> MddfRegForms { get; set; }

    public virtual DbSet<MddfRegProduct> MddfRegProduct { get; set; }

    public virtual DbSet<MddfRegRoutes> MddfRegRoutes { get; set; }

    public virtual DbSet<MedAmtcncpt> MedAmtcncpt { get; set; }

    public virtual DbSet<MedAmtexttxt> MedAmtexttxt { get; set; }

    public virtual DbSet<MedAmtinrel> MedAmtinrel { get; set; }

    public virtual DbSet<MedAmtxref> MedAmtxref { get; set; }

    public virtual DbSet<MedConcept> MedConcept { get; set; }

    public virtual DbSet<MedDict> MedDict { get; set; }

    public virtual DbSet<MedGppc> MedGppc { get; set; }

    public virtual DbSet<MedName> MedName { get; set; }

    public virtual DbSet<MedNdc> MedNdc { get; set; }

    public virtual DbSet<MedPname> MedPname { get; set; }

    public virtual DbSet<MedRxnorm> MedRxnorm { get; set; }

    public virtual DbSet<MedTcGpi> MedTcGpi { get; set; }

    public virtual DbSet<MedVal> MedVal { get; set; }

    public virtual DbSet<MergeCat> MergeCat { get; set; }

    public virtual DbSet<Message> Message { get; set; }

    public virtual DbSet<Message1> Message1 { get; set; }

    public virtual DbSet<MessageAttachment> MessageAttachment { get; set; }

    public virtual DbSet<MessageAttribute> MessageAttribute { get; set; }

    public virtual DbSet<MessageContact> MessageContact { get; set; }

    public virtual DbSet<MessageDelegate> MessageDelegate { get; set; }

    public virtual DbSet<MessageDelegateMh> MessageDelegateMh { get; set; }

    public virtual DbSet<MessageMh> MessageMh { get; set; }

    public virtual DbSet<MillingMachine> MillingMachine { get; set; }

    public virtual DbSet<Mlc> Mlc { get; set; }

    public virtual DbSet<Mlcbank> Mlcbank { get; set; }

    public virtual DbSet<Mlcleaf> Mlcleaf { get; set; }

    public virtual DbSet<Mlcplan> Mlcplan { get; set; }

    public virtual DbSet<MnfstnCd> MnfstnCd { get; set; }

    public virtual DbSet<MobilePhoneProvider> MobilePhoneProvider { get; set; }

    public virtual DbSet<MobileTelProv> MobileTelProv { get; set; }

    public virtual DbSet<MrPtAccess> MrPtAccess { get; set; }

    public virtual DbSet<MrPtAccessExternal> MrPtAccessExternal { get; set; }

    public virtual DbSet<MrTestResult> MrTestResult { get; set; }

    public virtual DbSet<MrTrAsmt> MrTrAsmt { get; set; }

    public virtual DbSet<MsgLog> MsgLog { get; set; }

    public virtual DbSet<MsgSendLog> MsgSendLog { get; set; }

    public virtual DbSet<MuErrorLog> MuErrorLog { get; set; }

    public virtual DbSet<NameCd> NameCd { get; set; }

    public virtual DbSet<NextKeyTable> NextKeyTable { get; set; }

    public virtual DbSet<NextOfKin> NextOfKin { get; set; }

    public virtual DbSet<NokRelationship> NokRelationship { get; set; }

    public virtual DbSet<NonBusinessDay> NonBusinessDay { get; set; }

    public virtual DbSet<NonScheduledActivity> NonScheduledActivity { get; set; }

    public virtual DbSet<NonScheduledActivityMh> NonScheduledActivityMh { get; set; }

    public virtual DbSet<NoteLevel> NoteLevel { get; set; }

    public virtual DbSet<NoteTyp> NoteTyp { get; set; }

    public virtual DbSet<ObjectPointer> ObjectPointer { get; set; }

    public virtual DbSet<ObsoleteObject> ObsoleteObject { get; set; }

    public virtual DbSet<OncoPtFsCycle> OncoPtFsCycle { get; set; }

    public virtual DbSet<OncoPtFsDet> OncoPtFsDet { get; set; }

    public virtual DbSet<OncoPtFsDrug> OncoPtFsDrug { get; set; }

    public virtual DbSet<OncoPtFsDrugDet> OncoPtFsDrugDet { get; set; }

    public virtual DbSet<OncoPtFsDx> OncoPtFsDx { get; set; }

    public virtual DbSet<OncoRegimenTyp> OncoRegimenTyp { get; set; }

    public virtual DbSet<OnlineLog> OnlineLog { get; set; }

    public virtual DbSet<OperatingLimit> OperatingLimit { get; set; }

    public virtual DbSet<OptionalDemgr> OptionalDemgr { get; set; }

    public virtual DbSet<OptionalEthnicity> OptionalEthnicity { get; set; }

    public virtual DbSet<OptionalRace> OptionalRace { get; set; }

    public virtual DbSet<OptxPrinterTag> OptxPrinterTag { get; set; }

    public virtual DbSet<OrgTyp> OrgTyp { get; set; }

    public virtual DbSet<OtherName> OtherName { get; set; }

    public virtual DbSet<OtherNameTyp> OtherNameTyp { get; set; }

    public virtual DbSet<OverbookCd> OverbookCd { get; set; }

    public virtual DbSet<OverrideModel> OverrideModel { get; set; }

    public virtual DbSet<ParameterType> ParameterType { get; set; }

    public virtual DbSet<Password> Password { get; set; }

    public virtual DbSet<PatEdHstryControl> PatEdHstryControl { get; set; }

    public virtual DbSet<PatEdHstryRelevance> PatEdHstryRelevance { get; set; }

    public virtual DbSet<Patient> Patient { get; set; }

    public virtual DbSet<PatientActuals> PatientActuals { get; set; }

    public virtual DbSet<PatientAddress> PatientAddress { get; set; }

    public virtual DbSet<PatientAuthorization> PatientAuthorization { get; set; }

    public virtual DbSet<PatientBenefitCache> PatientBenefitCache { get; set; }

    public virtual DbSet<PatientDepartment> PatientDepartment { get; set; }

    public virtual DbSet<PatientDirective> PatientDirective { get; set; }

    public virtual DbSet<PatientDoctor> PatientDoctor { get; set; }

    public virtual DbSet<PatientEditingLog> PatientEditingLog { get; set; }

    public virtual DbSet<PatientHospital> PatientHospital { get; set; }

    public virtual DbSet<PatientHospitalMh> PatientHospitalMh { get; set; }

    public virtual DbSet<PatientListQueryConfiguration> PatientListQueryConfiguration { get; set; }

    public virtual DbSet<PatientLocation> PatientLocation { get; set; }

    public virtual DbSet<PatientLocationMh> PatientLocationMh { get; set; }

    public virtual DbSet<PatientName> PatientName { get; set; }

    public virtual DbSet<PatientNote> PatientNote { get; set; }

    public virtual DbSet<PatientParticular> PatientParticular { get; set; }

    public virtual DbSet<PatientPayor> PatientPayor { get; set; }

    public virtual DbSet<PatientPayorMh> PatientPayorMh { get; set; }

    public virtual DbSet<PatientRtstatus> PatientRtstatus { get; set; }

    public virtual DbSet<PatientStaff> PatientStaff { get; set; }

    public virtual DbSet<PatientSupportDevice> PatientSupportDevice { get; set; }

    public virtual DbSet<PatientTransportation> PatientTransportation { get; set; }

    public virtual DbSet<PatientVolume> PatientVolume { get; set; }

    public virtual DbSet<Payor> Payor { get; set; }

    public virtual DbSet<PayorAuthorization> PayorAuthorization { get; set; }

    public virtual DbSet<PerfTracking> PerfTracking { get; set; }

    public virtual DbSet<PerfTrackingTyp> PerfTrackingTyp { get; set; }

    public virtual DbSet<PerformedProcedure> PerformedProcedure { get; set; }

    public virtual DbSet<PharmLib> PharmLib { get; set; }

    public virtual DbSet<Phase> Phase { get; set; }

    public virtual DbSet<PhaseSum> PhaseSum { get; set; }

    public virtual DbSet<PhaseTrRisk> PhaseTrRisk { get; set; }

    public virtual DbSet<PhoneCd> PhoneCd { get; set; }

    public virtual DbSet<Photo> Photo { get; set; }

    public virtual DbSet<PhotonCompensator> PhotonCompensator { get; set; }

    public virtual DbSet<PhysicalMaterial> PhysicalMaterial { get; set; }

    public virtual DbSet<PhysicianIntent> PhysicianIntent { get; set; }

    public virtual DbSet<PlanConcurrency> PlanConcurrency { get; set; }

    public virtual DbSet<PlanModel> PlanModel { get; set; }

    public virtual DbSet<PlanRelationship> PlanRelationship { get; set; }

    public virtual DbSet<PlanSetup> PlanSetup { get; set; }

    public virtual DbSet<PlanSetupStructureDoseLevel> PlanSetupStructureDoseLevel { get; set; }

    public virtual DbSet<PlanSetupStructureModelStructure> PlanSetupStructureModelStructure { get; set; }

    public virtual DbSet<PlanSource> PlanSource { get; set; }

    public virtual DbSet<PlanSum> PlanSum { get; set; }

    public virtual DbSet<PlanSumPlanSetup> PlanSumPlanSetup { get; set; }

    public virtual DbSet<PlanTypes> PlanTypes { get; set; }

    public virtual DbSet<PlanVariation> PlanVariation { get; set; }

    public virtual DbSet<PlanningSystem> PlanningSystem { get; set; }

    public virtual DbSet<PlcyGroupTyp> PlcyGroupTyp { get; set; }

    public virtual DbSet<PlcyTyp> PlcyTyp { get; set; }

    public virtual DbSet<PlnSumTyp> PlnSumTyp { get; set; }

    public virtual DbSet<PlnTyp> PlnTyp { get; set; }

    public virtual DbSet<PmtSystem> PmtSystem { get; set; }

    public virtual DbSet<PnCategoryDesc> PnCategoryDesc { get; set; }

    public virtual DbSet<PnCompUseCd> PnCompUseCd { get; set; }

    public virtual DbSet<PnDspComp> PnDspComp { get; set; }

    public virtual DbSet<PnDspCompTyp> PnDspCompTyp { get; set; }

    public virtual DbSet<PnDspFormat> PnDspFormat { get; set; }

    public virtual DbSet<PnDspFormatTyp> PnDspFormatTyp { get; set; }

    public virtual DbSet<PnHdr> PnHdr { get; set; }

    public virtual DbSet<PnSectionDesc> PnSectionDesc { get; set; }

    public virtual DbSet<PnSystemComp> PnSystemComp { get; set; }

    public virtual DbSet<PnTemplate> PnTemplate { get; set; }

    public virtual DbSet<PnTemplateUser> PnTemplateUser { get; set; }

    public virtual DbSet<PnToolbarFcnTyp> PnToolbarFcnTyp { get; set; }

    public virtual DbSet<PnUserComp> PnUserComp { get; set; }

    public virtual DbSet<PnUserTemplate> PnUserTemplate { get; set; }

    public virtual DbSet<PoTemplate> PoTemplate { get; set; }

    public virtual DbSet<PoTemplateUser> PoTemplateUser { get; set; }

    public virtual DbSet<PointOfContact> PointOfContact { get; set; }

    public virtual DbSet<PortImager> PortImager { get; set; }

    public virtual DbSet<PortalDoseAnalysis> PortalDoseAnalysis { get; set; }

    public virtual DbSet<PracticeDcmnt> PracticeDcmnt { get; set; }

    public virtual DbSet<PrcsTyp> PrcsTyp { get; set; }

    public virtual DbSet<PrefAgtNameLog> PrefAgtNameLog { get; set; }

    public virtual DbSet<Prescription> Prescription { get; set; }

    public virtual DbSet<PrescriptionAnatomy> PrescriptionAnatomy { get; set; }

    public virtual DbSet<PrescriptionAnatomyItem> PrescriptionAnatomyItem { get; set; }

    public virtual DbSet<PrescriptionProperty> PrescriptionProperty { get; set; }

    public virtual DbSet<PrescriptionPropertyItem> PrescriptionPropertyItem { get; set; }

    public virtual DbSet<PrescriptionTemplate> PrescriptionTemplate { get; set; }

    public virtual DbSet<PrescriptionTemplateAnatomy> PrescriptionTemplateAnatomy { get; set; }

    public virtual DbSet<PrescriptionTemplateAnatomyItem> PrescriptionTemplateAnatomyItem { get; set; }

    public virtual DbSet<PrescriptionTemplateProperty> PrescriptionTemplateProperty { get; set; }

    public virtual DbSet<PrescriptionTemplatePropertyItem> PrescriptionTemplatePropertyItem { get; set; }

    public virtual DbSet<PrimaryFluenceMode> PrimaryFluenceMode { get; set; }

    public virtual DbSet<PrintAuditRec> PrintAuditRec { get; set; }

    public virtual DbSet<PrintReport> PrintReport { get; set; }

    public virtual DbSet<PrmryDiagnosis> PrmryDiagnosis { get; set; }

    public virtual DbSet<PrnReasonTyp> PrnReasonTyp { get; set; }

    public virtual DbSet<ProcedureCode> ProcedureCode { get; set; }

    public virtual DbSet<ProcedureCodeMh> ProcedureCodeMh { get; set; }

    public virtual DbSet<ProcedureItem> ProcedureItem { get; set; }

    public virtual DbSet<ProcedureItemResource> ProcedureItemResource { get; set; }

    public virtual DbSet<ProcedureItemSopclass> ProcedureItemSopclass { get; set; }

    public virtual DbSet<Processing> Processing { get; set; }

    public virtual DbSet<Product> Product { get; set; }

    public virtual DbSet<ProductBillCdXref> ProductBillCdXref { get; set; }

    public virtual DbSet<ProductDispLocXref> ProductDispLocXref { get; set; }

    public virtual DbSet<ProductFormularyAgtXref> ProductFormularyAgtXref { get; set; }

    public virtual DbSet<ProductStatus> ProductStatus { get; set; }

    public virtual DbSet<ProductStorageLocXref> ProductStorageLocXref { get; set; }

    public virtual DbSet<ProfReltn> ProfReltn { get; set; }

    public virtual DbSet<ProfTaskPref> ProfTaskPref { get; set; }

    public virtual DbSet<ProfTyp> ProfTyp { get; set; }

    public virtual DbSet<ProfUnavl> ProfUnavl { get; set; }

    public virtual DbSet<ProtonBeamSpot> ProtonBeamSpot { get; set; }

    public virtual DbSet<ProtonCompensator> ProtonCompensator { get; set; }

    public virtual DbSet<ProtonLateralSpreader> ProtonLateralSpreader { get; set; }

    public virtual DbSet<ProvApprStartDate> ProvApprStartDate { get; set; }

    public virtual DbSet<ProvQueueSubscription> ProvQueueSubscription { get; set; }

    public virtual DbSet<ProviderMuExclusion> ProviderMuExclusion { get; set; }

    public virtual DbSet<ProviderMuSum> ProviderMuSum { get; set; }

    public virtual DbSet<ProviderStdOrder> ProviderStdOrder { get; set; }

    public virtual DbSet<PrtyOfSrv> PrtyOfSrv { get; set; }

    public virtual DbSet<PrvState> PrvState { get; set; }

    public virtual DbSet<Pt> Pt { get; set; }

    public virtual DbSet<PtActualAccess> PtActualAccess { get; set; }

    public virtual DbSet<PtActualLink> PtActualLink { get; set; }

    public virtual DbSet<PtAddress> PtAddress { get; set; }

    public virtual DbSet<PtAdt> PtAdt { get; set; }

    public virtual DbSet<PtAe> PtAe { get; set; }

    public virtual DbSet<PtAeCustFormXref> PtAeCustFormXref { get; set; }

    public virtual DbSet<PtAeMh> PtAeMh { get; set; }

    public virtual DbSet<PtAgenda> PtAgenda { get; set; }

    public virtual DbSet<PtAgendaHdr> PtAgendaHdr { get; set; }

    public virtual DbSet<PtAgendaStatus> PtAgendaStatus { get; set; }

    public virtual DbSet<PtAgtScreening> PtAgtScreening { get; set; }

    public virtual DbSet<PtAgtScreeningDetail> PtAgtScreeningDetail { get; set; }

    public virtual DbSet<PtAlert> PtAlert { get; set; }

    public virtual DbSet<PtAllergy> PtAllergy { get; set; }

    public virtual DbSet<PtAllergyExternal> PtAllergyExternal { get; set; }

    public virtual DbSet<PtAllergyMh> PtAllergyMh { get; set; }

    public virtual DbSet<PtAllergyResp> PtAllergyResp { get; set; }

    public virtual DbSet<PtAllergyRespExternal> PtAllergyRespExternal { get; set; }

    public virtual DbSet<PtAllergyRespMh> PtAllergyRespMh { get; set; }

    public virtual DbSet<PtAltAddress> PtAltAddress { get; set; }

    public virtual DbSet<PtAmdt> PtAmdt { get; set; }

    public virtual DbSet<PtAmdtMh> PtAmdtMh { get; set; }

    public virtual DbSet<PtAsmt> PtAsmt { get; set; }

    public virtual DbSet<PtAsmtResult> PtAsmtResult { get; set; }

    public virtual DbSet<PtAuditModificationChkSum> PtAuditModificationChkSum { get; set; }

    public virtual DbSet<PtAuth> PtAuth { get; set; }

    public virtual DbSet<PtCldr> PtCldr { get; set; }

    public virtual DbSet<PtClinicalNotification> PtClinicalNotification { get; set; }

    public virtual DbSet<PtClinicalNotificationCriteria> PtClinicalNotificationCriteria { get; set; }

    public virtual DbSet<PtCmt> PtCmt { get; set; }

    public virtual DbSet<PtCmtTyp> PtCmtTyp { get; set; }

    public virtual DbSet<PtCncrDiagnosis> PtCncrDiagnosis { get; set; }

    public virtual DbSet<PtCncrStatus> PtCncrStatus { get; set; }

    public virtual DbSet<PtCncrStatusMh> PtCncrStatusMh { get; set; }

    public virtual DbSet<PtCncrStg> PtCncrStg { get; set; }

    public virtual DbSet<PtCncrStgCrit> PtCncrStgCrit { get; set; }

    public virtual DbSet<PtCncrStgCritMh> PtCncrStgCritMh { get; set; }

    public virtual DbSet<PtCncrStgMh> PtCncrStgMh { get; set; }

    public virtual DbSet<PtCommLog> PtCommLog { get; set; }

    public virtual DbSet<PtConsent> PtConsent { get; set; }

    public virtual DbSet<PtContact> PtContact { get; set; }

    public virtual DbSet<PtDemgrAudit> PtDemgrAudit { get; set; }

    public virtual DbSet<PtDoseData> PtDoseData { get; set; }

    public virtual DbSet<PtDx> PtDx { get; set; }

    public virtual DbSet<PtDxCncr> PtDxCncr { get; set; }

    public virtual DbSet<PtDxCncrMh> PtDxCncrMh { get; set; }

    public virtual DbSet<PtDxCode> PtDxCode { get; set; }

    public virtual DbSet<PtDxCodeMh> PtDxCodeMh { get; set; }

    public virtual DbSet<PtDxEvent> PtDxEvent { get; set; }

    public virtual DbSet<PtDxEventMh> PtDxEventMh { get; set; }

    public virtual DbSet<PtDxExternal> PtDxExternal { get; set; }

    public virtual DbSet<PtDxInvasiveTyp> PtDxInvasiveTyp { get; set; }

    public virtual DbSet<PtDxInvasiveTypMh> PtDxInvasiveTypMh { get; set; }

    public virtual DbSet<PtDxMh> PtDxMh { get; set; }

    public virtual DbSet<PtDxStatus> PtDxStatus { get; set; }

    public virtual DbSet<PtDxStatusHx> PtDxStatusHx { get; set; }

    public virtual DbSet<PtDxStatusHxMh> PtDxStatusHxMh { get; set; }

    public virtual DbSet<PtDxStatusMh> PtDxStatusMh { get; set; }

    public virtual DbSet<PtEducTopic> PtEducTopic { get; set; }

    public virtual DbSet<PtEducation> PtEducation { get; set; }

    public virtual DbSet<PtEducationMh> PtEducationMh { get; set; }

    public virtual DbSet<PtErrorTracking> PtErrorTracking { get; set; }

    public virtual DbSet<PtExam> PtExam { get; set; }

    public virtual DbSet<PtExamAttr> PtExamAttr { get; set; }

    public virtual DbSet<PtExamAttrMh> PtExamAttrMh { get; set; }

    public virtual DbSet<PtExamComp> PtExamComp { get; set; }

    public virtual DbSet<PtExamCompMh> PtExamCompMh { get; set; }

    public virtual DbSet<PtExamMh> PtExamMh { get; set; }

    public virtual DbSet<PtExamSystem> PtExamSystem { get; set; }

    public virtual DbSet<PtExamSystemMh> PtExamSystemMh { get; set; }

    public virtual DbSet<PtFamHx> PtFamHx { get; set; }

    public virtual DbSet<PtFamHxMh> PtFamHxMh { get; set; }

    public virtual DbSet<PtFamHxProb> PtFamHxProb { get; set; }

    public virtual DbSet<PtFamHxProbMh> PtFamHxProbMh { get; set; }

    public virtual DbSet<PtFbmCase> PtFbmCase { get; set; }

    public virtual DbSet<PtFbmCaseSch> PtFbmCaseSch { get; set; }

    public virtual DbSet<PtFbmResp> PtFbmResp { get; set; }

    public virtual DbSet<PtFsTemplate> PtFsTemplate { get; set; }

    public virtual DbSet<PtGnrcActual> PtGnrcActual { get; set; }

    public virtual DbSet<PtGuar> PtGuar { get; set; }

    public virtual DbSet<PtGyneHx> PtGyneHx { get; set; }

    public virtual DbSet<PtGyneHxMh> PtGyneHxMh { get; set; }

    public virtual DbSet<PtHpi> PtHpi { get; set; }

    public virtual DbSet<PtHxCmt> PtHxCmt { get; set; }

    public virtual DbSet<PtHxResp> PtHxResp { get; set; }

    public virtual DbSet<PtImmunizationDetail> PtImmunizationDetail { get; set; }

    public virtual DbSet<PtIndHx> PtIndHx { get; set; }

    public virtual DbSet<PtInfectionCtrl> PtInfectionCtrl { get; set; }

    public virtual DbSet<PtInfectionCtrlMh> PtInfectionCtrlMh { get; set; }

    public virtual DbSet<PtInfoRequest> PtInfoRequest { get; set; }

    public virtual DbSet<PtInsPrecert> PtInsPrecert { get; set; }

    public virtual DbSet<PtInsPrecertDet> PtInsPrecertDet { get; set; }

    public virtual DbSet<PtInsPrecertDetHx> PtInsPrecertDetHx { get; set; }

    public virtual DbSet<PtInsPrecertHx> PtInsPrecertHx { get; set; }

    public virtual DbSet<PtInstAccess> PtInstAccess { get; set; }

    public virtual DbSet<PtInstKey> PtInstKey { get; set; }

    public virtual DbSet<PtInteraction> PtInteraction { get; set; }

    public virtual DbSet<PtIv> PtIv { get; set; }

    public virtual DbSet<PtIvAbsorption> PtIvAbsorption { get; set; }

    public virtual DbSet<PtIvResp> PtIvResp { get; set; }

    public virtual DbSet<PtIvRespItem> PtIvRespItem { get; set; }

    public virtual DbSet<PtIvTherapy> PtIvTherapy { get; set; }

    public virtual DbSet<PtKeyCd> PtKeyCd { get; set; }

    public virtual DbSet<PtKeyCdCulture> PtKeyCdCulture { get; set; }

    public virtual DbSet<PtKeyScopeTyp> PtKeyScopeTyp { get; set; }

    public virtual DbSet<PtKeyScopeTypCulture> PtKeyScopeTypCulture { get; set; }

    public virtual DbSet<PtLabAsc> PtLabAsc { get; set; }

    public virtual DbSet<PtLes> PtLes { get; set; }

    public virtual DbSet<PtLesAsmt> PtLesAsmt { get; set; }

    public virtual DbSet<PtLesAsmtMh> PtLesAsmtMh { get; set; }

    public virtual DbSet<PtLesMh> PtLesMh { get; set; }

    public virtual DbSet<PtListQuery> PtListQuery { get; set; }

    public virtual DbSet<PtListQueryCriteria> PtListQueryCriteria { get; set; }

    public virtual DbSet<PtListQueryCriteriaValue> PtListQueryCriteriaValue { get; set; }

    public virtual DbSet<PtMedHx> PtMedHx { get; set; }

    public virtual DbSet<PtMedHxMh> PtMedHxMh { get; set; }

    public virtual DbSet<PtMerge> PtMerge { get; set; }

    public virtual DbSet<PtMuScore> PtMuScore { get; set; }

    public virtual DbSet<PtName> PtName { get; set; }

    public virtual DbSet<PtNonCncrDiagnosis> PtNonCncrDiagnosis { get; set; }

    public virtual DbSet<PtOption> PtOption { get; set; }

    public virtual DbSet<PtOptionComp> PtOptionComp { get; set; }

    public virtual DbSet<PtOptionCompDoseVrtn> PtOptionCompDoseVrtn { get; set; }

    public virtual DbSet<PtOptionCompDoseVrtnMh> PtOptionCompDoseVrtnMh { get; set; }

    public virtual DbSet<PtOptionTest> PtOptionTest { get; set; }

    public virtual DbSet<PtOptionTrAsmt> PtOptionTrAsmt { get; set; }

    public virtual DbSet<PtOverride> PtOverride { get; set; }

    public virtual DbSet<PtPharm> PtPharm { get; set; }

    public virtual DbSet<PtPic> PtPic { get; set; }

    public virtual DbSet<PtPnComps> PtPnComps { get; set; }

    public virtual DbSet<PtPrefer> PtPrefer { get; set; }

    public virtual DbSet<PtPresumedImmunity> PtPresumedImmunity { get; set; }

    public virtual DbSet<PtProcedure> PtProcedure { get; set; }

    public virtual DbSet<PtProcedureMh> PtProcedureMh { get; set; }

    public virtual DbSet<PtProf> PtProf { get; set; }

    public virtual DbSet<PtProfExternal> PtProfExternal { get; set; }

    public virtual DbSet<PtProvider> PtProvider { get; set; }

    public virtual DbSet<PtProviderMu> PtProviderMu { get; set; }

    public virtual DbSet<PtQm> PtQm { get; set; }

    public virtual DbSet<PtQmDetail> PtQmDetail { get; set; }

    public virtual DbSet<PtQmEventCode> PtQmEventCode { get; set; }

    public virtual DbSet<PtQmEventCodeMh> PtQmEventCodeMh { get; set; }

    public virtual DbSet<PtReconciliationHx> PtReconciliationHx { get; set; }

    public virtual DbSet<PtRef> PtRef { get; set; }

    public virtual DbSet<PtResp> PtResp { get; set; }

    public virtual DbSet<PtRespHdr> PtRespHdr { get; set; }

    public virtual DbSet<PtRespHdrMh> PtRespHdrMh { get; set; }

    public virtual DbSet<PtRespMh> PtRespMh { get; set; }

    public virtual DbSet<PtSelectConfig> PtSelectConfig { get; set; }

    public virtual DbSet<PtSeq> PtSeq { get; set; }

    public virtual DbSet<PtSocHx> PtSocHx { get; set; }

    public virtual DbSet<PtSocHxDetail> PtSocHxDetail { get; set; }

    public virtual DbSet<PtSocHxDetailMh> PtSocHxDetailMh { get; set; }

    public virtual DbSet<PtSocHxMh> PtSocHxMh { get; set; }

    public virtual DbSet<PtSocialHx> PtSocialHx { get; set; }

    public virtual DbSet<PtSpecificLinks> PtSpecificLinks { get; set; }

    public virtual DbSet<PtSpecificLinksMh> PtSpecificLinksMh { get; set; }

    public virtual DbSet<PtStatus> PtStatus { get; set; }

    public virtual DbSet<PtStatusIcon> PtStatusIcon { get; set; }

    public virtual DbSet<PtStatusTyp> PtStatusTyp { get; set; }

    public virtual DbSet<PtTp> PtTp { get; set; }

    public virtual DbSet<PtTpActionActual> PtTpActionActual { get; set; }

    public virtual DbSet<PtTpActionAgt> PtTpActionAgt { get; set; }

    public virtual DbSet<PtTpActionAsmt> PtTpActionAsmt { get; set; }

    public virtual DbSet<PtTpActionIv> PtTpActionIv { get; set; }

    public virtual DbSet<PtTpActionQstr> PtTpActionQstr { get; set; }

    public virtual DbSet<PtTpActionTest> PtTpActionTest { get; set; }

    public virtual DbSet<PtTpActionTr> PtTpActionTr { get; set; }

    public virtual DbSet<PtTpAgt> PtTpAgt { get; set; }

    public virtual DbSet<PtTpAgtCourse> PtTpAgtCourse { get; set; }

    public virtual DbSet<PtTpAsmt> PtTpAsmt { get; set; }

    public virtual DbSet<PtTpCycleAction> PtTpCycleAction { get; set; }

    public virtual DbSet<PtTpDecParm> PtTpDecParm { get; set; }

    public virtual DbSet<PtTpEval> PtTpEval { get; set; }

    public virtual DbSet<PtTpFocus> PtTpFocus { get; set; }

    public virtual DbSet<PtTpFocusStatus> PtTpFocusStatus { get; set; }

    public virtual DbSet<PtTpIntv> PtTpIntv { get; set; }

    public virtual DbSet<PtTpIntvCat> PtTpIntvCat { get; set; }

    public virtual DbSet<PtTpIntvFocus> PtTpIntvFocus { get; set; }

    public virtual DbSet<PtTpIntvStatus> PtTpIntvStatus { get; set; }

    public virtual DbSet<PtTpIvTherapy> PtTpIvTherapy { get; set; }

    public virtual DbSet<PtTpOrder> PtTpOrder { get; set; }

    public virtual DbSet<PtTpOrderRenew> PtTpOrderRenew { get; set; }

    public virtual DbSet<PtTpOutcome> PtTpOutcome { get; set; }

    public virtual DbSet<PtTpPhase> PtTpPhase { get; set; }

    public virtual DbSet<PtTpQstr> PtTpQstr { get; set; }

    public virtual DbSet<PtTpRem> PtTpRem { get; set; }

    public virtual DbSet<PtTpSchGroup> PtTpSchGroup { get; set; }

    public virtual DbSet<PtTpTest> PtTpTest { get; set; }

    public virtual DbSet<PtTpTperiod> PtTpTperiod { get; set; }

    public virtual DbSet<PtTpTr> PtTpTr { get; set; }

    public virtual DbSet<PtTpVrtnSource> PtTpVrtnSource { get; set; }

    public virtual DbSet<PtTumClsValues> PtTumClsValues { get; set; }

    public virtual DbSet<PtTx> PtTx { get; set; }

    public virtual DbSet<PtTxCt> PtTxCt { get; set; }

    public virtual DbSet<PtTxCtMh> PtTxCtMh { get; set; }

    public virtual DbSet<PtTxDec> PtTxDec { get; set; }

    public virtual DbSet<PtTxDecMh> PtTxDecMh { get; set; }

    public virtual DbSet<PtTxMh> PtTxMh { get; set; }

    public virtual DbSet<PtUnavl> PtUnavl { get; set; }

    public virtual DbSet<PtUserAccessLog> PtUserAccessLog { get; set; }

    public virtual DbSet<PtUserDefined> PtUserDefined { get; set; }

    public virtual DbSet<PtUserDefinedLabel> PtUserDefinedLabel { get; set; }

    public virtual DbSet<PtVaccineRefusal> PtVaccineRefusal { get; set; }

    public virtual DbSet<PtVisit> PtVisit { get; set; }

    public virtual DbSet<PtVisitDetail> PtVisitDetail { get; set; }

    public virtual DbSet<PtVisitDetailMh> PtVisitDetailMh { get; set; }

    public virtual DbSet<PtVisitDictation> PtVisitDictation { get; set; }

    public virtual DbSet<PtVisitHx> PtVisitHx { get; set; }

    public virtual DbSet<PtVisitProvider> PtVisitProvider { get; set; }

    public virtual DbSet<PtVisitReason> PtVisitReason { get; set; }

    public virtual DbSet<PtVisitResch> PtVisitResch { get; set; }

    public virtual DbSet<PtVisitToday> PtVisitToday { get; set; }

    public virtual DbSet<PtVisitTracking> PtVisitTracking { get; set; }

    public virtual DbSet<PtWinAccess> PtWinAccess { get; set; }

    public virtual DbSet<PttrnRelatedNonSchActivity> PttrnRelatedNonSchActivity { get; set; }

    public virtual DbSet<PublicityCd> PublicityCd { get; set; }

    public virtual DbSet<PurgePatientTemp> PurgePatientTemp { get; set; }

    public virtual DbSet<Qm> Qm { get; set; }

    public virtual DbSet<QmCriteria> QmCriteria { get; set; }

    public virtual DbSet<QmCriteriaCulture> QmCriteriaCulture { get; set; }

    public virtual DbSet<QmCriteriaInstance> QmCriteriaInstance { get; set; }

    public virtual DbSet<QmCriteriaPart> QmCriteriaPart { get; set; }

    public virtual DbSet<QmCriteriaPartCulture> QmCriteriaPartCulture { get; set; }

    public virtual DbSet<QmCulture> QmCulture { get; set; }

    public virtual DbSet<QmEventCode> QmEventCode { get; set; }

    public virtual DbSet<QmEventCodeCulture> QmEventCodeCulture { get; set; }

    public virtual DbSet<QmEventCodeFavorite> QmEventCodeFavorite { get; set; }

    public virtual DbSet<QmInstance> QmInstance { get; set; }

    public virtual DbSet<QmInstanceSubscription> QmInstanceSubscription { get; set; }

    public virtual DbSet<QmRsnNotDoneValueSet> QmRsnNotDoneValueSet { get; set; }

    public virtual DbSet<QmValueSet> QmValueSet { get; set; }

    public virtual DbSet<QmValueSetCulture> QmValueSetCulture { get; set; }

    public virtual DbSet<QmXrefAllergyRxnorm> QmXrefAllergyRxnorm { get; set; }

    public virtual DbSet<QrdaCat> QrdaCat { get; set; }

    public virtual DbSet<Qstr> Qstr { get; set; }

    public virtual DbSet<QstrBill> QstrBill { get; set; }

    public virtual DbSet<QstrClsGroup> QstrClsGroup { get; set; }

    public virtual DbSet<QstrTyp> QstrTyp { get; set; }

    public virtual DbSet<QstrUser> QstrUser { get; set; }

    public virtual DbSet<Question> Question { get; set; }

    public virtual DbSet<QuestionTyp> QuestionTyp { get; set; }

    public virtual DbSet<QuickNote> QuickNote { get; set; }

    public virtual DbSet<QuickNoteMh> QuickNoteMh { get; set; }

    public virtual DbSet<QuickNoteTyp> QuickNoteTyp { get; set; }

    public virtual DbSet<RaceTyp> RaceTyp { get; set; }

    public virtual DbSet<Radiation> Radiation { get; set; }

    public virtual DbSet<RadiationDeliverySetupDevice> RadiationDeliverySetupDevice { get; set; }

    public virtual DbSet<RadiationDevice> RadiationDevice { get; set; }

    public virtual DbSet<RadiationHstry> RadiationHstry { get; set; }

    public virtual DbSet<RadiationHstryPrintInfo> RadiationHstryPrintInfo { get; set; }

    public virtual DbSet<RadiationRefPoint> RadiationRefPoint { get; set; }

    public virtual DbSet<RadioactiveSource> RadioactiveSource { get; set; }

    public virtual DbSet<RadioactiveSourceModel> RadioactiveSourceModel { get; set; }

    public virtual DbSet<RangeModulator> RangeModulator { get; set; }

    public virtual DbSet<RangeShifter> RangeShifter { get; set; }

    public virtual DbSet<RbObj> RbObj { get; set; }

    public virtual DbSet<RbObjAttr> RbObjAttr { get; set; }

    public virtual DbSet<RbObjAttrCls> RbObjAttrCls { get; set; }

    public virtual DbSet<ReactionTyp> ReactionTyp { get; set; }

    public virtual DbSet<RecCount> RecCount { get; set; }

    public virtual DbSet<Recipient> Recipient { get; set; }

    public virtual DbSet<RecurrenceElement> RecurrenceElement { get; set; }

    public virtual DbSet<RecurrenceRule> RecurrenceRule { get; set; }

    public virtual DbSet<RefCls> RefCls { get; set; }

    public virtual DbSet<RefDef> RefDef { get; set; }

    public virtual DbSet<RefPoint> RefPoint { get; set; }

    public virtual DbSet<RefPointDeliveredDose> RefPointDeliveredDose { get; set; }

    public virtual DbSet<RefPointHstry> RefPointHstry { get; set; }

    public virtual DbSet<RefPointLocation> RefPointLocation { get; set; }

    public virtual DbSet<RefPointLog> RefPointLog { get; set; }

    public virtual DbSet<RefPointModel> RefPointModel { get; set; }

    public virtual DbSet<RefWaveformField> RefWaveformField { get; set; }

    public virtual DbSet<RefWaveformRelation> RefWaveformRelation { get; set; }

    public virtual DbSet<RefXref> RefXref { get; set; }

    public virtual DbSet<RefusalReason> RefusalReason { get; set; }

    public virtual DbSet<RegTaskStatus> RegTaskStatus { get; set; }

    public virtual DbSet<RegTaskTyp> RegTaskTyp { get; set; }

    public virtual DbSet<RegTrack> RegTrack { get; set; }

    public virtual DbSet<RegTrackCorsp> RegTrackCorsp { get; set; }

    public virtual DbSet<RegTrackTask> RegTrackTask { get; set; }

    public virtual DbSet<Religions> Religions { get; set; }

    public virtual DbSet<Rem> Rem { get; set; }

    public virtual DbSet<RemAttach> RemAttach { get; set; }

    public virtual DbSet<RemRcpnt> RemRcpnt { get; set; }

    public virtual DbSet<Reminder> Reminder { get; set; }

    public virtual DbSet<ReminderAck> ReminderAck { get; set; }

    public virtual DbSet<ReminderPtListQueryXref> ReminderPtListQueryXref { get; set; }

    public virtual DbSet<Report> Report { get; set; }

    public virtual DbSet<ReportLinkage> ReportLinkage { get; set; }

    public virtual DbSet<ReportParameter> ReportParameter { get; set; }

    public virtual DbSet<ResolutionTyp> ResolutionTyp { get; set; }

    public virtual DbSet<Resource> Resource { get; set; }

    public virtual DbSet<ResourceActivity> ResourceActivity { get; set; }

    public virtual DbSet<ResourceAddress> ResourceAddress { get; set; }

    public virtual DbSet<ResourceDepartment> ResourceDepartment { get; set; }

    public virtual DbSet<ResourceDirect> ResourceDirect { get; set; }

    public virtual DbSet<ResourceEmergencyGroup> ResourceEmergencyGroup { get; set; }

    public virtual DbSet<ResourceGroup> ResourceGroup { get; set; }

    public virtual DbSet<ResourceIdentifier> ResourceIdentifier { get; set; }

    public virtual DbSet<ResourceIdentifierCode> ResourceIdentifierCode { get; set; }

    public virtual DbSet<ResourceIdentifierType> ResourceIdentifierType { get; set; }

    public virtual DbSet<ResourceType> ResourceType { get; set; }

    public virtual DbSet<ResourceVenue> ResourceVenue { get; set; }

    public virtual DbSet<ResultMeasTyp> ResultMeasTyp { get; set; }

    public virtual DbSet<ResultMeasUnit> ResultMeasUnit { get; set; }

    public virtual DbSet<ResultUseTyp> ResultUseTyp { get; set; }

    public virtual DbSet<RgmSiteSeq> RgmSiteSeq { get; set; }

    public virtual DbSet<RgmSiteSeqMh> RgmSiteSeqMh { get; set; }

    public virtual DbSet<RgnGrp> RgnGrp { get; set; }

    public virtual DbSet<RgnPcZip> RgnPcZip { get; set; }

    public virtual DbSet<RoomBedUse> RoomBedUse { get; set; }

    public virtual DbSet<RoomTyp> RoomTyp { get; set; }

    public virtual DbSet<RoundFactor> RoundFactor { get; set; }

    public virtual DbSet<RtappExtension> RtappExtension { get; set; }

    public virtual DbSet<RtappExtensionLog> RtappExtensionLog { get; set; }

    public virtual DbSet<Rtplan> Rtplan { get; set; }

    public virtual DbSet<RuleBody> RuleBody { get; set; }

    public virtual DbSet<RuleCls> RuleCls { get; set; }

    public virtual DbSet<RuleComp> RuleComp { get; set; }

    public virtual DbSet<Rx> Rx { get; set; }

    public virtual DbSet<RxHydra> RxHydra { get; set; }

    public virtual DbSet<RxHydraDisp> RxHydraDisp { get; set; }

    public virtual DbSet<RxHydraDispMh> RxHydraDispMh { get; set; }

    public virtual DbSet<RxMh> RxMh { get; set; }

    public virtual DbSet<RxTyp> RxTyp { get; set; }

    public virtual DbSet<Rxnatomarchive> Rxnatomarchive { get; set; }

    public virtual DbSet<Rxnconso> Rxnconso { get; set; }

    public virtual DbSet<Rxnconsoocd> Rxnconsoocd { get; set; }

    public virtual DbSet<Rxncui> Rxncui { get; set; }

    public virtual DbSet<Rxncuichanges> Rxncuichanges { get; set; }

    public virtual DbSet<Rxndoc> Rxndoc { get; set; }

    public virtual DbSet<Rxnrel> Rxnrel { get; set; }

    public virtual DbSet<Rxnsab> Rxnsab { get; set; }

    public virtual DbSet<Rxnsat> Rxnsat { get; set; }

    public virtual DbSet<Rxnsatocd> Rxnsatocd { get; set; }

    public virtual DbSet<Rxnsty> Rxnsty { get; set; }

    public virtual DbSet<Rxnstyocd> Rxnstyocd { get; set; }

    public virtual DbSet<ScanPaperQuality> ScanPaperQuality { get; set; }

    public virtual DbSet<ScanPaperSize> ScanPaperSize { get; set; }

    public virtual DbSet<ScheduleHoliday> ScheduleHoliday { get; set; }

    public virtual DbSet<ScheduledActivity> ScheduledActivity { get; set; }

    public virtual DbSet<ScheduledActivityMh> ScheduledActivityMh { get; set; }

    public virtual DbSet<ScheduledExport> ScheduledExport { get; set; }

    public virtual DbSet<ScheduledExportLog> ScheduledExportLog { get; set; }

    public virtual DbSet<ScheduledExportPatient> ScheduledExportPatient { get; set; }

    public virtual DbSet<ScheduledExportProgress> ScheduledExportProgress { get; set; }

    public virtual DbSet<ScheduledObjectPointer> ScheduledObjectPointer { get; set; }

    public virtual DbSet<ScheduledPerformedProcedure> ScheduledPerformedProcedure { get; set; }

    public virtual DbSet<ScheduledProcedure> ScheduledProcedure { get; set; }

    public virtual DbSet<ScheduledProcedureItem> ScheduledProcedureItem { get; set; }

    public virtual DbSet<SchemeTyp> SchemeTyp { get; set; }

    public virtual DbSet<SecndryDiagnosis> SecndryDiagnosis { get; set; }

    public virtual DbSet<SeqNo> SeqNo { get; set; }

    public virtual DbSet<SeqTyp> SeqTyp { get; set; }

    public virtual DbSet<Series> Series { get; set; }

    public virtual DbSet<ServiceControl> ServiceControl { get; set; }

    public virtual DbSet<Session> Session { get; set; }

    public virtual DbSet<SessionProcedure> SessionProcedure { get; set; }

    public virtual DbSet<SessionProcedurePart> SessionProcedurePart { get; set; }

    public virtual DbSet<SessionProcedureTemplate> SessionProcedureTemplate { get; set; }

    public virtual DbSet<SessionProcedureTemplatePart> SessionProcedureTemplatePart { get; set; }

    public virtual DbSet<SessionRtplan> SessionRtplan { get; set; }

    public virtual DbSet<SexCd> SexCd { get; set; }

    public virtual DbSet<SexualOrientation> SexualOrientation { get; set; }

    public virtual DbSet<SimulationImager> SimulationImager { get; set; }

    public virtual DbSet<Simulator> Simulator { get; set; }

    public virtual DbSet<Slice> Slice { get; set; }

    public virtual DbSet<SliceCt> SliceCt { get; set; }

    public virtual DbSet<SliceMr> SliceMr { get; set; }

    public virtual DbSet<SlicePortalDoseAnalysis> SlicePortalDoseAnalysis { get; set; }

    public virtual DbSet<SliceRt> SliceRt { get; set; }

    public virtual DbSet<Slot> Slot { get; set; }

    public virtual DbSet<SlotAddOn> SlotAddOn { get; set; }

    public virtual DbSet<SmokingUseCd> SmokingUseCd { get; set; }

    public virtual DbSet<Snout> Snout { get; set; }

    public virtual DbSet<Sopclass> Sopclass { get; set; }

    public virtual DbSet<SourcePosition> SourcePosition { get; set; }

    public virtual DbSet<SourceTyp> SourceTyp { get; set; }

    public virtual DbSet<SpatialRegistration> SpatialRegistration { get; set; }

    public virtual DbSet<SpatialRegistrationImage> SpatialRegistrationImage { get; set; }

    public virtual DbSet<SpatialRegistrationIod> SpatialRegistrationIod { get; set; }

    public virtual DbSet<SpcmnAction> SpcmnAction { get; set; }

    public virtual DbSet<SpcmnCond> SpcmnCond { get; set; }

    public virtual DbSet<SpcmnRejectReason> SpcmnRejectReason { get; set; }

    public virtual DbSet<SpcmnSource> SpcmnSource { get; set; }

    public virtual DbSet<SpcmnTyp> SpcmnTyp { get; set; }

    public virtual DbSet<Spsr> Spsr { get; set; }

    public virtual DbSet<SsCodeTable> SsCodeTable { get; set; }

    public virtual DbSet<SsPharmLoad> SsPharmLoad { get; set; }

    public virtual DbSet<Staff> Staff { get; set; }

    public virtual DbSet<StaffMh> StaffMh { get; set; }

    public virtual DbSet<Stage> Stage { get; set; }

    public virtual DbSet<StageBasis> StageBasis { get; set; }

    public virtual DbSet<StageDefCulture> StageDefCulture { get; set; }

    public virtual DbSet<StageTrans> StageTrans { get; set; }

    public virtual DbSet<StandardWedge> StandardWedge { get; set; }

    public virtual DbSet<StatusCat> StatusCat { get; set; }

    public virtual DbSet<StatusCatValue> StatusCatValue { get; set; }

    public virtual DbSet<StatusIcon> StatusIcon { get; set; }

    public virtual DbSet<StatusTyp> StatusTyp { get; set; }

    public virtual DbSet<StatusTypCulture> StatusTypCulture { get; set; }

    public virtual DbSet<StgAllTreatmentChanges> StgAllTreatmentChanges { get; set; }

    public virtual DbSet<StgAllTreatmentChanges1> StgAllTreatmentChanges1 { get; set; }

    public virtual DbSet<StgBillEventTyp> StgBillEventTyp { get; set; }

    public virtual DbSet<StgBillingCode> StgBillingCode { get; set; }

    public virtual DbSet<StgBrachyPatientSer> StgBrachyPatientSer { get; set; }

    public virtual DbSet<StgCalcTyp> StgCalcTyp { get; set; }

    public virtual DbSet<StgCancelReasonTyp> StgCancelReasonTyp { get; set; }

    public virtual DbSet<StgCancerType> StgCancerType { get; set; }

    public virtual DbSet<StgChartQa> StgChartQa { get; set; }

    public virtual DbSet<StgDepartment> StgDepartment { get; set; }

    public virtual DbSet<StgDepartment1> StgDepartment1 { get; set; }

    public virtual DbSet<StgDimActInstTemplateLink> StgDimActInstTemplateLink { get; set; }

    public virtual DbSet<StgDimActTransResourceSer> StgDimActTransResourceSer { get; set; }

    public virtual DbSet<StgDimActivity> StgDimActivity { get; set; }

    public virtual DbSet<StgDimActivity1> StgDimActivity1 { get; set; }

    public virtual DbSet<StgDimActivityAttribute> StgDimActivityAttribute { get; set; }

    public virtual DbSet<StgDimActivityTransaction> StgDimActivityTransaction { get; set; }

    public virtual DbSet<StgDimActivityTransaction1> StgDimActivityTransaction1 { get; set; }

    public virtual DbSet<StgDimActivityTransactionErrorData> StgDimActivityTransactionErrorData { get; set; }

    public virtual DbSet<StgDimActivityTransactionErrorDataMo> StgDimActivityTransactionErrorDataMo { get; set; }

    public virtual DbSet<StgDimActivityTransactionMo> StgDimActivityTransactionMo { get; set; }

    public virtual DbSet<StgDimAddOn> StgDimAddOn { get; set; }

    public virtual DbSet<StgDimAddOn1> StgDimAddOn1 { get; set; }

    public virtual DbSet<StgDimBrachyApplicator> StgDimBrachyApplicator { get; set; }

    public virtual DbSet<StgDimBrachyField> StgDimBrachyField { get; set; }

    public virtual DbSet<StgDimCellType> StgDimCellType { get; set; }

    public virtual DbSet<StgDimCellType1> StgDimCellType1 { get; set; }

    public virtual DbSet<StgDimChannel> StgDimChannel { get; set; }

    public virtual DbSet<StgDimClinic> StgDimClinic { get; set; }

    public virtual DbSet<StgDimCourse> StgDimCourse { get; set; }

    public virtual DbSet<StgDimCourse1> StgDimCourse1 { get; set; }

    public virtual DbSet<StgDimDateRangeController> StgDimDateRangeController { get; set; }

    public virtual DbSet<StgDimDateRangeController1> StgDimDateRangeController1 { get; set; }

    public virtual DbSet<StgDimDiagnosisCode> StgDimDiagnosisCode { get; set; }

    public virtual DbSet<StgDimDiagnosisCode1> StgDimDiagnosisCode1 { get; set; }

    public virtual DbSet<StgDimDrug> StgDimDrug { get; set; }

    public virtual DbSet<StgDimDxSite> StgDimDxSite { get; set; }

    public virtual DbSet<StgDimDxSite1> StgDimDxSite1 { get; set; }

    public virtual DbSet<StgDimField> StgDimField { get; set; }

    public virtual DbSet<StgDimField1> StgDimField1 { get; set; }

    public virtual DbSet<StgDimGroupResources> StgDimGroupResources { get; set; }

    public virtual DbSet<StgDimHospitalDepartmentMo> StgDimHospitalDepartmentMo { get; set; }

    public virtual DbSet<StgDimIcdosite> StgDimIcdosite { get; set; }

    public virtual DbSet<StgDimIcdosite1> StgDimIcdosite1 { get; set; }

    public virtual DbSet<StgDimInstituteLocation> StgDimInstituteLocation { get; set; }

    public virtual DbSet<StgDimLocation> StgDimLocation { get; set; }

    public virtual DbSet<StgDimLocation1> StgDimLocation1 { get; set; }

    public virtual DbSet<StgDimLocationMo> StgDimLocationMo { get; set; }

    public virtual DbSet<StgDimLookup> StgDimLookup { get; set; }

    public virtual DbSet<StgDimLookup1> StgDimLookup1 { get; set; }

    public virtual DbSet<StgDimMedOncPlanSummary> StgDimMedOncPlanSummary { get; set; }

    public virtual DbSet<StgDimMedoncPlan> StgDimMedoncPlan { get; set; }

    public virtual DbSet<StgDimMedoncPlanInterval> StgDimMedoncPlanInterval { get; set; }

    public virtual DbSet<StgDimMedoncPlanPhase> StgDimMedoncPlanPhase { get; set; }

    public virtual DbSet<StgDimNationality> StgDimNationality { get; set; }

    public virtual DbSet<StgDimNationality1> StgDimNationality1 { get; set; }

    public virtual DbSet<StgDimOperatingLimit> StgDimOperatingLimit { get; set; }

    public virtual DbSet<StgDimOperatingLimit1> StgDimOperatingLimit1 { get; set; }

    public virtual DbSet<StgDimPatient> StgDimPatient { get; set; }

    public virtual DbSet<StgDimPatient1> StgDimPatient1 { get; set; }

    public virtual DbSet<StgDimPatientDepartment> StgDimPatientDepartment { get; set; }

    public virtual DbSet<StgDimPatientDepartmentErrorData> StgDimPatientDepartmentErrorData { get; set; }

    public virtual DbSet<StgDimPatientDepartmentbyCuid> StgDimPatientDepartmentbyCuid { get; set; }

    public virtual DbSet<StgDimPatientDepartmentbyCuid1> StgDimPatientDepartmentbyCuid1 { get; set; }

    public virtual DbSet<StgDimPatientDepartmentbyCuiderrorData> StgDimPatientDepartmentbyCuiderrorData { get; set; }

    public virtual DbSet<StgDimPatientDiseaseResponse> StgDimPatientDiseaseResponse { get; set; }

    public virtual DbSet<StgDimPatientDiseaseResponseErrorData> StgDimPatientDiseaseResponseErrorData { get; set; }

    public virtual DbSet<StgDimPatientDoctor> StgDimPatientDoctor { get; set; }

    public virtual DbSet<StgDimPatientDoctor1> StgDimPatientDoctor1 { get; set; }

    public virtual DbSet<StgDimPatientDoctorErrorData> StgDimPatientDoctorErrorData { get; set; }

    public virtual DbSet<StgDimPatientDoctorMo> StgDimPatientDoctorMo { get; set; }

    public virtual DbSet<StgDimPatientEnm> StgDimPatientEnm { get; set; }

    public virtual DbSet<StgDimPatientErrorData> StgDimPatientErrorData { get; set; }

    public virtual DbSet<StgDimPatientErrorDataMo> StgDimPatientErrorDataMo { get; set; }

    public virtual DbSet<StgDimPatientInstituteKey> StgDimPatientInstituteKey { get; set; }

    public virtual DbSet<StgDimPatientJournal> StgDimPatientJournal { get; set; }

    public virtual DbSet<StgDimPatientJournalErrorData> StgDimPatientJournalErrorData { get; set; }

    public virtual DbSet<StgDimPatientPerformanceStatus> StgDimPatientPerformanceStatus { get; set; }

    public virtual DbSet<StgDimPatientPerformanceStatusErrorData> StgDimPatientPerformanceStatusErrorData { get; set; }

    public virtual DbSet<StgDimPatientPhoto> StgDimPatientPhoto { get; set; }

    public virtual DbSet<StgDimPatientPhoto1> StgDimPatientPhoto1 { get; set; }

    public virtual DbSet<StgDimPatientPhotoErrorData> StgDimPatientPhotoErrorData { get; set; }

    public virtual DbSet<StgDimPatientUserDefinedLabels> StgDimPatientUserDefinedLabels { get; set; }

    public virtual DbSet<StgDimPatientUserDefinedLabels1> StgDimPatientUserDefinedLabels1 { get; set; }

    public virtual DbSet<StgDimPatientUserDefinedLabelsErrorData> StgDimPatientUserDefinedLabelsErrorData { get; set; }

    public virtual DbSet<StgDimPatientVisitTracking> StgDimPatientVisitTracking { get; set; }

    public virtual DbSet<StgDimPatientVisitTrackingErrorData> StgDimPatientVisitTrackingErrorData { get; set; }

    public virtual DbSet<StgDimPayor> StgDimPayor { get; set; }

    public virtual DbSet<StgDimPayor1> StgDimPayor1 { get; set; }

    public virtual DbSet<StgDimPayorMo> StgDimPayorMo { get; set; }

    public virtual DbSet<StgDimPlan> StgDimPlan { get; set; }

    public virtual DbSet<StgDimPlan1> StgDimPlan1 { get; set; }

    public virtual DbSet<StgDimPrescription> StgDimPrescription { get; set; }

    public virtual DbSet<StgDimPrescription1> StgDimPrescription1 { get; set; }

    public virtual DbSet<StgDimPrescriptionAnatomy> StgDimPrescriptionAnatomy { get; set; }

    public virtual DbSet<StgDimPrescriptionAnatomy1> StgDimPrescriptionAnatomy1 { get; set; }

    public virtual DbSet<StgDimPrescriptionProperty> StgDimPrescriptionProperty { get; set; }

    public virtual DbSet<StgDimPrescriptionProperty1> StgDimPrescriptionProperty1 { get; set; }

    public virtual DbSet<StgDimProcedureCode> StgDimProcedureCode { get; set; }

    public virtual DbSet<StgDimProcedureCode1> StgDimProcedureCode1 { get; set; }

    public virtual DbSet<StgDimProcedureCodeMo> StgDimProcedureCodeMo { get; set; }

    public virtual DbSet<StgDimQuestionnaires> StgDimQuestionnaires { get; set; }

    public virtual DbSet<StgDimRadioactiveModelSource> StgDimRadioactiveModelSource { get; set; }

    public virtual DbSet<StgDimResourceDepartmentHospital> StgDimResourceDepartmentHospital { get; set; }

    public virtual DbSet<StgDimResourceDepartmentHospital1> StgDimResourceDepartmentHospital1 { get; set; }

    public virtual DbSet<StgDimResourceGroup> StgDimResourceGroup { get; set; }

    public virtual DbSet<StgDimRx> StgDimRx { get; set; }

    public virtual DbSet<StgDimRxAdmin> StgDimRxAdmin { get; set; }

    public virtual DbSet<StgDimRxAdminErrorData> StgDimRxAdminErrorData { get; set; }

    public virtual DbSet<StgDimRxAgt> StgDimRxAgt { get; set; }

    public virtual DbSet<StgDimRxAgtErrorData> StgDimRxAgtErrorData { get; set; }

    public virtual DbSet<StgDimRxErrorData> StgDimRxErrorData { get; set; }

    public virtual DbSet<StgDimRxHydra> StgDimRxHydra { get; set; }

    public virtual DbSet<StgDimRxHydraErrorData> StgDimRxHydraErrorData { get; set; }

    public virtual DbSet<StgDimStakeHolderKeys> StgDimStakeHolderKeys { get; set; }

    public virtual DbSet<StgDimStructure> StgDimStructure { get; set; }

    public virtual DbSet<StgDimTemplateCycle> StgDimTemplateCycle { get; set; }

    public virtual DbSet<StgDimToxicityGradingCriteria> StgDimToxicityGradingCriteria { get; set; }

    public virtual DbSet<StgDimToxicityGradingCriteria1> StgDimToxicityGradingCriteria1 { get; set; }

    public virtual DbSet<StgDimTreatmentDateRangeController> StgDimTreatmentDateRangeController { get; set; }

    public virtual DbSet<StgDimTreatmentDateRangeController1> StgDimTreatmentDateRangeController1 { get; set; }

    public virtual DbSet<StgDimTreatmentTransaction> StgDimTreatmentTransaction { get; set; }

    public virtual DbSet<StgDimTreatmentTransaction1> StgDimTreatmentTransaction1 { get; set; }

    public virtual DbSet<StgDimUser> StgDimUser { get; set; }

    public virtual DbSet<StgDimUser1> StgDimUser1 { get; set; }

    public virtual DbSet<StgDimUserDepartment> StgDimUserDepartment { get; set; }

    public virtual DbSet<StgDimUserProfType> StgDimUserProfType { get; set; }

    public virtual DbSet<StgDimUserUpdateProfType> StgDimUserUpdateProfType { get; set; }

    public virtual DbSet<StgDimVisitEventDetail> StgDimVisitEventDetail { get; set; }

    public virtual DbSet<StgDimVisitEventDetailErrorData> StgDimVisitEventDetailErrorData { get; set; }

    public virtual DbSet<StgDoseContribution> StgDoseContribution { get; set; }

    public virtual DbSet<StgDoseContribution1> StgDoseContribution1 { get; set; }

    public virtual DbSet<StgDoseLevel> StgDoseLevel { get; set; }

    public virtual DbSet<StgDoseVrtnTyp> StgDoseVrtnTyp { get; set; }

    public virtual DbSet<StgEnergy> StgEnergy { get; set; }

    public virtual DbSet<StgEnergy1> StgEnergy1 { get; set; }

    public virtual DbSet<StgFactActivityBilling> StgFactActivityBilling { get; set; }

    public virtual DbSet<StgFactActivityBilling1> StgFactActivityBilling1 { get; set; }

    public virtual DbSet<StgFactActivityBillingErrorData> StgFactActivityBillingErrorData { get; set; }

    public virtual DbSet<StgFactActivityBillingErrorDataMo> StgFactActivityBillingErrorDataMo { get; set; }

    public virtual DbSet<StgFactActivityBillingMo> StgFactActivityBillingMo { get; set; }

    public virtual DbSet<StgFactActivityCaptureAttribute> StgFactActivityCaptureAttribute { get; set; }

    public virtual DbSet<StgFactActivityDiagnosis> StgFactActivityDiagnosis { get; set; }

    public virtual DbSet<StgFactActivityDiagnosis1> StgFactActivityDiagnosis1 { get; set; }

    public virtual DbSet<StgFactBrachySourcePosition> StgFactBrachySourcePosition { get; set; }

    public virtual DbSet<StgFactCourseDiagnosis> StgFactCourseDiagnosis { get; set; }

    public virtual DbSet<StgFactCourseDiagnosis1> StgFactCourseDiagnosis1 { get; set; }

    public virtual DbSet<StgFactInVivoDosimetry> StgFactInVivoDosimetry { get; set; }

    public virtual DbSet<StgFactInVivoDosimetry1> StgFactInVivoDosimetry1 { get; set; }

    public virtual DbSet<StgFactInVivoDosimetryErrorData> StgFactInVivoDosimetryErrorData { get; set; }

    public virtual DbSet<StgFactPatient> StgFactPatient { get; set; }

    public virtual DbSet<StgFactPatient1> StgFactPatient1 { get; set; }

    public virtual DbSet<StgFactPatientAllergy> StgFactPatientAllergy { get; set; }

    public virtual DbSet<StgFactPatientAllergyErrorData> StgFactPatientAllergyErrorData { get; set; }

    public virtual DbSet<StgFactPatientDiagnosis> StgFactPatientDiagnosis { get; set; }

    public virtual DbSet<StgFactPatientDiagnosis1> StgFactPatientDiagnosis1 { get; set; }

    public virtual DbSet<StgFactPatientDiagnosisErrorData> StgFactPatientDiagnosisErrorData { get; set; }

    public virtual DbSet<StgFactPatientEnm> StgFactPatientEnm { get; set; }

    public virtual DbSet<StgFactPatientExam> StgFactPatientExam { get; set; }

    public virtual DbSet<StgFactPatientExamErrorData> StgFactPatientExamErrorData { get; set; }

    public virtual DbSet<StgFactPatientFamilyHistory> StgFactPatientFamilyHistory { get; set; }

    public virtual DbSet<StgFactPatientFamilyHistory1> StgFactPatientFamilyHistory1 { get; set; }

    public virtual DbSet<StgFactPatientFamilyHistoryErrorData> StgFactPatientFamilyHistoryErrorData { get; set; }

    public virtual DbSet<StgFactPatientImage> StgFactPatientImage { get; set; }

    public virtual DbSet<StgFactPatientImage1> StgFactPatientImage1 { get; set; }

    public virtual DbSet<StgFactPatientLabResult> StgFactPatientLabResult { get; set; }

    public virtual DbSet<StgFactPatientLabResult1> StgFactPatientLabResult1 { get; set; }

    public virtual DbSet<StgFactPatientLabResultErrorData> StgFactPatientLabResultErrorData { get; set; }

    public virtual DbSet<StgFactPatientMedicalHistory> StgFactPatientMedicalHistory { get; set; }

    public virtual DbSet<StgFactPatientMedicalHistory1> StgFactPatientMedicalHistory1 { get; set; }

    public virtual DbSet<StgFactPatientMedoncTreatment> StgFactPatientMedoncTreatment { get; set; }

    public virtual DbSet<StgFactPatientMedoncTreatmentErrorData> StgFactPatientMedoncTreatmentErrorData { get; set; }

    public virtual DbSet<StgFactPatientPayor> StgFactPatientPayor { get; set; }

    public virtual DbSet<StgFactPatientPayor1> StgFactPatientPayor1 { get; set; }

    public virtual DbSet<StgFactPatientPayorErrorData> StgFactPatientPayorErrorData { get; set; }

    public virtual DbSet<StgFactPatientProcedureHistory> StgFactPatientProcedureHistory { get; set; }

    public virtual DbSet<StgFactPatientSocialHistory> StgFactPatientSocialHistory { get; set; }

    public virtual DbSet<StgFactPatientSocialHistoryErrorData> StgFactPatientSocialHistoryErrorData { get; set; }

    public virtual DbSet<StgFactPatientToxicity> StgFactPatientToxicity { get; set; }

    public virtual DbSet<StgFactPatientToxicity1> StgFactPatientToxicity1 { get; set; }

    public virtual DbSet<StgFactPatientToxicityErrorData> StgFactPatientToxicityErrorData { get; set; }

    public virtual DbSet<StgFactPhysicianOrder> StgFactPhysicianOrder { get; set; }

    public virtual DbSet<StgFactPhysicianOrderErrorData> StgFactPhysicianOrderErrorData { get; set; }

    public virtual DbSet<StgFactPrescriptionErrorData> StgFactPrescriptionErrorData { get; set; }

    public virtual DbSet<StgFactQuestionnaires> StgFactQuestionnaires { get; set; }

    public virtual DbSet<StgFactQuestionnairesErrorData> StgFactQuestionnairesErrorData { get; set; }

    public virtual DbSet<StgFactRxAdminAgtLevel> StgFactRxAdminAgtLevel { get; set; }

    public virtual DbSet<StgFactRxAdminAgtLevelErrorData> StgFactRxAdminAgtLevelErrorData { get; set; }

    public virtual DbSet<StgFactRxAdminDetail> StgFactRxAdminDetail { get; set; }

    public virtual DbSet<StgFactRxAdminDetailErrorData> StgFactRxAdminDetailErrorData { get; set; }

    public virtual DbSet<StgFactRxDispSyringe> StgFactRxDispSyringe { get; set; }

    public virtual DbSet<StgFactRxDispSyringeErrorData> StgFactRxDispSyringeErrorData { get; set; }

    public virtual DbSet<StgFactRxDispensary> StgFactRxDispensary { get; set; }

    public virtual DbSet<StgFactRxDispensaryErrorData> StgFactRxDispensaryErrorData { get; set; }

    public virtual DbSet<StgFactVisitNote> StgFactVisitNote { get; set; }

    public virtual DbSet<StgFactVisitNoteErrorData> StgFactVisitNoteErrorData { get; set; }

    public virtual DbSet<StgFlatPatientDiagnosisSite> StgFlatPatientDiagnosisSite { get; set; }

    public virtual DbSet<StgImage> StgImage { get; set; }

    public virtual DbSet<StgImage1> StgImage1 { get; set; }

    public virtual DbSet<StgInfusionTyp> StgInfusionTyp { get; set; }

    public virtual DbSet<StgOverride> StgOverride { get; set; }

    public virtual DbSet<StgOverride1> StgOverride1 { get; set; }

    public virtual DbSet<StgPatientAdmissionStatus> StgPatientAdmissionStatus { get; set; }

    public virtual DbSet<StgPrtyOfSrv> StgPrtyOfSrv { get; set; }

    public virtual DbSet<StgRefPoint> StgRefPoint { get; set; }

    public virtual DbSet<StgRefPoint1> StgRefPoint1 { get; set; }

    public virtual DbSet<StgRegistration> StgRegistration { get; set; }

    public virtual DbSet<StgRegistration1> StgRegistration1 { get; set; }

    public virtual DbSet<StgResource> StgResource { get; set; }

    public virtual DbSet<StgResource1> StgResource1 { get; set; }

    public virtual DbSet<StgStkhProfTyp> StgStkhProfTyp { get; set; }

    public virtual DbSet<StgStkhRoleTyp> StgStkhRoleTyp { get; set; }

    public virtual DbSet<StgTestRequestTyp> StgTestRequestTyp { get; set; }

    public virtual DbSet<StgTpClsValue> StgTpClsValue { get; set; }

    public virtual DbSet<StgTreatmentHistory> StgTreatmentHistory { get; set; }

    public virtual DbSet<StgTreatmentHistory1> StgTreatmentHistory1 { get; set; }

    public virtual DbSet<StgTreatmentPatientErrorData> StgTreatmentPatientErrorData { get; set; }

    public virtual DbSet<StgVvLookupCdCulture> StgVvLookupCdCulture { get; set; }

    public virtual DbSet<StgVvLookupCdCulture1> StgVvLookupCdCulture1 { get; set; }

    public virtual DbSet<StgVvLookupTypCulture> StgVvLookupTypCulture { get; set; }

    public virtual DbSet<StgVvLookupTypCulture1> StgVvLookupTypCulture1 { get; set; }

    public virtual DbSet<StgVvStageDefCulture> StgVvStageDefCulture { get; set; }

    public virtual DbSet<StgVvStageDefCulture1> StgVvStageDefCulture1 { get; set; }

    public virtual DbSet<StgVvStatusTypCulture> StgVvStatusTypCulture { get; set; }

    public virtual DbSet<StgVvStatusTypCulture1> StgVvStatusTypCulture1 { get; set; }

    public virtual DbSet<StgVvTpClsValue> StgVvTpClsValue { get; set; }

    public virtual DbSet<StgXrefTpCls> StgXrefTpCls { get; set; }

    public virtual DbSet<StgXrefTpCls1> StgXrefTpCls1 { get; set; }

    public virtual DbSet<Stgstkh> Stgstkh { get; set; }

    public virtual DbSet<Stkh> Stkh { get; set; }

    public virtual DbSet<StkhAddress> StkhAddress { get; set; }

    public virtual DbSet<StkhDesignation> StkhDesignation { get; set; }

    public virtual DbSet<StkhEmail> StkhEmail { get; set; }

    public virtual DbSet<StkhInstKeyCd> StkhInstKeyCd { get; set; }

    public virtual DbSet<StkhKey> StkhKey { get; set; }

    public virtual DbSet<StkhKeyCd> StkhKeyCd { get; set; }

    public virtual DbSet<StkhName> StkhName { get; set; }

    public virtual DbSet<StkhPhone> StkhPhone { get; set; }

    public virtual DbSet<StkhRole> StkhRole { get; set; }

    public virtual DbSet<StkhRoleReltn> StkhRoleReltn { get; set; }

    public virtual DbSet<StkhRoleTyp> StkhRoleTyp { get; set; }

    public virtual DbSet<StkhSeq> StkhSeq { get; set; }

    public virtual DbSet<StkhStkhXref> StkhStkhXref { get; set; }

    public virtual DbSet<StockItemBatch> StockItemBatch { get; set; }

    public virtual DbSet<StockItemBatchLocXref> StockItemBatchLocXref { get; set; }

    public virtual DbSet<StockTrx> StockTrx { get; set; }

    public virtual DbSet<StorageLoc> StorageLoc { get; set; }

    public virtual DbSet<Structure> Structure { get; set; }

    public virtual DbSet<StructureCode> StructureCode { get; set; }

    public virtual DbSet<StructureDetectionData> StructureDetectionData { get; set; }

    public virtual DbSet<StructureIdStructureCode> StructureIdStructureCode { get; set; }

    public virtual DbSet<StructureSet> StructureSet { get; set; }

    public virtual DbSet<StructureStructureCode> StructureStructureCode { get; set; }

    public virtual DbSet<StructureType> StructureType { get; set; }

    public virtual DbSet<Sttfile> Sttfile { get; set; }

    public virtual DbSet<Study> Study { get; set; }

    public virtual DbSet<SymbolCd> SymbolCd { get; set; }

    public virtual DbSet<SystemRoot> SystemRoot { get; set; }

    public virtual DbSet<TIndividuTampon> TIndividuTampon { get; set; }

    public virtual DbSet<TableView> TableView { get; set; }

    public virtual DbSet<Task> Task { get; set; }

    public virtual DbSet<TaskAreaTyp> TaskAreaTyp { get; set; }

    public virtual DbSet<TaskCat> TaskCat { get; set; }

    public virtual DbSet<TaskFcnUser> TaskFcnUser { get; set; }

    public virtual DbSet<Technique> Technique { get; set; }

    public virtual DbSet<TelecomEquipCd> TelecomEquipCd { get; set; }

    public virtual DbSet<TelecomUseCd> TelecomUseCd { get; set; }

    public virtual DbSet<TempAgt> TempAgt { get; set; }

    public virtual DbSet<TempDoseFiguresApp> TempDoseFiguresApp { get; set; }

    public virtual DbSet<TempDoseFiguresAppSum> TempDoseFiguresAppSum { get; set; }

    public virtual DbSet<TempDoseRefPoint> TempDoseRefPoint { get; set; }

    public virtual DbSet<TempTrteventsCorrelated> TempTrteventsCorrelated { get; set; }

    public virtual DbSet<TempTrthistoryRecords> TempTrthistoryRecords { get; set; }

    public virtual DbSet<Template> Template { get; set; }

    public virtual DbSet<TemplateCycle> TemplateCycle { get; set; }

    public virtual DbSet<TemplateCycleMh> TemplateCycleMh { get; set; }

    public virtual DbSet<TemplateDiagnosis> TemplateDiagnosis { get; set; }

    public virtual DbSet<TemplateMh> TemplateMh { get; set; }

    public virtual DbSet<TemplateUseCd> TemplateUseCd { get; set; }

    public virtual DbSet<Test> Test { get; set; }

    public virtual DbSet<TestAsmtDesc> TestAsmtDesc { get; set; }

    public virtual DbSet<TestCmt> TestCmt { get; set; }

    public virtual DbSet<TestCmtMh> TestCmtMh { get; set; }

    public virtual DbSet<TestComp> TestComp { get; set; }

    public virtual DbSet<TestCompCulture> TestCompCulture { get; set; }

    public virtual DbSet<TestDx> TestDx { get; set; }

    public virtual DbSet<TestDxOvride> TestDxOvride { get; set; }

    public virtual DbSet<TestGroup> TestGroup { get; set; }

    public virtual DbSet<TestGroupComp> TestGroupComp { get; set; }

    public virtual DbSet<TestMh> TestMh { get; set; }

    public virtual DbSet<TestOrderCmt> TestOrderCmt { get; set; }

    public virtual DbSet<TestOrderDriver> TestOrderDriver { get; set; }

    public virtual DbSet<TestRequestTyp> TestRequestTyp { get; set; }

    public virtual DbSet<TestResult> TestResult { get; set; }

    public virtual DbSet<TestResultAlert> TestResultAlert { get; set; }

    public virtual DbSet<TestResultCmt> TestResultCmt { get; set; }

    public virtual DbSet<TestResultCmtMh> TestResultCmtMh { get; set; }

    public virtual DbSet<TestResultGroup> TestResultGroup { get; set; }

    public virtual DbSet<TestResultGroupCmt> TestResultGroupCmt { get; set; }

    public virtual DbSet<TestResultGroupMh> TestResultGroupMh { get; set; }

    public virtual DbSet<TestResultGroupOrderCmt> TestResultGroupOrderCmt { get; set; }

    public virtual DbSet<TestResultGroupSpcmn> TestResultGroupSpcmn { get; set; }

    public virtual DbSet<TestResultImage> TestResultImage { get; set; }

    public virtual DbSet<TestResultImageMh> TestResultImageMh { get; set; }

    public virtual DbSet<TestResultMh> TestResultMh { get; set; }

    public virtual DbSet<TestResultVisitNote> TestResultVisitNote { get; set; }

    public virtual DbSet<TestSpcmn> TestSpcmn { get; set; }

    public virtual DbSet<TfhaddOn> TfhaddOn { get; set; }

    public virtual DbSet<TherapyItemAdmn> TherapyItemAdmn { get; set; }

    public virtual DbSet<TherapyItemAdmnAgtLevel> TherapyItemAdmnAgtLevel { get; set; }

    public virtual DbSet<TherapyItemAdmnDetail> TherapyItemAdmnDetail { get; set; }

    public virtual DbSet<TherapyReaction> TherapyReaction { get; set; }

    public virtual DbSet<TickerChannel> TickerChannel { get; set; }

    public virtual DbSet<TickerMessage> TickerMessage { get; set; }

    public virtual DbSet<TickerMessageChannel> TickerMessageChannel { get; set; }

    public virtual DbSet<TimeFrame> TimeFrame { get; set; }

    public virtual DbSet<TimeUnit> TimeUnit { get; set; }

    public virtual DbSet<TimeZone> TimeZone { get; set; }

    public virtual DbSet<TitleTyp> TitleTyp { get; set; }

    public virtual DbSet<TlbrIcons> TlbrIcons { get; set; }

    public virtual DbSet<TlbrItem> TlbrItem { get; set; }

    public virtual DbSet<TlbrUserItem> TlbrUserItem { get; set; }

    public virtual DbSet<Tolerance> Tolerance { get; set; }

    public virtual DbSet<ToleranceLimit> ToleranceLimit { get; set; }

    public virtual DbSet<TpAccessInst> TpAccessInst { get; set; }

    public virtual DbSet<TpAccessUser> TpAccessUser { get; set; }

    public virtual DbSet<TpAccrualGradeCd> TpAccrualGradeCd { get; set; }

    public virtual DbSet<TpAccrualPrd> TpAccrualPrd { get; set; }

    public virtual DbSet<TpAccrualPrdDiversity> TpAccrualPrdDiversity { get; set; }

    public virtual DbSet<TpAgt> TpAgt { get; set; }

    public virtual DbSet<TpAgtCourse> TpAgtCourse { get; set; }

    public virtual DbSet<TpAgtDoseBand> TpAgtDoseBand { get; set; }

    public virtual DbSet<TpAgtDoseDec> TpAgtDoseDec { get; set; }

    public virtual DbSet<TpAsmt> TpAsmt { get; set; }

    public virtual DbSet<TpAsmtSch> TpAsmtSch { get; set; }

    public virtual DbSet<TpAuthor> TpAuthor { get; set; }

    public virtual DbSet<TpAuthorshipCd> TpAuthorshipCd { get; set; }

    public virtual DbSet<TpAwardTyp> TpAwardTyp { get; set; }

    public virtual DbSet<TpCategoryCd> TpCategoryCd { get; set; }

    public virtual DbSet<TpCategoryTyp> TpCategoryTyp { get; set; }

    public virtual DbSet<TpClsGroup> TpClsGroup { get; set; }

    public virtual DbSet<TpClsTyp> TpClsTyp { get; set; }

    public virtual DbSet<TpClsValue> TpClsValue { get; set; }

    public virtual DbSet<TpClsValueCulture> TpClsValueCulture { get; set; }

    public virtual DbSet<TpCmtee> TpCmtee { get; set; }

    public virtual DbSet<TpCmteeIssue> TpCmteeIssue { get; set; }

    public virtual DbSet<TpCoauthor> TpCoauthor { get; set; }

    public virtual DbSet<TpConsent> TpConsent { get; set; }

    public virtual DbSet<TpCrrefCd> TpCrrefCd { get; set; }

    public virtual DbSet<TpCt> TpCt { get; set; }

    public virtual DbSet<TpCtExptdDurAccrual> TpCtExptdDurAccrual { get; set; }

    public virtual DbSet<TpCtTracking> TpCtTracking { get; set; }

    public virtual DbSet<TpDoseMgmt> TpDoseMgmt { get; set; }

    public virtual DbSet<TpEval> TpEval { get; set; }

    public virtual DbSet<TpExternalName> TpExternalName { get; set; }

    public virtual DbSet<TpFcn> TpFcn { get; set; }

    public virtual DbSet<TpFinancial> TpFinancial { get; set; }

    public virtual DbSet<TpFocus> TpFocus { get; set; }

    public virtual DbSet<TpGrantItem> TpGrantItem { get; set; }

    public virtual DbSet<TpHolderCd> TpHolderCd { get; set; }

    public virtual DbSet<TpIdeNo> TpIdeNo { get; set; }

    public virtual DbSet<TpIndNo> TpIndNo { get; set; }

    public virtual DbSet<TpInstKey> TpInstKey { get; set; }

    public virtual DbSet<TpIntv> TpIntv { get; set; }

    public virtual DbSet<TpIntvCat> TpIntvCat { get; set; }

    public virtual DbSet<TpIntvFocus> TpIntvFocus { get; set; }

    public virtual DbSet<TpIrb> TpIrb { get; set; }

    public virtual DbSet<TpIvTherapy> TpIvTherapy { get; set; }

    public virtual DbSet<TpKeyCd> TpKeyCd { get; set; }

    public virtual DbSet<TpKeyScopeTyp> TpKeyScopeTyp { get; set; }

    public virtual DbSet<TpNciProgramCd> TpNciProgramCd { get; set; }

    public virtual DbSet<TpOutcome> TpOutcome { get; set; }

    public virtual DbSet<TpPhiReleaseCd> TpPhiReleaseCd { get; set; }

    public virtual DbSet<TpQstr> TpQstr { get; set; }

    public virtual DbSet<TpRem> TpRem { get; set; }

    public virtual DbSet<TpSchGroup> TpSchGroup { get; set; }

    public virtual DbSet<TpScheme> TpScheme { get; set; }

    public virtual DbSet<TpSeq> TpSeq { get; set; }

    public virtual DbSet<TpSite> TpSite { get; set; }

    public virtual DbSet<TpSiteStatusHistory> TpSiteStatusHistory { get; set; }

    public virtual DbSet<TpSiteStatusTyp> TpSiteStatusTyp { get; set; }

    public virtual DbSet<TpSpsr> TpSpsr { get; set; }

    public virtual DbSet<TpSpsrTyp> TpSpsrTyp { get; set; }

    public virtual DbSet<TpStaff> TpStaff { get; set; }

    public virtual DbSet<TpSum> TpSum { get; set; }

    public virtual DbSet<TpTperiod> TpTperiod { get; set; }

    public virtual DbSet<TpTxArm> TpTxArm { get; set; }

    public virtual DbSet<TrAsmt> TrAsmt { get; set; }

    public virtual DbSet<TrAsmtHdr> TrAsmtHdr { get; set; }

    public virtual DbSet<TrAsmtHdrMh> TrAsmtHdrMh { get; set; }

    public virtual DbSet<TrAsmtMh> TrAsmtMh { get; set; }

    public virtual DbSet<TrAsmtTyp> TrAsmtTyp { get; set; }

    public virtual DbSet<TrComp> TrComp { get; set; }

    public virtual DbSet<TrCompCulture> TrCompCulture { get; set; }

    public virtual DbSet<TrCompName> TrCompName { get; set; }

    public virtual DbSet<TrCsCertTyp> TrCsCertTyp { get; set; }

    public virtual DbSet<TrCsTyp> TrCsTyp { get; set; }

    public virtual DbSet<TrGrp> TrGrp { get; set; }

    public virtual DbSet<TrGrpComp> TrGrpComp { get; set; }

    public virtual DbSet<TrTyp> TrTyp { get; set; }

    public virtual DbSet<TrTypAuthor> TrTypAuthor { get; set; }

    public virtual DbSet<TrTypComp> TrTypComp { get; set; }

    public virtual DbSet<Tracking> Tracking { get; set; }

    public virtual DbSet<TrackingField> TrackingField { get; set; }

    public virtual DbSet<TrackingImage> TrackingImage { get; set; }

    public virtual DbSet<TrackingInformation> TrackingInformation { get; set; }

    public virtual DbSet<TransitionOfCareInbound> TransitionOfCareInbound { get; set; }

    public virtual DbSet<TransitionOfCareInboundMh> TransitionOfCareInboundMh { get; set; }

    public virtual DbSet<TransitionOfCareOutbound> TransitionOfCareOutbound { get; set; }

    public virtual DbSet<TransitionOfCareOutboundMh> TransitionOfCareOutboundMh { get; set; }

    public virtual DbSet<Transportation> Transportation { get; set; }

    public virtual DbSet<Tray> Tray { get; set; }

    public virtual DbSet<TreatmentCycle> TreatmentCycle { get; set; }

    public virtual DbSet<TreatmentHstryModel> TreatmentHstryModel { get; set; }

    public virtual DbSet<TreatmentPhase> TreatmentPhase { get; set; }

    public virtual DbSet<TreatmentRecord> TreatmentRecord { get; set; }

    public virtual DbSet<TrfCall> TrfCall { get; set; }

    public virtual DbSet<TrfCallAll> TrfCallAll { get; set; }

    public virtual DbSet<TrfColToOvride> TrfColToOvride { get; set; }

    public virtual DbSet<TrfCondPt> TrfCondPt { get; set; }

    public virtual DbSet<TrfCondPtHist> TrfCondPtHist { get; set; }

    public virtual DbSet<TrfCondQstr> TrfCondQstr { get; set; }

    public virtual DbSet<TrfCondRule> TrfCondRule { get; set; }

    public virtual DbSet<TrfCondRuleInst> TrfCondRuleInst { get; set; }

    public virtual DbSet<TrfCondTp> TrfCondTp { get; set; }

    public virtual DbSet<TrfCondTpHist> TrfCondTpHist { get; set; }

    public virtual DbSet<TrfEncVal> TrfEncVal { get; set; }

    public virtual DbSet<TrfExclTransLogNulls> TrfExclTransLogNulls { get; set; }

    public virtual DbSet<TrfInst> TrfInst { get; set; }

    public virtual DbSet<TrfLog> TrfLog { get; set; }

    public virtual DbSet<TrfMsgLog> TrfMsgLog { get; set; }

    public virtual DbSet<TrfScrubCondRul> TrfScrubCondRul { get; set; }

    public virtual DbSet<TrfScrubRule> TrfScrubRule { get; set; }

    public virtual DbSet<TrfSeq> TrfSeq { get; set; }

    public virtual DbSet<TrfSync> TrfSync { get; set; }

    public virtual DbSet<TrfSyncDet> TrfSyncDet { get; set; }

    public virtual DbSet<TrfTblSendAll> TrfTblSendAll { get; set; }

    public virtual DbSet<TrfTblToBlock> TrfTblToBlock { get; set; }

    public virtual DbSet<TumClsCritTyp> TumClsCritTyp { get; set; }

    public virtual DbSet<TumClsCritTypHdr> TumClsCritTypHdr { get; set; }

    public virtual DbSet<TumClsCritTypHdrCulture> TumClsCritTypHdrCulture { get; set; }

    public virtual DbSet<TumClsCritValue> TumClsCritValue { get; set; }

    public virtual DbSet<TumClsCritValueCulture> TumClsCritValueCulture { get; set; }

    public virtual DbSet<TumClsSchemAuth> TumClsSchemAuth { get; set; }

    public virtual DbSet<TumClsScheme> TumClsScheme { get; set; }

    public virtual DbSet<TumClsStageDef> TumClsStageDef { get; set; }

    public virtual DbSet<TumHstpthDesc> TumHstpthDesc { get; set; }

    public virtual DbSet<TumHstpthGrade> TumHstpthGrade { get; set; }

    public virtual DbSet<TumHstpthTyp> TumHstpthTyp { get; set; }

    public virtual DbSet<TumHstpthTypHdr> TumHstpthTypHdr { get; set; }

    public virtual DbSet<TumLymphSymptoms> TumLymphSymptoms { get; set; }

    public virtual DbSet<TxPln> TxPln { get; set; }

    public virtual DbSet<TxPlnStatusHx> TxPlnStatusHx { get; set; }

    public virtual DbSet<TxTframeIntvUse> TxTframeIntvUse { get; set; }

    public virtual DbSet<TxTframeTyp> TxTframeTyp { get; set; }

    public virtual DbSet<TxVrtn> TxVrtn { get; set; }

    public virtual DbSet<TxVrtnNote> TxVrtnNote { get; set; }

    public virtual DbSet<TxVrtnNoteTyp> TxVrtnNoteTyp { get; set; }

    public virtual DbSet<TypOfTest> TypOfTest { get; set; }

    public virtual DbSet<TypOfTestCulture> TypOfTestCulture { get; set; }

    public virtual DbSet<Ucum> Ucum { get; set; }

    public virtual DbSet<UnavlDow> UnavlDow { get; set; }

    public virtual DbSet<UnavlHdr> UnavlHdr { get; set; }

    public virtual DbSet<UnavlTemplate> UnavlTemplate { get; set; }

    public virtual DbSet<UnavlTyp> UnavlTyp { get; set; }

    public virtual DbSet<UnitConversion> UnitConversion { get; set; }

    public virtual DbSet<UnitOfMeas> UnitOfMeas { get; set; }

    public virtual DbSet<UomGroup> UomGroup { get; set; }

    public virtual DbSet<UserDefActAttr> UserDefActAttr { get; set; }

    public virtual DbSet<UserDefActAttrMh> UserDefActAttrMh { get; set; }

    public virtual DbSet<UserDefActAttrValue> UserDefActAttrValue { get; set; }

    public virtual DbSet<UserDefinedDemgr> UserDefinedDemgr { get; set; }

    public virtual DbSet<UserEmergAccessLog> UserEmergAccessLog { get; set; }

    public virtual DbSet<UserExamComp> UserExamComp { get; set; }

    public virtual DbSet<UserExamSystemDflt> UserExamSystemDflt { get; set; }

    public virtual DbSet<UserGroup> UserGroup { get; set; }

    public virtual DbSet<UserGroupCtrl> UserGroupCtrl { get; set; }

    public virtual DbSet<UserGroupMenu> UserGroupMenu { get; set; }

    public virtual DbSet<UserInstPtKeyCd> UserInstPtKeyCd { get; set; }

    public virtual DbSet<UserMsg> UserMsg { get; set; }

    public virtual DbSet<UserMsgDsp> UserMsgDsp { get; set; }

    public virtual DbSet<UserPnToolbar> UserPnToolbar { get; set; }

    public virtual DbSet<UserPrefer> UserPrefer { get; set; }

    public virtual DbSet<UserPreferCd> UserPreferCd { get; set; }

    public virtual DbSet<UserPreferMh> UserPreferMh { get; set; }

    public virtual DbSet<UserPrivilegeLog> UserPrivilegeLog { get; set; }

    public virtual DbSet<UserRouteRstr> UserRouteRstr { get; set; }

    public virtual DbSet<UserSchLoc> UserSchLoc { get; set; }

    public virtual DbSet<UserShortcut> UserShortcut { get; set; }

    public virtual DbSet<UserWinAccess> UserWinAccess { get; set; }

    public virtual DbSet<Userid> Userid { get; set; }

    public virtual DbSet<UseridMh> UseridMh { get; set; }

    public virtual DbSet<ValXref> ValXref { get; set; }

    public virtual DbSet<ValueTyp> ValueTyp { get; set; }

    public virtual DbSet<VarisDbInfo> VarisDbInfo { get; set; }

    public virtual DbSet<Venue> Venue { get; set; }

    public virtual DbSet<VideoDigitizer> VideoDigitizer { get; set; }

    public virtual DbSet<VisitFinancialStatusTyp> VisitFinancialStatusTyp { get; set; }

    public virtual DbSet<VisitNote> VisitNote { get; set; }

    public virtual DbSet<VisitNoteDictation> VisitNoteDictation { get; set; }

    public virtual DbSet<VisitNoteMh> VisitNoteMh { get; set; }

    public virtual DbSet<VisitNoteNonRtf> VisitNoteNonRtf { get; set; }

    public virtual DbSet<VisitNoteRcpt> VisitNoteRcpt { get; set; }

    public virtual DbSet<VisitNoteTyp> VisitNoteTyp { get; set; }

    public virtual DbSet<VisitReasonPnTemplate> VisitReasonPnTemplate { get; set; }

    public virtual DbSet<VisitReasonTyp> VisitReasonTyp { get; set; }

    public virtual DbSet<VisitTask> VisitTask { get; set; }

    public virtual DbSet<VisitTrackingTyp> VisitTrackingTyp { get; set; }

    public virtual DbSet<VisitTyp> VisitTyp { get; set; }

    public virtual DbSet<VolOptConstraints> VolOptConstraints { get; set; }

    public virtual DbSet<VolOptMatrix> VolOptMatrix { get; set; }

    public virtual DbSet<VolOptStruct> VolOptStruct { get; set; }

    public virtual DbSet<VolOptStructCstr> VolOptStructCstr { get; set; }

    public virtual DbSet<VolumeCode> VolumeCode { get; set; }

    public virtual DbSet<VolumeType> VolumeType { get; set; }

    public virtual DbSet<VrblOrder> VrblOrder { get; set; }

    public virtual DbSet<VrblOrderDetail> VrblOrderDetail { get; set; }

    public virtual DbSet<VrblOrderLink> VrblOrderLink { get; set; }

    public virtual DbSet<VrblTyp> VrblTyp { get; set; }

    public virtual DbSet<VrtnRsnTyp> VrtnRsnTyp { get; set; }

    public virtual DbSet<VrtnSourceCls> VrtnSourceCls { get; set; }

    public virtual DbSet<VrtnSourceTyp> VrtnSourceTyp { get; set; }

    public virtual DbSet<VrtnTyp> VrtnTyp { get; set; }

    public virtual DbSet<VvActivity> VvActivity { get; set; }

    public virtual DbSet<VvActivityCategory> VvActivityCategory { get; set; }

    public virtual DbSet<VvActivityCategoryLng> VvActivityCategoryLng { get; set; }

    public virtual DbSet<VvActivityInstance> VvActivityInstance { get; set; }

    public virtual DbSet<VvActivityLng> VvActivityLng { get; set; }

    public virtual DbSet<VvAppointmentTaskPriority> VvAppointmentTaskPriority { get; set; }

    public virtual DbSet<VvAppointmentTaskPriorityLng> VvAppointmentTaskPriorityLng { get; set; }

    public virtual DbSet<VvArchiveDeleteStatus> VvArchiveDeleteStatus { get; set; }

    public virtual DbSet<VvArchiveDeleteStatusLng> VvArchiveDeleteStatusLng { get; set; }

    public virtual DbSet<VvArchiveMediaStatus> VvArchiveMediaStatus { get; set; }

    public virtual DbSet<VvArchiveMediaStatusLng> VvArchiveMediaStatusLng { get; set; }

    public virtual DbSet<VvArchiveMediaType> VvArchiveMediaType { get; set; }

    public virtual DbSet<VvArchiveMediaTypeLng> VvArchiveMediaTypeLng { get; set; }

    public virtual DbSet<VvAttendee> VvAttendee { get; set; }

    public virtual DbSet<VvAutoSetupLevel> VvAutoSetupLevel { get; set; }

    public virtual DbSet<VvAutoSetupLevelLng> VvAutoSetupLevelLng { get; set; }

    public virtual DbSet<VvAuxiliary> VvAuxiliary { get; set; }

    public virtual DbSet<VvAuxiliaryLng> VvAuxiliaryLng { get; set; }

    public virtual DbSet<VvBillEventTypeEnm> VvBillEventTypeEnm { get; set; }

    public virtual DbSet<VvBillingCode> VvBillingCode { get; set; }

    public virtual DbSet<VvBlock> VvBlock { get; set; }

    public virtual DbSet<VvBloodGroup> VvBloodGroup { get; set; }

    public virtual DbSet<VvBloodGroupLng> VvBloodGroupLng { get; set; }

    public virtual DbSet<VvBodySystemName> VvBodySystemName { get; set; }

    public virtual DbSet<VvBodySystemNameLng> VvBodySystemNameLng { get; set; }

    public virtual DbSet<VvBrachyField> VvBrachyField { get; set; }

    public virtual DbSet<VvBrachyFieldHstry> VvBrachyFieldHstry { get; set; }

    public virtual DbSet<VvBreakPoint> VvBreakPoint { get; set; }

    public virtual DbSet<VvCalcTypEnm> VvCalcTypEnm { get; set; }

    public virtual DbSet<VvCancelReasonTypeEnm> VvCancelReasonTypeEnm { get; set; }

    public virtual DbSet<VvCancerTypeEnm> VvCancerTypeEnm { get; set; }

    public virtual DbSet<VvChecklistResponse> VvChecklistResponse { get; set; }

    public virtual DbSet<VvChecklistResponseLng> VvChecklistResponseLng { get; set; }

    public virtual DbSet<VvClinicalStatus> VvClinicalStatus { get; set; }

    public virtual DbSet<VvClinicalStatusLng> VvClinicalStatusLng { get; set; }

    public virtual DbSet<VvCompensator> VvCompensator { get; set; }

    public virtual DbSet<VvControlPoint> VvControlPoint { get; set; }

    public virtual DbSet<VvControlPointProton> VvControlPointProton { get; set; }

    public virtual DbSet<VvCountry> VvCountry { get; set; }

    public virtual DbSet<VvCountryLng> VvCountryLng { get; set; }

    public virtual DbSet<VvCourse> VvCourse { get; set; }

    public virtual DbSet<VvCourse1> VvCourse1 { get; set; }

    public virtual DbSet<VvCourseIntent> VvCourseIntent { get; set; }

    public virtual DbSet<VvCourseIntentLng> VvCourseIntentLng { get; set; }

    public virtual DbSet<VvDbhistory> VvDbhistory { get; set; }

    public virtual DbSet<VvDerivedImageCode> VvDerivedImageCode { get; set; }

    public virtual DbSet<VvDiagnosisCodeDesc> VvDiagnosisCodeDesc { get; set; }

    public virtual DbSet<VvDiagnosisCodeDescLng> VvDiagnosisCodeDescLng { get; set; }

    public virtual DbSet<VvDiagnosisStagingMethod> VvDiagnosisStagingMethod { get; set; }

    public virtual DbSet<VvDiagnosisStagingMethodLng> VvDiagnosisStagingMethodLng { get; set; }

    public virtual DbSet<VvDiagnosisTableStandard> VvDiagnosisTableStandard { get; set; }

    public virtual DbSet<VvDiagnosisTableStandardLng> VvDiagnosisTableStandardLng { get; set; }

    public virtual DbSet<VvDiagnosisType> VvDiagnosisType { get; set; }

    public virtual DbSet<VvDiagnosisTypeLng> VvDiagnosisTypeLng { get; set; }

    public virtual DbSet<VvDimActInstTemplateLink> VvDimActInstTemplateLink { get; set; }

    public virtual DbSet<VvDimActInstTemplateLinkIncr> VvDimActInstTemplateLinkIncr { get; set; }

    public virtual DbSet<VvDimActivity> VvDimActivity { get; set; }

    public virtual DbSet<VvDimActivityAttribute> VvDimActivityAttribute { get; set; }

    public virtual DbSet<VvDimActivityMh> VvDimActivityMh { get; set; }

    public virtual DbSet<VvDimActivityTransaction> VvDimActivityTransaction { get; set; }

    public virtual DbSet<VvDimActivityTransactionInSightive> VvDimActivityTransactionInSightive { get; set; }

    public virtual DbSet<VvDimActivityTransactionIncr> VvDimActivityTransactionIncr { get; set; }

    public virtual DbSet<VvDimActivityTransactionMo> VvDimActivityTransactionMo { get; set; }

    public virtual DbSet<VvDimActivityTransactionMoIncr> VvDimActivityTransactionMoIncr { get; set; }

    public virtual DbSet<VvDimAddOn> VvDimAddOn { get; set; }

    public virtual DbSet<VvDimBrachyApplicator> VvDimBrachyApplicator { get; set; }

    public virtual DbSet<VvDimBrachyApplicatorIncr> VvDimBrachyApplicatorIncr { get; set; }

    public virtual DbSet<VvDimBrachyField> VvDimBrachyField { get; set; }

    public virtual DbSet<VvDimCellTypeEnm> VvDimCellTypeEnm { get; set; }

    public virtual DbSet<VvDimChannel> VvDimChannel { get; set; }

    public virtual DbSet<VvDimClinic> VvDimClinic { get; set; }

    public virtual DbSet<VvDimConstantResource> VvDimConstantResource { get; set; }

    public virtual DbSet<VvDimDateRangeController> VvDimDateRangeController { get; set; }

    public virtual DbSet<VvDimDateRangeControllerIncr> VvDimDateRangeControllerIncr { get; set; }

    public virtual DbSet<VvDimDiagnosisCodeEnm> VvDimDiagnosisCodeEnm { get; set; }

    public virtual DbSet<VvDimDoctor> VvDimDoctor { get; set; }

    public virtual DbSet<VvDimDoctorEnm> VvDimDoctorEnm { get; set; }

    public virtual DbSet<VvDimDrug> VvDimDrug { get; set; }

    public virtual DbSet<VvDimDxSiteEnm> VvDimDxSiteEnm { get; set; }

    public virtual DbSet<VvDimEnergy> VvDimEnergy { get; set; }

    public virtual DbSet<VvDimGroupResources> VvDimGroupResources { get; set; }

    public virtual DbSet<VvDimHospitalDepartment> VvDimHospitalDepartment { get; set; }

    public virtual DbSet<VvDimIcdositeEnm> VvDimIcdositeEnm { get; set; }

    public virtual DbSet<VvDimInstituteLocation> VvDimInstituteLocation { get; set; }

    public virtual DbSet<VvDimLocation> VvDimLocation { get; set; }

    public virtual DbSet<VvDimLocationMo> VvDimLocationMo { get; set; }

    public virtual DbSet<VvDimLookup> VvDimLookup { get; set; }

    public virtual DbSet<VvDimLookupResourceType> VvDimLookupResourceType { get; set; }

    public virtual DbSet<VvDimMachine> VvDimMachine { get; set; }

    public virtual DbSet<VvDimMedOncPlan> VvDimMedOncPlan { get; set; }

    public virtual DbSet<VvDimMedOncPlanSummary> VvDimMedOncPlanSummary { get; set; }

    public virtual DbSet<VvDimMedoncPlanInterval> VvDimMedoncPlanInterval { get; set; }

    public virtual DbSet<VvDimMedoncPlanPhase> VvDimMedoncPlanPhase { get; set; }

    public virtual DbSet<VvDimNationality> VvDimNationality { get; set; }

    public virtual DbSet<VvDimOperatingLimit> VvDimOperatingLimit { get; set; }

    public virtual DbSet<VvDimPatientDepartment> VvDimPatientDepartment { get; set; }

    public virtual DbSet<VvDimPatientDepartmentbyCuid> VvDimPatientDepartmentbyCuid { get; set; }

    public virtual DbSet<VvDimPatientDiseaseResponse> VvDimPatientDiseaseResponse { get; set; }

    public virtual DbSet<VvDimPatientDoctor> VvDimPatientDoctor { get; set; }

    public virtual DbSet<VvDimPatientDoctorMo> VvDimPatientDoctorMo { get; set; }

    public virtual DbSet<VvDimPatientJournal> VvDimPatientJournal { get; set; }

    public virtual DbSet<VvDimPatientPhoto> VvDimPatientPhoto { get; set; }

    public virtual DbSet<VvDimPatientUserDefinedLabels> VvDimPatientUserDefinedLabels { get; set; }

    public virtual DbSet<VvDimPatientVisitTracking> VvDimPatientVisitTracking { get; set; }

    public virtual DbSet<VvDimPatientVisitTrackingIncr> VvDimPatientVisitTrackingIncr { get; set; }

    public virtual DbSet<VvDimPayor> VvDimPayor { get; set; }

    public virtual DbSet<VvDimPayorMo> VvDimPayorMo { get; set; }

    public virtual DbSet<VvDimPrescription> VvDimPrescription { get; set; }

    public virtual DbSet<VvDimPrescriptionAnatomy> VvDimPrescriptionAnatomy { get; set; }

    public virtual DbSet<VvDimPrescriptionIncr> VvDimPrescriptionIncr { get; set; }

    public virtual DbSet<VvDimPrescriptionProperty> VvDimPrescriptionProperty { get; set; }

    public virtual DbSet<VvDimProcedureCode> VvDimProcedureCode { get; set; }

    public virtual DbSet<VvDimQuestionnaires> VvDimQuestionnaires { get; set; }

    public virtual DbSet<VvDimRadioactiveModelSource> VvDimRadioactiveModelSource { get; set; }

    public virtual DbSet<VvDimResource> VvDimResource { get; set; }

    public virtual DbSet<VvDimResourceDepartmentHospital> VvDimResourceDepartmentHospital { get; set; }

    public virtual DbSet<VvDimResourceEnm> VvDimResourceEnm { get; set; }

    public virtual DbSet<VvDimResoureGroup> VvDimResoureGroup { get; set; }

    public virtual DbSet<VvDimRx> VvDimRx { get; set; }

    public virtual DbSet<VvDimRxAdmin> VvDimRxAdmin { get; set; }

    public virtual DbSet<VvDimRxAgt> VvDimRxAgt { get; set; }

    public virtual DbSet<VvDimRxAgtIncr> VvDimRxAgtIncr { get; set; }

    public virtual DbSet<VvDimRxHydra> VvDimRxHydra { get; set; }

    public virtual DbSet<VvDimRxIncr> VvDimRxIncr { get; set; }

    public virtual DbSet<VvDimStaff> VvDimStaff { get; set; }

    public virtual DbSet<VvDimStaffEnm> VvDimStaffEnm { get; set; }

    public virtual DbSet<VvDimStructure> VvDimStructure { get; set; }

    public virtual DbSet<VvDimStructureIncr> VvDimStructureIncr { get; set; }

    public virtual DbSet<VvDimTemplateCycle> VvDimTemplateCycle { get; set; }

    public virtual DbSet<VvDimToxicityGradingCriteriaEnm> VvDimToxicityGradingCriteriaEnm { get; set; }

    public virtual DbSet<VvDimTreatmentDateRangeController> VvDimTreatmentDateRangeController { get; set; }

    public virtual DbSet<VvDimTreatmentDateRangeControllerIncr> VvDimTreatmentDateRangeControllerIncr { get; set; }

    public virtual DbSet<VvDimUser> VvDimUser { get; set; }

    public virtual DbSet<VvDimUserDepartment> VvDimUserDepartment { get; set; }

    public virtual DbSet<VvDimUserEnm> VvDimUserEnm { get; set; }

    public virtual DbSet<VvDimUserMo> VvDimUserMo { get; set; }

    public virtual DbSet<VvDimVisitEventDetail> VvDimVisitEventDetail { get; set; }

    public virtual DbSet<VvDimVisitEventDetailIncr> VvDimVisitEventDetailIncr { get; set; }

    public virtual DbSet<VvDocumentTypes> VvDocumentTypes { get; set; }

    public virtual DbSet<VvDocumentTypesLng> VvDocumentTypesLng { get; set; }

    public virtual DbSet<VvDoseContribution> VvDoseContribution { get; set; }

    public virtual DbSet<VvDoseContribution1> VvDoseContribution1 { get; set; }

    public virtual DbSet<VvDoseCorrectionLog> VvDoseCorrectionLog { get; set; }

    public virtual DbSet<VvDoseLevelEnm> VvDoseLevelEnm { get; set; }

    public virtual DbSet<VvDoseOverrideView> VvDoseOverrideView { get; set; }

    public virtual DbSet<VvDoseVrtnTypEnm> VvDoseVrtnTypEnm { get; set; }

    public virtual DbSet<VvDwActivityBillingModel> VvDwActivityBillingModel { get; set; }

    public virtual DbSet<VvDwActivityBillingModelIncr> VvDwActivityBillingModelIncr { get; set; }

    public virtual DbSet<VvDwActivityBillingNoCaptureModel> VvDwActivityBillingNoCaptureModel { get; set; }

    public virtual DbSet<VvDwActivityBillingNoCaptureModelIncr> VvDwActivityBillingNoCaptureModelIncr { get; set; }

    public virtual DbSet<VvDwActivityModel> VvDwActivityModel { get; set; }

    public virtual DbSet<VvDwDateRangeControllerModel> VvDwDateRangeControllerModel { get; set; }

    public virtual DbSet<VvDwDiagnosisCodeDescLng> VvDwDiagnosisCodeDescLng { get; set; }

    public virtual DbSet<VvDwDiagnosisCodeDescLngEnm> VvDwDiagnosisCodeDescLngEnm { get; set; }

    public virtual DbSet<VvDwDimPatient> VvDwDimPatient { get; set; }

    public virtual DbSet<VvDwDimPatientEnm> VvDwDimPatientEnm { get; set; }

    public virtual DbSet<VvDwFactPatient> VvDwFactPatient { get; set; }

    public virtual DbSet<VvDwFactPatientEnm> VvDwFactPatientEnm { get; set; }

    public virtual DbSet<VvDwFactPatientEnmonly> VvDwFactPatientEnmonly { get; set; }

    public virtual DbSet<VvDwGetPatientsAllDxSite> VvDwGetPatientsAllDxSite { get; set; }

    public virtual DbSet<VvDwPatientDiagnosisEnmModel> VvDwPatientDiagnosisEnmModel { get; set; }

    public virtual DbSet<VvDwPatientDiagnosisEnmModelIncr> VvDwPatientDiagnosisEnmModelIncr { get; set; }

    public virtual DbSet<VvDwPatientDiagnosisEnmModelPerf> VvDwPatientDiagnosisEnmModelPerf { get; set; }

    public virtual DbSet<VvDwPatientDiagnosisModel> VvDwPatientDiagnosisModel { get; set; }

    public virtual DbSet<VvDwPatientDoctorModel> VvDwPatientDoctorModel { get; set; }

    public virtual DbSet<VvDwPatientModel> VvDwPatientModel { get; set; }

    public virtual DbSet<VvDwPatientModelEnm> VvDwPatientModelEnm { get; set; }

    public virtual DbSet<VvDwPatientPhotoModel> VvDwPatientPhotoModel { get; set; }

    public virtual DbSet<VvDwPatientUserDefinedLabelsModel> VvDwPatientUserDefinedLabelsModel { get; set; }

    public virtual DbSet<VvDwResourceActivity> VvDwResourceActivity { get; set; }

    public virtual DbSet<VvDwResourceDetails> VvDwResourceDetails { get; set; }

    public virtual DbSet<VvDwResourceModel> VvDwResourceModel { get; set; }

    public virtual DbSet<VvDwTreatmentDateRangeControllerModel> VvDwTreatmentDateRangeControllerModel { get; set; }

    public virtual DbSet<VvEthnicity> VvEthnicity { get; set; }

    public virtual DbSet<VvEthnicityLng> VvEthnicityLng { get; set; }

    public virtual DbSet<VvExternalField> VvExternalField { get; set; }

    public virtual DbSet<VvExternalField1> VvExternalField1 { get; set; }

    public virtual DbSet<VvExternalFieldCommon> VvExternalFieldCommon { get; set; }

    public virtual DbSet<VvExternalFieldCommon1> VvExternalFieldCommon1 { get; set; }

    public virtual DbSet<VvExternalFieldCommonHstry> VvExternalFieldCommonHstry { get; set; }

    public virtual DbSet<VvExternalFieldCommonHstry1> VvExternalFieldCommonHstry1 { get; set; }

    public virtual DbSet<VvExternalFieldHstry> VvExternalFieldHstry { get; set; }

    public virtual DbSet<VvExternalFieldHstry1> VvExternalFieldHstry1 { get; set; }

    public virtual DbSet<VvFactActivityBillingMo> VvFactActivityBillingMo { get; set; }

    public virtual DbSet<VvFactActivityBillingMoIncr> VvFactActivityBillingMoIncr { get; set; }

    public virtual DbSet<VvFactActivityCaptureAttribute> VvFactActivityCaptureAttribute { get; set; }

    public virtual DbSet<VvFactActivityCaptureAttributeIncr> VvFactActivityCaptureAttributeIncr { get; set; }

    public virtual DbSet<VvFactBrachySourcePosition> VvFactBrachySourcePosition { get; set; }

    public virtual DbSet<VvFactBrachySourcePositionIncr> VvFactBrachySourcePositionIncr { get; set; }

    public virtual DbSet<VvFactBrachyTreatment> VvFactBrachyTreatment { get; set; }

    public virtual DbSet<VvFactBrachyTreatmentIncr> VvFactBrachyTreatmentIncr { get; set; }

    public virtual DbSet<VvFactInVivoDosimetry> VvFactInVivoDosimetry { get; set; }

    public virtual DbSet<VvFactInVivoDosimetryIncr> VvFactInVivoDosimetryIncr { get; set; }

    public virtual DbSet<VvFactPatientAllergy> VvFactPatientAllergy { get; set; }

    public virtual DbSet<VvFactPatientAllergyIncr> VvFactPatientAllergyIncr { get; set; }

    public virtual DbSet<VvFactPatientExam> VvFactPatientExam { get; set; }

    public virtual DbSet<VvFactPatientExamIncr> VvFactPatientExamIncr { get; set; }

    public virtual DbSet<VvFactPatientFamilyHistoryEnm> VvFactPatientFamilyHistoryEnm { get; set; }

    public virtual DbSet<VvFactPatientLabResult> VvFactPatientLabResult { get; set; }

    public virtual DbSet<VvFactPatientMedicalHistoryEnm> VvFactPatientMedicalHistoryEnm { get; set; }

    public virtual DbSet<VvFactPatientMedicalHistoryEnmIncr> VvFactPatientMedicalHistoryEnmIncr { get; set; }

    public virtual DbSet<VvFactPatientMedoncTreatment> VvFactPatientMedoncTreatment { get; set; }

    public virtual DbSet<VvFactPatientMedoncTreatmentIncr> VvFactPatientMedoncTreatmentIncr { get; set; }

    public virtual DbSet<VvFactPatientPayor> VvFactPatientPayor { get; set; }

    public virtual DbSet<VvFactPatientPayorIncr> VvFactPatientPayorIncr { get; set; }

    public virtual DbSet<VvFactPatientPrescription> VvFactPatientPrescription { get; set; }

    public virtual DbSet<VvFactPatientPrescriptionIncr> VvFactPatientPrescriptionIncr { get; set; }

    public virtual DbSet<VvFactPatientProcedureHistory> VvFactPatientProcedureHistory { get; set; }

    public virtual DbSet<VvFactPatientProcedureHistoryIncr> VvFactPatientProcedureHistoryIncr { get; set; }

    public virtual DbSet<VvFactPatientSocialHistoryEnm> VvFactPatientSocialHistoryEnm { get; set; }

    public virtual DbSet<VvFactPatientSocialHistoryEnmIncr> VvFactPatientSocialHistoryEnmIncr { get; set; }

    public virtual DbSet<VvFactPatientToxicity> VvFactPatientToxicity { get; set; }

    public virtual DbSet<VvFactPatientToxicityIncr> VvFactPatientToxicityIncr { get; set; }

    public virtual DbSet<VvFactPhysicianOrder> VvFactPhysicianOrder { get; set; }

    public virtual DbSet<VvFactPhysicianOrderIncr> VvFactPhysicianOrderIncr { get; set; }

    public virtual DbSet<VvFactQuestionnaires> VvFactQuestionnaires { get; set; }

    public virtual DbSet<VvFactQuestionnairesIncr> VvFactQuestionnairesIncr { get; set; }

    public virtual DbSet<VvFactRxAdminAgtLevel> VvFactRxAdminAgtLevel { get; set; }

    public virtual DbSet<VvFactRxAdminAgtLevelIncr> VvFactRxAdminAgtLevelIncr { get; set; }

    public virtual DbSet<VvFactRxAdminDetail> VvFactRxAdminDetail { get; set; }

    public virtual DbSet<VvFactRxAdminDetailIncr> VvFactRxAdminDetailIncr { get; set; }

    public virtual DbSet<VvFactRxDispSyringe> VvFactRxDispSyringe { get; set; }

    public virtual DbSet<VvFactRxDispSyringeIncr> VvFactRxDispSyringeIncr { get; set; }

    public virtual DbSet<VvFactRxDispensary> VvFactRxDispensary { get; set; }

    public virtual DbSet<VvFactRxDispensaryIncr> VvFactRxDispensaryIncr { get; set; }

    public virtual DbSet<VvFactVisitNotes> VvFactVisitNotes { get; set; }

    public virtual DbSet<VvFactVisitNotesIncr> VvFactVisitNotesIncr { get; set; }

    public virtual DbSet<VvFieldAddOn> VvFieldAddOn { get; set; }

    public virtual DbSet<VvFieldProton> VvFieldProton { get; set; }

    public virtual DbSet<VvFlatPatientDiagnosisSite> VvFlatPatientDiagnosisSite { get; set; }

    public virtual DbSet<VvFlatPatientDiagnosisSiteIncr> VvFlatPatientDiagnosisSiteIncr { get; set; }

    public virtual DbSet<VvGblUnitDoseConfig> VvGblUnitDoseConfig { get; set; }

    public virtual DbSet<VvGetActivityDetails> VvGetActivityDetails { get; set; }

    public virtual DbSet<VvGetAppointmentTaskDates> VvGetAppointmentTaskDates { get; set; }

    public virtual DbSet<VvGetChartQatreatment> VvGetChartQatreatment { get; set; }

    public virtual DbSet<VvGetEnumNlslookupStrings> VvGetEnumNlslookupStrings { get; set; }

    public virtual DbSet<VvGetLatestApproval> VvGetLatestApproval { get; set; }

    public virtual DbSet<VvGetMachineDelayStatus> VvGetMachineDelayStatus { get; set; }

    public virtual DbSet<VvGetPatientPrimaryOncologistDetails> VvGetPatientPrimaryOncologistDetails { get; set; }

    public virtual DbSet<VvGetPatientPrimaryReferringPhysicianDetails> VvGetPatientPrimaryReferringPhysicianDetails { get; set; }

    public virtual DbSet<VvGetPatientWaitTimeData> VvGetPatientWaitTimeData { get; set; }

    public virtual DbSet<VvGetPredecessorAndCurrentActivityStatus> VvGetPredecessorAndCurrentActivityStatus { get; set; }

    public virtual DbSet<VvGetPredecessorAndCurrentActivityStatus14days> VvGetPredecessorAndCurrentActivityStatus14days { get; set; }

    public virtual DbSet<VvGetPrimaryOncologist> VvGetPrimaryOncologist { get; set; }

    public virtual DbSet<VvGetPrimaryOncologist14days> VvGetPrimaryOncologist14days { get; set; }

    public virtual DbSet<VvGetPrimaryOncologistDosimetry> VvGetPrimaryOncologistDosimetry { get; set; }

    public virtual DbSet<VvHistologyCodeDesc> VvHistologyCodeDesc { get; set; }

    public virtual DbSet<VvHistologyCodeDescLng> VvHistologyCodeDescLng { get; set; }

    public virtual DbSet<VvHistologyTableStandard> VvHistologyTableStandard { get; set; }

    public virtual DbSet<VvHistologyTableStandardLng> VvHistologyTableStandardLng { get; set; }

    public virtual DbSet<VvHowRecordedEnm> VvHowRecordedEnm { get; set; }

    public virtual DbSet<VvImage> VvImage { get; set; }

    public virtual DbSet<VvImageRadiation> VvImageRadiation { get; set; }

    public virtual DbSet<VvInSightiveWaitTimeHospitalDepartment> VvInSightiveWaitTimeHospitalDepartment { get; set; }

    public virtual DbSet<VvInfusionTypEnm> VvInfusionTypEnm { get; set; }

    public virtual DbSet<VvInstituteDepartmentEnm> VvInstituteDepartmentEnm { get; set; }

    public virtual DbSet<VvLatestApproval> VvLatestApproval { get; set; }

    public virtual DbSet<VvLookupCdCultureEnm> VvLookupCdCultureEnm { get; set; }

    public virtual DbSet<VvLookupTypCultureEnm> VvLookupTypCultureEnm { get; set; }

    public virtual DbSet<VvMachineType> VvMachineType { get; set; }

    public virtual DbSet<VvMachineTypeLng> VvMachineTypeLng { get; set; }

    public virtual DbSet<VvMaritalStatus> VvMaritalStatus { get; set; }

    public virtual DbSet<VvMaritalStatusLng> VvMaritalStatusLng { get; set; }

    public virtual DbSet<VvMlcplan> VvMlcplan { get; set; }

    public virtual DbSet<VvNonScheduledActivity> VvNonScheduledActivity { get; set; }

    public virtual DbSet<VvNonScheduledActivityActive> VvNonScheduledActivityActive { get; set; }

    public virtual DbSet<VvNonScheduledActivityLng> VvNonScheduledActivityLng { get; set; }

    public virtual DbSet<VvObjectStatus> VvObjectStatus { get; set; }

    public virtual DbSet<VvObjectStatusLng> VvObjectStatusLng { get; set; }

    public virtual DbSet<VvOpLimit> VvOpLimit { get; set; }

    public virtual DbSet<VvOpLimitLng> VvOpLimitLng { get; set; }

    public virtual DbSet<VvOpLimitParameterName> VvOpLimitParameterName { get; set; }

    public virtual DbSet<VvOpLimitParameterNameLng> VvOpLimitParameterNameLng { get; set; }

    public virtual DbSet<VvOperationStatus> VvOperationStatus { get; set; }

    public virtual DbSet<VvOperationStatusLng> VvOperationStatusLng { get; set; }

    public virtual DbSet<VvPatient> VvPatient { get; set; }

    public virtual DbSet<VvPatientDepartmentbyCuid> VvPatientDepartmentbyCuid { get; set; }

    public virtual DbSet<VvPatientDoctor> VvPatientDoctor { get; set; }

    public virtual DbSet<VvPatientNote> VvPatientNote { get; set; }

    public virtual DbSet<VvPatientNote1> VvPatientNote1 { get; set; }

    public virtual DbSet<VvPatientNoteLng> VvPatientNoteLng { get; set; }

    public virtual DbSet<VvPatientPayorInfo> VvPatientPayorInfo { get; set; }

    public virtual DbSet<VvPatientPerformanceStatus> VvPatientPerformanceStatus { get; set; }

    public virtual DbSet<VvPatientStatus> VvPatientStatus { get; set; }

    public virtual DbSet<VvPatientStatusLng> VvPatientStatusLng { get; set; }

    public virtual DbSet<VvPatientType> VvPatientType { get; set; }

    public virtual DbSet<VvPatientTypeLng> VvPatientTypeLng { get; set; }

    public virtual DbSet<VvPatientWaitTimeInSightive> VvPatientWaitTimeInSightive { get; set; }

    public virtual DbSet<VvPimodel> VvPimodel { get; set; }

    public virtual DbSet<VvPimodelLng> VvPimodelLng { get; set; }

    public virtual DbSet<VvPlanRelationship> VvPlanRelationship { get; set; }

    public virtual DbSet<VvPlanSetup> VvPlanSetup { get; set; }

    public virtual DbSet<VvPlanSetup1> VvPlanSetup1 { get; set; }

    public virtual DbSet<VvPortalImages> VvPortalImages { get; set; }

    public virtual DbSet<VvPrmryDiagnosisWithStages> VvPrmryDiagnosisWithStages { get; set; }

    public virtual DbSet<VvProcedureItem> VvProcedureItem { get; set; }

    public virtual DbSet<VvProcedureItemLng> VvProcedureItemLng { get; set; }

    public virtual DbSet<VvPrtyOfSrvEnm> VvPrtyOfSrvEnm { get; set; }

    public virtual DbSet<VvPtInstKey> VvPtInstKey { get; set; }

    public virtual DbSet<VvPtInstKeyIncr> VvPtInstKeyIncr { get; set; }

    public virtual DbSet<VvPtQmresults> VvPtQmresults { get; set; }

    public virtual DbSet<VvQmQmCriteria> VvQmQmCriteria { get; set; }

    public virtual DbSet<VvRace> VvRace { get; set; }

    public virtual DbSet<VvRaceLng> VvRaceLng { get; set; }

    public virtual DbSet<VvRadiation> VvRadiation { get; set; }

    public virtual DbSet<VvRadiation1> VvRadiation1 { get; set; }

    public virtual DbSet<VvRadiationHstry> VvRadiationHstry { get; set; }

    public virtual DbSet<VvRadiationHstry1> VvRadiationHstry1 { get; set; }

    public virtual DbSet<VvRadiationRefPoint> VvRadiationRefPoint { get; set; }

    public virtual DbSet<VvRadiationRefPoint1> VvRadiationRefPoint1 { get; set; }

    public virtual DbSet<VvRefIndex> VvRefIndex { get; set; }

    public virtual DbSet<VvRefPoint> VvRefPoint { get; set; }

    public virtual DbSet<VvRefPoint1> VvRefPoint1 { get; set; }

    public virtual DbSet<VvRefPointLog> VvRefPointLog { get; set; }

    public virtual DbSet<VvReferenceImages> VvReferenceImages { get; set; }

    public virtual DbSet<VvReligion> VvReligion { get; set; }

    public virtual DbSet<VvReligionLng> VvReligionLng { get; set; }

    public virtual DbSet<VvResource> VvResource { get; set; }

    public virtual DbSet<VvResourceGroup> VvResourceGroup { get; set; }

    public virtual DbSet<VvResourceGroupLng> VvResourceGroupLng { get; set; }

    public virtual DbSet<VvResourceName> VvResourceName { get; set; }

    public virtual DbSet<VvResourceType> VvResourceType { get; set; }

    public virtual DbSet<VvResourceTypeLng> VvResourceTypeLng { get; set; }

    public virtual DbSet<VvRpTfhCourse> VvRpTfhCourse { get; set; }

    public virtual DbSet<VvRtplan> VvRtplan { get; set; }

    public virtual DbSet<VvRtplan1> VvRtplan1 { get; set; }

    public virtual DbSet<VvScheduledActivity> VvScheduledActivity { get; set; }

    public virtual DbSet<VvScheduledActivityActive> VvScheduledActivityActive { get; set; }

    public virtual DbSet<VvScheduledActivityLng> VvScheduledActivityLng { get; set; }

    public virtual DbSet<VvSeries> VvSeries { get; set; }

    public virtual DbSet<VvSession> VvSession { get; set; }

    public virtual DbSet<VvSessionProcedure> VvSessionProcedure { get; set; }

    public virtual DbSet<VvSessionProcedure1> VvSessionProcedure1 { get; set; }

    public virtual DbSet<VvSessionProcedurePart> VvSessionProcedurePart { get; set; }

    public virtual DbSet<VvSessionRtplan> VvSessionRtplan { get; set; }

    public virtual DbSet<VvSessionRtplan1> VvSessionRtplan1 { get; set; }

    public virtual DbSet<VvSessionStatus> VvSessionStatus { get; set; }

    public virtual DbSet<VvSessionStatusLng> VvSessionStatusLng { get; set; }

    public virtual DbSet<VvSex> VvSex { get; set; }

    public virtual DbSet<VvSexLng> VvSexLng { get; set; }

    public virtual DbSet<VvSlice> VvSlice { get; set; }

    public virtual DbSet<VvSlot> VvSlot { get; set; }

    public virtual DbSet<VvSlotLng> VvSlotLng { get; set; }

    public virtual DbSet<VvSmokingStatus> VvSmokingStatus { get; set; }

    public virtual DbSet<VvSmokingStatusLng> VvSmokingStatusLng { get; set; }

    public virtual DbSet<VvSourcePosition> VvSourcePosition { get; set; }

    public virtual DbSet<VvSpatialRegistration> VvSpatialRegistration { get; set; }

    public virtual DbSet<VvSpatialRegistrationImage> VvSpatialRegistrationImage { get; set; }

    public virtual DbSet<VvSpatialRegistrationIod> VvSpatialRegistrationIod { get; set; }

    public virtual DbSet<VvSsisGetDimAddon> VvSsisGetDimAddon { get; set; }

    public virtual DbSet<VvStageDefCultureEnm> VvStageDefCultureEnm { get; set; }

    public virtual DbSet<VvStatusTypCultureEnm> VvStatusTypCultureEnm { get; set; }

    public virtual DbSet<VvStkhKey> VvStkhKey { get; set; }

    public virtual DbSet<VvStkhProfTypeEnm> VvStkhProfTypeEnm { get; set; }

    public virtual DbSet<VvStkhRoleTypeEnm> VvStkhRoleTypeEnm { get; set; }

    public virtual DbSet<VvStudy> VvStudy { get; set; }

    public virtual DbSet<VvSyActiveImagingSession> VvSyActiveImagingSession { get; set; }

    public virtual DbSet<VvSyActiveSession> VvSyActiveSession { get; set; }

    public virtual DbSet<VvSyCategory> VvSyCategory { get; set; }

    public virtual DbSet<VvSyDcmallObjects> VvSyDcmallObjects { get; set; }

    public virtual DbSet<VvSyDcmdoseMatrix> VvSyDcmdoseMatrix { get; set; }

    public virtual DbSet<VvSyDcmmotionManagement> VvSyDcmmotionManagement { get; set; }

    public virtual DbSet<VvSyDcmrtplan> VvSyDcmrtplan { get; set; }

    public virtual DbSet<VvSyDcmslice> VvSyDcmslice { get; set; }

    public virtual DbSet<VvSyDcmspatialRegistration> VvSyDcmspatialRegistration { get; set; }

    public virtual DbSet<VvSyDcmstructureSet> VvSyDcmstructureSet { get; set; }

    public virtual DbSet<VvSyDcmtreatmentRecord> VvSyDcmtreatmentRecord { get; set; }

    public virtual DbSet<VvSyDoseFiguresApp> VvSyDoseFiguresApp { get; set; }

    public virtual DbSet<VvSyDoseFiguresAppSum> VvSyDoseFiguresAppSum { get; set; }

    public virtual DbSet<VvSyExternalFieldHstryAddOn> VvSyExternalFieldHstryAddOn { get; set; }

    public virtual DbSet<VvSyFieldMu> VvSyFieldMu { get; set; }

    public virtual DbSet<VvSyFieldMunative> VvSyFieldMunative { get; set; }

    public virtual DbSet<VvSyLastTreatedImagedSession> VvSyLastTreatedImagedSession { get; set; }

    public virtual DbSet<VvSyLastTreatedSession> VvSyLastTreatedSession { get; set; }

    public virtual DbSet<VvSyLockingInformation> VvSyLockingInformation { get; set; }

    public virtual DbSet<VvSyObjectCat> VvSyObjectCat { get; set; }

    public virtual DbSet<VvSyObjectPermissions> VvSyObjectPermissions { get; set; }

    public virtual DbSet<VvSyObjectType> VvSyObjectType { get; set; }

    public virtual DbSet<VvSyPatientRtstatusCbct> VvSyPatientRtstatusCbct { get; set; }

    public virtual DbSet<VvSyPatientRtstatusCourses> VvSyPatientRtstatusCourses { get; set; }

    public virtual DbSet<VvSyPatientRtstatusImages> VvSyPatientRtstatusImages { get; set; }

    public virtual DbSet<VvSyPatientRtstatusPlans> VvSyPatientRtstatusPlans { get; set; }

    public virtual DbSet<VvSyPatientRtstatusTrackings> VvSyPatientRtstatusTrackings { get; set; }

    public virtual DbSet<VvSyPredecessorPlanRelationship> VvSyPredecessorPlanRelationship { get; set; }

    public virtual DbSet<VvSySessionProcedureRtplan> VvSySessionProcedureRtplan { get; set; }

    public virtual DbSet<VvSySessionsWithScheduledPlans> VvSySessionsWithScheduledPlans { get; set; }

    public virtual DbSet<VvSyTfhfull> VvSyTfhfull { get; set; }

    public virtual DbSet<VvSyTrtevents> VvSyTrtevents { get; set; }

    public virtual DbSet<VvSyTrteventsCorrelated> VvSyTrteventsCorrelated { get; set; }

    public virtual DbSet<VvSyTrthistoryRecords> VvSyTrthistoryRecords { get; set; }

    public virtual DbSet<VvSyTrthistoryRecordsDose> VvSyTrthistoryRecordsDose { get; set; }

    public virtual DbSet<VvSyVerificationPlanRelationship> VvSyVerificationPlanRelationship { get; set; }

    public virtual DbSet<VvTechnique> VvTechnique { get; set; }

    public virtual DbSet<VvTechniqueLng> VvTechniqueLng { get; set; }

    public virtual DbSet<VvTemplate> VvTemplate { get; set; }

    public virtual DbSet<VvTemplateCycle> VvTemplateCycle { get; set; }

    public virtual DbSet<VvTestRequestTypEnm> VvTestRequestTypEnm { get; set; }

    public virtual DbSet<VvToxicMaterialType> VvToxicMaterialType { get; set; }

    public virtual DbSet<VvToxicMaterialTypeLng> VvToxicMaterialTypeLng { get; set; }

    public virtual DbSet<VvToxicUsageType> VvToxicUsageType { get; set; }

    public virtual DbSet<VvToxicUsageTypeLng> VvToxicUsageTypeLng { get; set; }

    public virtual DbSet<VvTpClsValueEnm> VvTpClsValueEnm { get; set; }

    public virtual DbSet<VvTreatmentRecord> VvTreatmentRecord { get; set; }

    public virtual DbSet<VvTreatmentRecord1> VvTreatmentRecord1 { get; set; }

    public virtual DbSet<VvUserLanguage> VvUserLanguage { get; set; }

    public virtual DbSet<VvVaAddOnValidation> VvVaAddOnValidation { get; set; }

    public virtual DbSet<VvVaConfiguredEmt> VvVaConfiguredEmt { get; set; }

    public virtual DbSet<VvVaMlcleafWide> VvVaMlcleafWide { get; set; }

    public virtual DbSet<VvVaRegisteredVolImage> VvVaRegisteredVolImage { get; set; }

    public virtual DbSet<VvVaRegisteredVolImage1> VvVaRegisteredVolImage1 { get; set; }

    public virtual DbSet<VvVaSliceCbct> VvVaSliceCbct { get; set; }

    public virtual DbSet<VvVaWedge> VvVaWedge { get; set; }

    public virtual DbSet<VvVenueType> VvVenueType { get; set; }

    public virtual DbSet<VvVenueTypeLng> VvVenueTypeLng { get; set; }

    public virtual DbSet<VvXrefTpClsEnm> VvXrefTpClsEnm { get; set; }

    public virtual DbSet<Wedge> Wedge { get; set; }

    public virtual DbSet<WeeklyChargeLink> WeeklyChargeLink { get; set; }

    public virtual DbSet<WeightTestResult> WeightTestResult { get; set; }

    public virtual DbSet<Workspace> Workspace { get; set; }

    public virtual DbSet<Workstation> Workstation { get; set; }

    public virtual DbSet<WorkstationPrinter> WorkstationPrinter { get; set; }

    public virtual DbSet<XrefActivityEvent> XrefActivityEvent { get; set; }

    public virtual DbSet<XrefActivityQstr> XrefActivityQstr { get; set; }

    public virtual DbSet<XrefAgtDx> XrefAgtDx { get; set; }

    public virtual DbSet<XrefAgtFormularyDispLoc> XrefAgtFormularyDispLoc { get; set; }

    public virtual DbSet<XrefAgtLookupCvx> XrefAgtLookupCvx { get; set; }

    public virtual DbSet<XrefAgtPt> XrefAgtPt { get; set; }

    public virtual DbSet<XrefAgtPtExternal> XrefAgtPtExternal { get; set; }

    public virtual DbSet<XrefAgtPtMh> XrefAgtPtMh { get; set; }

    public virtual DbSet<XrefAgtRxDx> XrefAgtRxDx { get; set; }

    public virtual DbSet<XrefBaseTyp> XrefBaseTyp { get; set; }

    public virtual DbSet<XrefBillEventPrecert> XrefBillEventPrecert { get; set; }

    public virtual DbSet<XrefCatGroup> XrefCatGroup { get; set; }

    public virtual DbSet<XrefCmteeIssueRcmd> XrefCmteeIssueRcmd { get; set; }

    public virtual DbSet<XrefComplianceItemBillCd> XrefComplianceItemBillCd { get; set; }

    public virtual DbSet<XrefCompliancePrdProvider> XrefCompliancePrdProvider { get; set; }

    public virtual DbSet<XrefDcmntCompTemplate> XrefDcmntCompTemplate { get; set; }

    public virtual DbSet<XrefDxBillEvent> XrefDxBillEvent { get; set; }

    public virtual DbSet<XrefDxRx> XrefDxRx { get; set; }

    public virtual DbSet<XrefDxStg> XrefDxStg { get; set; }

    public virtual DbSet<XrefDxStgMh> XrefDxStgMh { get; set; }

    public virtual DbSet<XrefDxTp> XrefDxTp { get; set; }

    public virtual DbSet<XrefExamCompIcd> XrefExamCompIcd { get; set; }

    public virtual DbSet<XrefExamSystemCpt> XrefExamSystemCpt { get; set; }

    public virtual DbSet<XrefFacGroup> XrefFacGroup { get; set; }

    public virtual DbSet<XrefHxCompIcd> XrefHxCompIcd { get; set; }

    public virtual DbSet<XrefIcd10ReadCd> XrefIcd10ReadCd { get; set; }

    public virtual DbSet<XrefIcdGroup> XrefIcdGroup { get; set; }

    public virtual DbSet<XrefIcdIcdo> XrefIcdIcdo { get; set; }

    public virtual DbSet<XrefIcdTpCls> XrefIcdTpCls { get; set; }

    public virtual DbSet<XrefIcdoMorph> XrefIcdoMorph { get; set; }

    public virtual DbSet<XrefIcdoTpCls> XrefIcdoTpCls { get; set; }

    public virtual DbSet<XrefInstDispLoc> XrefInstDispLoc { get; set; }

    public virtual DbSet<XrefInstLocDispLoc> XrefInstLocDispLoc { get; set; }

    public virtual DbSet<XrefInstLocTracking> XrefInstLocTracking { get; set; }

    public virtual DbSet<XrefInstRqstn> XrefInstRqstn { get; set; }

    public virtual DbSet<XrefInstTestCompGroup> XrefInstTestCompGroup { get; set; }

    public virtual DbSet<XrefInvasiveTypTpCls> XrefInvasiveTypTpCls { get; set; }

    public virtual DbSet<XrefMarginStatusTpCls> XrefMarginStatusTpCls { get; set; }

    public virtual DbSet<XrefMorphIcd> XrefMorphIcd { get; set; }

    public virtual DbSet<XrefMorphTpCls> XrefMorphTpCls { get; set; }

    public virtual DbSet<XrefOptPtDose> XrefOptPtDose { get; set; }

    public virtual DbSet<XrefPnSecCat> XrefPnSecCat { get; set; }

    public virtual DbSet<XrefPnSystemComp> XrefPnSystemComp { get; set; }

    public virtual DbSet<XrefPtAeCmtee> XrefPtAeCmtee { get; set; }

    public virtual DbSet<XrefPtRespHdrApptTask> XrefPtRespHdrApptTask { get; set; }

    public virtual DbSet<XrefPtTxDx> XrefPtTxDx { get; set; }

    public virtual DbSet<XrefQmValueSetEventCode> XrefQmValueSetEventCode { get; set; }

    public virtual DbSet<XrefQmValueSetQm> XrefQmValueSetQm { get; set; }

    public virtual DbSet<XrefQmValueSetQmCriteriaPart> XrefQmValueSetQmCriteriaPart { get; set; }

    public virtual DbSet<XrefRxPtDose> XrefRxPtDose { get; set; }

    public virtual DbSet<XrefRxTypInst> XrefRxTypInst { get; set; }

    public virtual DbSet<XrefSiteExam> XrefSiteExam { get; set; }

    public virtual DbSet<XrefSiteTest> XrefSiteTest { get; set; }

    public virtual DbSet<XrefSnomedCd> XrefSnomedCd { get; set; }

    public virtual DbSet<XrefSnomedTyp> XrefSnomedTyp { get; set; }

    public virtual DbSet<XrefTestCompCpt> XrefTestCompCpt { get; set; }

    public virtual DbSet<XrefTestTpCls> XrefTestTpCls { get; set; }

    public virtual DbSet<XrefTimeFrameBaseTyp> XrefTimeFrameBaseTyp { get; set; }

    public virtual DbSet<XrefTpCls> XrefTpCls { get; set; }

    public virtual DbSet<XrefTpRule> XrefTpRule { get; set; }

    public virtual DbSet<XrefTpTest> XrefTpTest { get; set; }

    public virtual DbSet<XrefTrTypPln> XrefTrTypPln { get; set; }

    public virtual DbSet<XrefTumGrpIcd> XrefTumGrpIcd { get; set; }

    public virtual DbSet<XrefUcumUnit> XrefUcumUnit { get; set; }

    public virtual DbSet<XrefUnitFcn> XrefUnitFcn { get; set; }

    public virtual DbSet<XrefUomGroup> XrefUomGroup { get; set; }

    public virtual DbSet<XrefUseridPt> XrefUseridPt { get; set; }

    public virtual DbSet<XsConfig> XsConfig { get; set; }

    public virtual DbSet<XsHandler> XsHandler { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Server=SAFRAN6;Database=VARIAN;Trusted_Connection=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AavLinkRttempFldAddon>(entity =>
        {
            entity.ToView("aav_LinkRTTempFldAddon");
        });

        modelBuilder.Entity<AavLinkRttempMlcsegment>(entity =>
        {
            entity.ToView("aav_LinkRTTempMLCSegment");
        });

        modelBuilder.Entity<AavLinkRttempTable1>(entity =>
        {
            entity.ToView("aav_LinkRTTempTable1");
        });

        modelBuilder.Entity<AavLinkRttempTfa>(entity =>
        {
            entity.ToView("aav_LinkRTTempTFA");
        });

        modelBuilder.Entity<AavLinkRttempTrtmntFld>(entity =>
        {
            entity.ToView("aav_LinkRTTempTrtmntFld");
        });

        modelBuilder.Entity<AbnormalFlagCd>(entity =>
        {
            entity.HasKey(e => e.AbnormalFlagCd1).HasName("pkabnormal_flag_cd");

            entity.Property(e => e.AbnormalFlagCd1).IsFixedLength();
            entity.Property(e => e.AbnormalFlagDesc).IsFixedLength();
            entity.Property(e => e.DisplayColor).IsFixedLength();
            entity.Property(e => e.Hl7MappedCd).IsFixedLength();
            entity.Property(e => e.Hl7MappedDesc).IsFixedLength();
            entity.Property(e => e.SendAlertInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AccessLog>(entity =>
        {
            entity.Property(e => e.AccessCmt).IsFixedLength();
            entity.Property(e => e.AppName).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AccessStatus>(entity =>
        {
            entity.HasKey(e => e.AccessStatusSer).HasName("XPKAccessStatus");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_AccessStatus");
                    tb.HasTrigger("tU_AccessStatus");
                });

            entity.Property(e => e.AccessStatusSer).ValueGeneratedNever();
            /*entity.Property(e => e.TimeStamp)
                
                */

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.AccessStatus).HasConstraintName("FKPatient_AccessStatus");
        });

        modelBuilder.Entity<AccountBillingCode>(entity =>
        {
            entity.HasKey(e => e.AccountBillingCodeSer).HasName("XPKAccountBillingCode");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_AccountBillingCode");
                    tb.HasTrigger("tI_AccountBillingCode");
                    tb.HasTrigger("tU_AccountBillingCode");
                });

            entity.Property(e => e.AccountBillingCodeSer).ValueGeneratedNever();
            /*
                
                */

            entity.HasOne(d => d.AttendingOncologistSerNavigation).WithMany(p => p.AccountBillingCodeAttendingOncologistSerNavigation).HasConstraintName("FKDoctor_AccountBillingCode1");

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.AccountBillingCode).HasConstraintName("FKDepartment_AccountBillingCode");

            entity.HasOne(d => d.HospitalSerNavigation).WithMany(p => p.AccountBillingCode).HasConstraintName("FKHospital_AccountBillingCode");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.AccountBillingCode).HasConstraintName("FKPatient_AccountBillingCode");

            entity.HasOne(d => d.ReferringDoctorSerNavigation).WithMany(p => p.AccountBillingCodeReferringDoctorSerNavigation).HasConstraintName("FKDoctor_AccountBillingCode2");
        });

        modelBuilder.Entity<AccountBillingCodeMh>(entity =>
        {
            entity.HasKey(e => new { e.AccountBillingCodeSer, e.AccountBillingCodeRevCount }).HasName("XPKAccountBillingCodeMH");

            entity.ToTable("AccountBillingCodeMH", tb =>
                {
                    tb.HasTrigger("tD_AccountBillingCodeMH");
                    tb.HasTrigger("tI_AccountBillingCodeMH");
                    tb.HasTrigger("tU_AccountBillingCodeMH");
                });

            /*
                
                */

            entity.HasOne(d => d.AccountBillingCodeSerNavigation).WithMany(p => p.AccountBillingCodeMh).HasConstraintName("FKAccountBillingCode_AccountBillingCodeMH");
        });

        modelBuilder.Entity<ActCaptDiagnosis>(entity =>
        {
            entity.HasKey(e => e.ActCaptDiagnosisSer).HasName("XPKActivityCaptureDiagnosis");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ActCaptDiagnosis");
                    tb.HasTrigger("tI_ActCaptDiagnosis");
                    tb.HasTrigger("tU_ActCaptDiagnosis");
                });

            entity.Property(e => e.ActCaptDiagnosisSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityCaptureSerNavigation).WithMany(p => p.ActCaptDiagnosis)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKActivityCapture_ActCaptDiagnosis");
        });

        modelBuilder.Entity<ActCaptDiagnosisMh>(entity =>
        {
            entity.HasKey(e => new { e.ActCaptDiagnosisSer, e.ActCaptDiagnosisRevCount }).HasName("XPKActivityCaptureDiagnosisMH");

            entity.ToTable("ActCaptDiagnosisMH", tb =>
                {
                    tb.HasTrigger("tD_ActCaptDiagnosisMH");
                    tb.HasTrigger("tI_ActCaptDiagnosisMH");
                    tb.HasTrigger("tU_ActCaptDiagnosisMH");
                });

            
                
                

            entity.HasOne(d => d.ActCaptDiagnosisSerNavigation).WithMany(p => p.ActCaptDiagnosisMh).HasConstraintName("FKActCaptDiagnosis_ActCaptDiagnosisMH");
        });

        modelBuilder.Entity<ActCaptTreatment>(entity =>
        {
            entity.HasKey(e => e.ActCaptTreatmentSer).HasName("XPKActCaptTreatment");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ActCaptTreatment");
                    tb.HasTrigger("tU_ActCaptTreatment");
                });

            entity.Property(e => e.ActCaptTreatmentSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityCaptureSerNavigation).WithMany(p => p.ActCaptTreatment).HasConstraintName("FKActivityCapture_ActCaptTreatment");

            entity.HasOne(d => d.RadiationHstrySerNavigation).WithMany(p => p.ActCaptTreatment)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRadiationHstry_ActCaptTreatment");
        });

        modelBuilder.Entity<ActInstChecklistItem>(entity =>
        {
            entity.HasKey(e => e.ActInstChecklistItemSer).HasName("XPKActInstChecklistItem");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ActInstChecklistItem");
                    tb.HasTrigger("tU_ActInstChecklistItem");
                });

            entity.Property(e => e.ActInstChecklistItemSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityInstanceSerNavigation).WithMany(p => p.ActInstChecklistItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ActivityInstance_ActInstCheckIistItem");

            entity.HasOne(d => d.ChecklistItemSerNavigation).WithMany(p => p.ActInstChecklistItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKChecklistItem_ActInstChecklistItem");
        });

        modelBuilder.Entity<ActInstProcCode>(entity =>
        {
            entity.HasKey(e => e.ActInstProcCodeSer).HasName("XPKActInstProcCode");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ActInstProcCode");
                    tb.HasTrigger("tI_ActInstProcCode");
                    tb.HasTrigger("tU_ActInstProcCode");
                });

            entity.Property(e => e.ActInstProcCodeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.AccountBillingCodeSerNavigation).WithMany(p => p.ActInstProcCode).HasConstraintName("FKAccountBillingCode_ActInstProcCode");

            entity.HasOne(d => d.ActivityInstanceSerNavigation).WithMany(p => p.ActInstProcCode).HasConstraintName("FKActivityInstance_ActInstProcCode");

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.ActInstProcCode)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKDepartment_ActInstProcCode");

            entity.HasOne(d => d.Modifier2SerNavigation).WithMany(p => p.ActInstProcCodeModifier2SerNavigation).HasConstraintName("FKActivityCodeMd_ActInstProcCode1");

            entity.HasOne(d => d.Modifier3SerNavigation).WithMany(p => p.ActInstProcCodeModifier3SerNavigation).HasConstraintName("FKActivityCodeMd_ActInstProcCode3");

            entity.HasOne(d => d.Modifier4SerNavigation).WithMany(p => p.ActInstProcCodeModifier4SerNavigation).HasConstraintName("FKActivityCodeMd_ActInstProcCode4");

            entity.HasOne(d => d.Modifier5SerNavigation).WithMany(p => p.ActInstProcCodeModifier5SerNavigation).HasConstraintName("FKActivityCodeMd_ActInstProcCode5");

            entity.HasOne(d => d.Modifier6SerNavigation).WithMany(p => p.ActInstProcCodeModifier6SerNavigation).HasConstraintName("FKActivityCodeMd_ActInstProcCode6");

            entity.HasOne(d => d.Modifier7SerNavigation).WithMany(p => p.ActInstProcCodeModifier7SerNavigation).HasConstraintName("FKActivityCodeMd_ActInstProcCode7");

            entity.HasOne(d => d.ModifierSerNavigation).WithMany(p => p.ActInstProcCodeModifierSerNavigation).HasConstraintName("FKActivityCodeMd_ActInstProcCode");

            entity.HasOne(d => d.ProcedureCodeSerNavigation).WithMany(p => p.ActInstProcCode).HasConstraintName("FKProcedureCode_ActInstProcCode");
        });

        modelBuilder.Entity<ActInstProcCodeMh>(entity =>
        {
            entity.HasKey(e => new { e.ActInstProcCodeSer, e.ActInstProcCodeRevCount }).HasName("XPKActInstProcCodeMH");

            entity.ToTable("ActInstProcCodeMH", tb =>
                {
                    tb.HasTrigger("tD_ActInstProcCodeMH");
                    tb.HasTrigger("tI_ActInstProcCodeMH");
                    tb.HasTrigger("tU_ActInstProcCodeMH");
                });

            
                
                

            entity.HasOne(d => d.ActInstProcCodeSerNavigation).WithMany(p => p.ActInstProcCodeMh).HasConstraintName("FKActInstProcCode_ActInstProcCodeMH");
        });

        modelBuilder.Entity<Activity>(entity =>
        {
            entity.HasKey(e => e.ActivitySer).HasName("XPKActivity");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Activity");
                    tb.HasTrigger("tI_Activity");
                    tb.HasTrigger("tU_Activity");
                });

            entity.Property(e => e.ActivitySer).ValueGeneratedNever();
            entity.Property(e => e.ForeGroundColor).IsFixedLength();
            
                
                

            entity.HasOne(d => d.ActivityCategorySerNavigation).WithMany(p => p.Activity)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKActivityCategory_Activity");

            entity.HasOne(d => d.DicomcodeValueSerNavigation).WithMany(p => p.Activity).HasConstraintName("FKDICOMCodeValue_Activity");

            entity.HasOne(d => d.EscalationGroupSerNavigation).WithMany(p => p.ActivityEscalationGroupSerNavigation).HasConstraintName("FKResourceGroup_Activity2");

            entity.HasOne(d => d.ResourceGroupSerNavigation).WithMany(p => p.ActivityResourceGroupSerNavigation)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKResourceGroup_Activity");

            entity.HasOne(d => d.TreatmentCycleSerNavigation).WithMany(p => p.Activity).HasConstraintName("FKTreatmentCycle_Activity");

            entity.HasOne(d => d.UpdCpescalationGroupSerNavigation).WithMany(p => p.ActivityUpdCpescalationGroupSerNavigation).HasConstraintName("FKResourceGroup_Activity4");

            entity.HasOne(d => d.UpdCpresourceGroupSerNavigation).WithMany(p => p.ActivityUpdCpresourceGroupSerNavigation).HasConstraintName("FKResourceGroup_Activity3");
        });

        modelBuilder.Entity<ActivityAssociation>(entity =>
        {
            entity.HasKey(e => e.ActivityAssociationSer)
                .HasName("XPKEventNameAsscTask")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ActivityAssociation");
                    tb.HasTrigger("tU_ActivityAssociation");
                });

            entity.Property(e => e.ActivityAssociationSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.NonSchedulableActivitySerNavigation).WithMany(p => p.ActivityAssociationNonSchedulableActivitySerNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKActivity_ActivityAssociation1");

            entity.HasOne(d => d.SchedulableActivitySerNavigation).WithMany(p => p.ActivityAssociationSchedulableActivitySerNavigation).HasConstraintName("FKActivity_ActivityAssociation2");
        });

        modelBuilder.Entity<ActivityAttribute>(entity =>
        {
            entity.HasKey(e => e.ActivityAttributeSer).HasName("XPKActivityAttribute");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ActivityAttribute");
                    tb.HasTrigger("tI_ActivityAttribute");
                    tb.HasTrigger("tU_ActivityAttribute");
                });

            entity.Property(e => e.ActivityAttributeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivitySerNavigation).WithMany(p => p.ActivityAttribute).HasConstraintName("FKActivity_ActivityAttribute");

            entity.HasOne(d => d.UserDefActAttrSerNavigation).WithMany(p => p.ActivityAttribute)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKUserDefActAttr_ActivivtyAttribute");
        });

        modelBuilder.Entity<ActivityAttributeMh>(entity =>
        {
            entity.HasKey(e => new { e.ActivityAttributeSer, e.ActivityAttributeRevCount }).HasName("XPKActivityAttributeMH");

            entity.ToTable("ActivityAttributeMH", tb =>
                {
                    tb.HasTrigger("tD_ActivityAttributeMH");
                    tb.HasTrigger("tI_ActivityAttributeMH");
                    tb.HasTrigger("tU_ActivityAttributeMH");
                });

            
                
                

            entity.HasOne(d => d.ActivityAttributeSerNavigation).WithMany(p => p.ActivityAttributeMh).HasConstraintName("FKActivityAttribute_ActivityAttributeMH");
        });

        modelBuilder.Entity<ActivityCapture>(entity =>
        {
            entity.HasKey(e => e.ActivityCaptureSer).HasName("XPKActivityCapture");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ActivityCapture");
                    tb.HasTrigger("tI_ActivityCapture");
                    tb.HasTrigger("tU_ActivityCapture");
                });

            entity.Property(e => e.ActivityCaptureSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityInstanceSerNavigation).WithMany(p => p.ActivityCapture)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKActivityInstance_ActivityCapture");

            entity.HasOne(d => d.AttendingOncologistSerNavigation).WithMany(p => p.ActivityCapture).HasConstraintName("FKDoctor_ActivityCapture2");

            entity.HasOne(d => d.CourseSerNavigation).WithMany(p => p.ActivityCapture).HasConstraintName("FKCourse_ActivityCapture");

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.ActivityCapture).HasConstraintName("FKDepartment_ActivityCapture");

            entity.HasOne(d => d.PayorSerNavigation).WithMany(p => p.ActivityCapture).HasConstraintName("FKPayor_ActivityCapture");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.ActivityCapture).HasConstraintName("FKDoctor_ActivityCapture1");
        });

        modelBuilder.Entity<ActivityCaptureAttribute>(entity =>
        {
            entity.HasKey(e => e.ActivityCaptureAttributeSer).HasName("XPKActivityCaptureAttribute");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ActivityCaptureAttribute");
                    tb.HasTrigger("tI_ActivityCaptureAttribute");
                    tb.HasTrigger("tU_ActivityCaptureAttribute");
                });

            entity.Property(e => e.ActivityCaptureAttributeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityAttributeSerNavigation).WithMany(p => p.ActivityCaptureAttribute).HasConstraintName("FKActivityAttribute_ActivityCaptureAttribute");

            entity.HasOne(d => d.ActivityCaptureSerNavigation).WithMany(p => p.ActivityCaptureAttribute).HasConstraintName("FKActivityCapture_ActivityCaptureAttribute");
        });

        modelBuilder.Entity<ActivityCaptureAttributeMh>(entity =>
        {
            entity.HasKey(e => new { e.ActivityCaptureAttributeSer, e.ActivityCaptureAttrRevCount }).HasName("XPKActivityCaptureAttributeMH");

            entity.ToTable("ActivityCaptureAttributeMH", tb =>
                {
                    tb.HasTrigger("tD_ActivityCaptureAttributeMH");
                    tb.HasTrigger("tI_ActivityCaptureAttributeMH");
                    tb.HasTrigger("tU_ActivityCaptureAttributeMH");
                });

            
                
                

            entity.HasOne(d => d.ActivityCaptureAttributeSerNavigation).WithMany(p => p.ActivityCaptureAttributeMh).HasConstraintName("FKActivityCaptureAttribute_ActivityCaptureAttributeMH");
        });

        modelBuilder.Entity<ActivityCaptureMh>(entity =>
        {
            entity.HasKey(e => new { e.ActivityCaptureSer, e.ActivityCaptureRevCount })
                .HasName("XPKActivityCaptureMH")
                .IsClustered(false);

            entity.ToTable("ActivityCaptureMH", tb =>
                {
                    tb.HasTrigger("tD_ActivityCaptureMH");
                    tb.HasTrigger("tI_ActivityCaptureMH");
                    tb.HasTrigger("tU_ActivityCaptureMH");
                });

            
                
                

            entity.HasOne(d => d.ActivityCaptureSerNavigation).WithMany(p => p.ActivityCaptureMh).HasConstraintName("FKActivityCapture_ActivityCaptureMH");
        });

        modelBuilder.Entity<ActivityCategory>(entity =>
        {
            entity.HasKey(e => e.ActivityCategorySer).HasName("XPKEventType");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ActivityCategory");
                    tb.HasTrigger("tI_ActivityCategory");
                    tb.HasTrigger("tU_ActivityCategory");
                });

            entity.Property(e => e.ActivityCategorySer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.ActivityCategory).HasConstraintName("FKDepartment_ActivityCategory");
        });

        modelBuilder.Entity<ActivityChecklistItem>(entity =>
        {
            entity.HasKey(e => e.ActivityChecklistItemSer).HasName("XPKActivityChecklistItem");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ActivityChecklistItem");
                    tb.HasTrigger("tU_ActivityChecklistItem");
                });

            entity.Property(e => e.ActivityChecklistItemSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivitySerNavigation).WithMany(p => p.ActivityChecklistItem).HasConstraintName("Activity_ActivityChecklistItem");

            entity.HasOne(d => d.ChecklistItemSerNavigation).WithMany(p => p.ActivityChecklistItem).HasConstraintName("FKChecklistItem_ActivityChecklistItem");
        });

        modelBuilder.Entity<ActivityCodeMd>(entity =>
        {
            entity.HasKey(e => e.ModifierSer).HasName("XPKActivityCodeMod");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ActivityCodeMd");
                    tb.HasTrigger("tI_ActivityCodeMd");
                    tb.HasTrigger("tU_ActivityCodeMd");
                });

            entity.Property(e => e.ModifierSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<ActivityCodeMdMh>(entity =>
        {
            entity.HasKey(e => new { e.ModifierSer, e.ActivityCodeMdRevCount }).HasName("XPKActivityCodeModMH");

            entity.ToTable("ActivityCodeMdMH", tb =>
                {
                    tb.HasTrigger("tD_ActivityCodeMdMH");
                    tb.HasTrigger("tI_ActivityCodeMdMH");
                    tb.HasTrigger("tU_ActivityCodeMdMH");
                });

            
                
                

            entity.HasOne(d => d.ModifierSerNavigation).WithMany(p => p.ActivityCodeMdMh).HasConstraintName("FKActivityCodeMd_ActivityCodeMdMH");
        });

        modelBuilder.Entity<ActivityInstance>(entity =>
        {
            entity.HasKey(e => e.ActivityInstanceSer).HasName("XPKActivityInstance");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ActivityInstance");
                    tb.HasTrigger("tI_ActivityInstance");
                    tb.HasTrigger("tU_ActivityInstance");
                });

            entity.Property(e => e.ActivityInstanceSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivitySerNavigation).WithMany(p => p.ActivityInstance)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKActivity_ActivityInstance");

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.ActivityInstance).HasConstraintName("FKDepartment_ActivityInstance");

            entity.HasOne(d => d.LastNoteUpdatedByResourceSerNavigation).WithMany(p => p.ActivityInstanceLastNoteUpdatedByResourceSerNavigation).HasConstraintName("FKResource_ActivityInstance2");

            entity.HasOne(d => d.LastStatusUpdatedByResourceSerNavigation).WithMany(p => p.ActivityInstanceLastStatusUpdatedByResourceSerNavigation).HasConstraintName("FKResource_ActivityInstance1");

            entity.HasOne(d => d.PredecessorSerNavigation).WithMany(p => p.InversePredecessorSerNavigation).HasConstraintName("FKActivityInstance_ActivityInstance");

            entity.HasOne(d => d.StudySerNavigation).WithMany(p => p.ActivityInstance)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKStudy_ActivityInstance");

            entity.HasOne(d => d.TemplateCycleSerNavigation).WithMany(p => p.ActivityInstance)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKTemplateCycle_ActivityInstance");

            entity.HasOne(d => d.WorkFlowOverrideByResourceSerNavigation).WithMany(p => p.ActivityInstanceWorkFlowOverrideByResourceSerNavigation).HasConstraintName("FKResource_ActivityInstance");
        });

        modelBuilder.Entity<ActivityInstanceLink>(entity =>
        {
            entity.HasKey(e => e.ActivityInstanceLinkSer).HasName("XPKActivityInstanceLink");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ActivityInstanceLink");
                    tb.HasTrigger("tI_ActivityInstanceLink");
                    tb.HasTrigger("tU_ActivityInstanceLink");
                });

            entity.Property(e => e.ActivityInstanceLinkSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityInstanceSerNavigation).WithMany(p => p.ActivityInstanceLinkActivityInstanceSerNavigation).HasConstraintName("ActivityInstance_ActivityInstanceLink1");

            entity.HasOne(d => d.PredecessorSerNavigation).WithMany(p => p.ActivityInstanceLinkPredecessorSerNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ActivityInstance_ActivityInstanceLink2");
        });

        modelBuilder.Entity<ActivityInstanceLinkMh>(entity =>
        {
            entity.HasKey(e => new { e.ActivityInstanceLinkSer, e.ActivityInstanceLinkRevCount }).HasName("XPKActivityInstanceLinkMH");

            entity.ToTable("ActivityInstanceLinkMH", tb =>
                {
                    tb.HasTrigger("tD_ActivityInstanceLinkMH");
                    tb.HasTrigger("tI_ActivityInstanceLinkMH");
                    tb.HasTrigger("tU_ActivityInstanceLinkMH");
                });

            
                
                

            entity.HasOne(d => d.ActivityInstanceLinkSerNavigation).WithMany(p => p.ActivityInstanceLinkMh).HasConstraintName("FKActivityInstanceLink_ActivityInstanceLinkMH");
        });

        modelBuilder.Entity<ActivityInstanceMh>(entity =>
        {
            entity.HasKey(e => new { e.ActivityInstanceSer, e.ActivityInstanceRevCount })
                .HasName("XPKActivityInstanceMH")
                .IsClustered(false);

            entity.ToTable("ActivityInstanceMH", tb =>
                {
                    tb.HasTrigger("tD_ActivityInstanceMH");
                    tb.HasTrigger("tI_ActivityInstanceMH");
                    tb.HasTrigger("tU_ActivityInstanceMH");
                });

            
                
                

            entity.HasOne(d => d.ActivityInstanceSerNavigation).WithMany(p => p.ActivityInstanceMh).HasConstraintName("FKActivivtyInstance_ActivityInstanceMH");
        });

        modelBuilder.Entity<ActivityMh>(entity =>
        {
            entity.HasKey(e => new { e.ActivitySer, e.ActivityRevCount }).HasName("XPKActivityMH");

            entity.ToTable("ActivityMH", tb =>
                {
                    tb.HasTrigger("tD_ActivityMH");
                    tb.HasTrigger("tI_ActivityMH");
                    tb.HasTrigger("tU_ActivityMH");
                });

            entity.Property(e => e.ForeGroundColor).IsFixedLength();
            
                
                

            entity.HasOne(d => d.ActivitySerNavigation).WithMany(p => p.ActivityMh).HasConstraintName("FKActivity_ActivityMH");
        });

        modelBuilder.Entity<ActivityPttrn>(entity =>
        {
            entity.HasKey(e => e.ActivityPttrnSer)
                .HasName("XPKActivityPttrn")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ActivityPttrn");
                    tb.HasTrigger("tI_ActivityPttrn");
                    tb.HasTrigger("tU_ActivityPttrn");
                });

            entity.Property(e => e.ActivityPttrnSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivitySerNavigation).WithMany(p => p.ActivityPttrn).HasConstraintName("FKActivity_ActivityPttrn");

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.ActivityPttrn).HasConstraintName("FKDepartment_ActivityPttrn");
        });

        modelBuilder.Entity<ActivityPttrnPerCycle>(entity =>
        {
            entity.HasKey(e => e.ActivityPttrnPerCycleSer)
                .HasName("XPKActivityPttrnPC")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ActivityPttrnPerCycle");
                    tb.HasTrigger("tI_ActivityPttrnPerCycle");
                    tb.HasTrigger("tU_ActivityPttrnPerCycle");
                });

            entity.Property(e => e.ActivityPttrnPerCycleSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityPttrnSerNavigation).WithMany(p => p.ActivityPttrnPerCycle).HasConstraintName("FKActivityPttrn_ActivityPttrnPerCycle");
        });

        modelBuilder.Entity<ActivityPttrnResrc>(entity =>
        {
            entity.HasKey(e => new { e.ActivityPttrnSer, e.ResourceSer })
                .HasName("XPKEventPttrnScndResrc")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ActivityPttrnResrc");
                    tb.HasTrigger("tU_ActivityPttrnResrc");
                });

            
                
                

            entity.HasOne(d => d.ActivityPttrnSerNavigation).WithMany(p => p.ActivityPttrnResrc).HasConstraintName("FKActivtyPttrn_ActivtyPttrnResrc");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.ActivityPttrnResrc).HasConstraintName("FKResource_ActivityPttrnResrc");
        });

        modelBuilder.Entity<ActivityPttrnToSchedActivity>(entity =>
        {
            entity.HasKey(e => new { e.ScheduledActivitySer, e.ActivityPttrnPerCycleSer }).HasName("XPKActivityPttrnToSchedActivit");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ActivityPttrnToSchedActivit");
                    tb.HasTrigger("tU_ActivityPttrnToSchedActivit");
                });

            
                
                

            entity.HasOne(d => d.ActivityPttrnPerCycleSerNavigation).WithMany(p => p.ActivityPttrnToSchedActivity).HasConstraintName("FKActivityPttrnPerCycle_ActivityPttrnToSchedActivity");

            entity.HasOne(d => d.ScheduledActivitySerNavigation).WithMany(p => p.ActivityPttrnToSchedActivity).HasConstraintName("FKScheduledActivity_ActivityPttrnToSchedActivity");
        });

        modelBuilder.Entity<ActivitySession>(entity =>
        {
            entity.HasKey(e => new { e.ScheduledActivitySer, e.SessionSer }).HasName("XPKEventTreatmentSession");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ActivitySession");
                    tb.HasTrigger("tU_ActivitySession");
                });

            
                
                

            entity.HasOne(d => d.ScheduledActivitySerNavigation).WithMany(p => p.ActivitySession).HasConstraintName("FKScheduledActivity_ActivitySession");

            entity.HasOne(d => d.SessionSerNavigation).WithMany(p => p.ActivitySession).HasConstraintName("FKSession_ActivitySession");
        });

        modelBuilder.Entity<ActivityToProcedureCode>(entity =>
        {
            entity.HasKey(e => new { e.ActivitySer, e.ProcedureCodeSer }).HasName("XPKActivityToProcedureCode");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ActivityToProcedureCode");
                    tb.HasTrigger("tU_ActivityToProcedureCode");
                });

            
                
                

            entity.HasOne(d => d.ActivitySerNavigation).WithMany(p => p.ActivityToProcedureCode).HasConstraintName("FKActivity_ActivityToProcedureCode");

            entity.HasOne(d => d.ProcedureCodeSerNavigation).WithMany(p => p.ActivityToProcedureCode).HasConstraintName("FKProcedureCode_ActivityToProcedureCode");
        });

        modelBuilder.Entity<ActivityToProcedureItem>(entity =>
        {
            entity.HasKey(e => e.ActivityToProcedureItemSer).HasName("XPKActivityToProcedureItem");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ActivityToProcedureItem");
                    tb.HasTrigger("tU_ActivityToProcedureItem");
                });

            entity.Property(e => e.ActivityToProcedureItemSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivitySerNavigation).WithMany(p => p.ActivityToProcedureItem).HasConstraintName("FKActivity_ActivityToProcedureItem");

            entity.HasOne(d => d.ProcedureItemSerNavigation).WithMany(p => p.ActivityToProcedureItem).HasConstraintName("FKProcedureItem_ActivityToProcedureItem");
        });

        modelBuilder.Entity<ActtyCatgryResrcType>(entity =>
        {
            entity.HasKey(e => e.ActtyCatgryResrcTypeSer)
                .HasName("XPKEventTypeResourceType")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ActtyCatgryResrcType");
                    tb.HasTrigger("tU_ActtyCatgryResrcType");
                });

            entity.Property(e => e.ActtyCatgryResrcTypeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityCategorySerNavigation).WithMany(p => p.ActtyCatgryResrcType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKActivityCategory_ActtyCatgryResrcType");

            entity.HasOne(d => d.ResourceTypeNumNavigation).WithMany(p => p.ActtyCatgryResrcType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKResourceType_ActtyCatgryResrcType");
        });

        modelBuilder.Entity<AddOn>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKAddOn");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_AddOn");
                    tb.HasTrigger("tI_AddOn");
                    tb.HasTrigger("tU_AddOn");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.AddOnMaterialSerNavigation).WithMany(p => p.AddOn).HasConstraintName("FKAddOnMaterial_AddOn");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.AddOn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKExternalBeam_AddOn");
        });

        modelBuilder.Entity<AddOnMaterial>(entity =>
        {
            entity.HasKey(e => e.AddOnMaterialSer).HasName("XPKAddOnMaterial");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_AddOnMaterial");
                    tb.HasTrigger("tU_AddOnMaterial");
                });

            entity.Property(e => e.AddOnMaterialSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<AddOnValidation>(entity =>
        {
            entity.HasKey(e => new { e.ConfiguredEmtser, e.AddOnSer }).HasName("XPKAddOnValidation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_AddOnValidation");
                    tb.HasTrigger("tU_AddOnValidation");
                });

            
                
                

            entity.HasOne(d => d.AddOnSerNavigation).WithMany(p => p.AddOnValidation).HasConstraintName("FKAddOn_AddOnValidation");

            entity.HasOne(d => d.ConfiguredEmtserNavigation).WithMany(p => p.AddOnValidation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKConfiguredEMT_AddOnValidation");
        });

        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.AddressSer).HasName("XPKAddress");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Address");
                    tb.HasTrigger("tI_Address");
                    tb.HasTrigger("tU_Address");
                });

            entity.Property(e => e.AddressSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<AddressCd>(entity =>
        {
            entity.HasKey(e => new { e.AddressCd1, e.StkhCd }).HasName("pkaddress_cd");

            entity.Property(e => e.AddressCd1).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.AddressCdDesc).IsFixedLength();
            entity.Property(e => e.DfltInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AdmitCls>(entity =>
        {
            entity.HasKey(e => e.AdmitCls1).HasName("pkadmit_cls");

            entity.Property(e => e.AdmitCls1).ValueGeneratedNever();
            entity.Property(e => e.AdmitClsCd).IsFixedLength();
            entity.Property(e => e.AdmitClsDesc).IsFixedLength();
            entity.Property(e => e.AdmitClsDsp).IsFixedLength();
            entity.Property(e => e.AdmitClsInd).IsFixedLength();
            entity.Property(e => e.InpatientInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AdmitPgm>(entity =>
        {
            entity.HasKey(e => new { e.PgmInstId, e.PgmId }).HasName("pkadmit_pgm");

            entity.Property(e => e.PgmInstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.PgmCd).IsFixedLength();
            entity.Property(e => e.PgmDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AdmnDoseFrqUnit>(entity =>
        {
            entity.HasKey(e => e.AdmnDoseFrqUnit1).HasName("pkadmn_dose_frq_unit");

            entity.Property(e => e.AdmnDoseFrqUnit1).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.AdmnDoseFrqDesc).IsFixedLength();
            entity.Property(e => e.LongDesc).IsFixedLength();
            entity.Property(e => e.ShortDesc).IsFixedLength();
            entity.Property(e => e.TimeSpecificInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AdmnDow>(entity =>
        {
            entity.HasKey(e => new { e.DowFrqUnit, e.AdmnDow1 }).HasName("pkadmn_dow");

            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.DowFrqUnitNavigation).WithMany(p => p.AdmnDow)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_dow_admn");
        });

        modelBuilder.Entity<AdmnFrqHhmm>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AdmnFrqCd, e.AdmnFrqX, e.AdmnSeqNo }).HasName("pkadmn_frq_hhmm");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AdmnHhmm).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AdmnFrqCdNavigation).WithMany(p => p.AdmnFrqHhmm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_admn_frq_hhmm");
        });

        modelBuilder.Entity<AdmnRoute>(entity =>
        {
            entity.HasKey(e => e.AdmnRoute1).HasName("pkadmn_route");

            entity.Property(e => e.AdmnRoute1).ValueGeneratedNever();
            entity.Property(e => e.AdmnRouteDesc).IsFixedLength();
            entity.Property(e => e.ComboRouteInd).IsFixedLength();
            entity.Property(e => e.DspDesc).IsFixedLength();
            entity.Property(e => e.Hl7AdmnRoute).IsFixedLength();
            entity.Property(e => e.InfusibleInd).IsFixedLength();
            entity.Property(e => e.MediAdmnRoute).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AdmnRouteBill>(entity =>
        {
            entity.HasKey(e => e.AdmnRouteBillId).HasName("pkadmn_route_bill");

            entity.Property(e => e.AdmnRouteBillId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.BillRouteGrp).IsFixedLength();
            entity.Property(e => e.ConcurCd).IsFixedLength();
            entity.Property(e => e.PartlyNonConcurInd).IsFixedLength();
            entity.Property(e => e.TimeBasedBillInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AdmnRouteExtDrugDb>(entity =>
        {
            entity.HasKey(e => new { e.AdmnRoute, e.ExtDrugDbId }).HasName("pkadmn_route_ext_drug_db");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AdmnRouteNavigation).WithMany(p => p.AdmnRouteExtDrugDb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_admn_route_ext_drug_db");

            entity.HasOne(d => d.ExtDrugDb).WithMany(p => p.AdmnRouteExtDrugDb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_admn_route_ext_drug_db");
        });

        modelBuilder.Entity<AdmnSite>(entity =>
        {
            entity.HasKey(e => e.AdmnSiteId).HasName("pkadmn_site");

            entity.Property(e => e.AdmnSiteId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BaseTypNavigation).WithMany(p => p.AdmnSite)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_admn_site");
        });

        modelBuilder.Entity<Adt08>(entity =>
        {
            entity.HasKey(e => e.Adt08ser)
                .HasName("XPKADT08")
                .IsClustered(false);

            entity.ToTable("ADT08", tb =>
                {
                    tb.HasTrigger("tI_ADT08");
                    tb.HasTrigger("tU_ADT08");
                });

            entity.Property(e => e.Adt08ser).ValueGeneratedNever();
            
                
                
            entity.Property(e => e.Sex).IsFixedLength();

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.Adt08)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_ADT08");
        });

        modelBuilder.Entity<AgendaCatTyp>(entity =>
        {
            entity.HasKey(e => e.CatNameTyp).HasName("pkagenda_cat_typ");

            entity.Property(e => e.CatNameTyp).ValueGeneratedNever();
            entity.Property(e => e.AgendaInitInd).IsFixedLength();
            entity.Property(e => e.CatDesc).IsFixedLength();
            entity.Property(e => e.CatTyp).IsFixedLength();
            entity.Property(e => e.CustCatInd).IsFixedLength();
            entity.Property(e => e.PermitDelInd).IsFixedLength();
            entity.Property(e => e.TaskInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.VisibleInd).IsFixedLength();
            entity.Property(e => e.VisibleReqInd).IsFixedLength();
        });

        modelBuilder.Entity<AgendaStatusTyp>(entity =>
        {
            entity.HasKey(e => new { e.CatNameTyp, e.CatStatus }).HasName("pkagenda_status_typ");

            entity.Property(e => e.CatDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AgendaTask>(entity =>
        {
            entity.HasKey(e => e.AgendaTaskId).HasName("pkagenda_task");

            entity.Property(e => e.AgendaTaskId).ValueGeneratedNever();
            entity.Property(e => e.Description).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AgendaTemplate>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AgendaTemplateId }).HasName("pkagenda_template");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.Description).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgendaTemplateGroup>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AgendaTemplateId, e.AgendaTemplateGroupId }).HasName("pkagenda_template_group");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.Description).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgendaTemplate).WithMany(p => p.AgendaTemplateGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_agenda_template_group");
        });

        modelBuilder.Entity<AgendaTemplateTask>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AgendaTemplateId, e.AgendaTemplateTaskId }).HasName("pkagenda_template_task");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.Description).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgendaTask).WithMany(p => p.AgendaTemplateTask)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_agenda_template_task");

            entity.HasOne(d => d.AgendaTemplate).WithMany(p => p.AgendaTemplateTask)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_agenda_template_task");

            entity.HasOne(d => d.AgendaTemplateGroup).WithMany(p => p.AgendaTemplateTask)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_agenda_template_task");
        });

        modelBuilder.Entity<AgendaTemplateTaskUser>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.UserInstId, e.InstId, e.AgendaTemplateId, e.AgendaTemplateTaskId }).HasName("pkagenda_template_task_user");

            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.UseridNavigation).WithMany(p => p.AgendaTemplateTaskUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_agenda_template_task_user");

            entity.HasOne(d => d.AgendaTemplateTask).WithMany(p => p.AgendaTemplateTaskUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_agenda_template_task_user");
        });

        modelBuilder.Entity<AgtBill>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AgtBillId }).HasName("pkagt_bill");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.FixedQtyInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtContraInd>(entity =>
        {
            entity.HasKey(e => new { e.AgtName, e.AgtContraIndId }).HasName("pkagt_contra_ind");

            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.AgtContraDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgtContraIndTypNavigation).WithMany(p => p.AgtContraInd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_agt_contra_ind");

            entity.HasOne(d => d.AgtNameNavigation).WithMany(p => p.AgtContraInd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_agt_contra_ind");
        });

        modelBuilder.Entity<AgtContraIndTyp>(entity =>
        {
            entity.HasKey(e => e.ContraIndTyp).HasName("pkagt_contra_ind_typ");

            entity.Property(e => e.ContraIndTyp).ValueGeneratedNever();
            entity.Property(e => e.ContraIndDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtDosage>(entity =>
        {
            entity.HasKey(e => new { e.AgtName, e.DosageForm, e.DoseLevel }).HasName("pkagt_dosage");

            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.BsaDoseFlag).IsFixedLength();
            entity.Property(e => e.TakeAsDirectedInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgtNameNavigation).WithMany(p => p.AgtDosage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_agt_dosage");

            entity.HasOne(d => d.DosageFormNavigation).WithMany(p => p.AgtDosage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_agt_dosage");

            entity.HasOne(d => d.DoseLevelNavigation).WithMany(p => p.AgtDosage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_agt_dosage");

            entity.HasOne(d => d.DoseRoundMthdNavigation).WithMany(p => p.AgtDosage).HasConstraintName("fk4_agt_dosage");

            entity.HasOne(d => d.UomNavigation).WithMany(p => p.AgtDosage).HasConstraintName("fk5_agt_dosage");
        });

        modelBuilder.Entity<AgtDxReq>(entity =>
        {
            entity.HasKey(e => new { e.AgtName, e.InstId, e.AgtDxReqGroupId }).HasName("pkagt_dx_req");

            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtDxReqGroup>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AgtDxReqGroupId, e.AgtDxReqCompId }).HasName("pkagt_dx_req_group");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.FromIcdCd).IsFixedLength();
            entity.Property(e => e.ToIcdCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtFormulary>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AgtFormularyId }).HasName("pkagt_formulary");

            entity.ToTable("agt_formulary", tb => tb.HasTrigger("tU_agt_formulary"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.Concentration).IsFixedLength();
            entity.Property(e => e.DefaultConcentrationInd).IsFixedLength();
            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.InstDrugCd).IsFixedLength();
            entity.Property(e => e.PnInstId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.Strength).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UnitOfMeasure).IsFixedLength();
            entity.Property(e => e.UpperAgtName).IsFixedLength();
            entity.Property(e => e.UpperInstDrugCd).IsFixedLength();

            entity.HasOne(d => d.PnTemplate).WithMany(p => p.AgtFormulary).HasConstraintName("FK_agt_formulary_pn_template");
        });

        modelBuilder.Entity<AgtFormularyDispLocMap>(entity =>
        {
            entity.HasKey(e => e.AgtFormularyDispLocMapId).HasName("pkagt_formulary_disp_loc_map");

            entity.Property(e => e.AgtFormularyDispLocMapId).ValueGeneratedNever();
            entity.Property(e => e.AgtFormularyDispLocId).IsFixedLength();
            entity.Property(e => e.MappingCd).IsFixedLength();
            entity.Property(e => e.MappingTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgtFormularyDispLoc).WithMany(p => p.AgtFormularyDispLocMap)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_agt_formulary_disp_loc_map");
        });

        modelBuilder.Entity<AgtFormularyDoseBand>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AgtFormularyId, e.DoseBandId }).HasName("pkagt_formulary_dose_band");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtFormularyGroup>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AgtFormularyGroupId }).HasName("pkagt_formulary_group");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AgtFormularyGroupDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtFormularyGroupAgt>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AgtFormularyGroupId, e.AgtFormularyId }).HasName("pkagt_formulary_group_agt");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgtFormularyGroup).WithMany(p => p.AgtFormularyGroupAgt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_agt_formulary_group_agt");

            entity.HasOne(d => d.AgtFormulary).WithMany(p => p.AgtFormularyGroupAgt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_agt_formulary_group_agt");
        });

        modelBuilder.Entity<AgtFormularyLblDtl>(entity =>
        {
            entity.HasKey(e => e.AgtFormularyLblDtlId).HasName("pkagt_formulary_lbl_dtl");

            entity.Property(e => e.AgtFormularyLblDtlId).ValueGeneratedNever();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.Strength).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtGrp>(entity =>
        {
            entity.HasKey(e => e.AgtGrpId).HasName("pkagt_grp");

            entity.Property(e => e.AgtGrpId).ValueGeneratedNever();
            entity.Property(e => e.AgtGrpDesc).IsFixedLength();
            entity.Property(e => e.PnInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PnTemplate).WithMany(p => p.AgtGrp).HasConstraintName("FK_agt_grp_pn_template");
        });

        modelBuilder.Entity<AgtGrpAgt>(entity =>
        {
            entity.HasKey(e => e.AgtGrpAgtId).HasName("pkagt_grp_agt");

            entity.Property(e => e.AgtGrpAgtId).ValueGeneratedNever();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtInfo>(entity =>
        {
            entity.HasKey(e => e.AgtInfoId).HasName("pkagt_info");

            entity.Property(e => e.AgtInfoId).ValueGeneratedNever();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtLookup>(entity =>
        {
            entity.HasKey(e => new { e.DrugDescId, e.AgtLookupTypId }).HasName("pkagt_lookup");

            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.ExternalCd).IsFixedLength();
            entity.Property(e => e.FullName).IsFixedLength();
            entity.Property(e => e.ShortName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgtLookupTyp).WithMany(p => p.AgtLookup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_agt_lookup");
        });

        modelBuilder.Entity<AgtLookupTyp>(entity =>
        {
            entity.HasKey(e => e.AgtLookupTypId).HasName("pkagt_lookup_typ");

            entity.Property(e => e.AgtLookupTypId).ValueGeneratedNever();
            entity.Property(e => e.AgtLookupTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtManufacturer>(entity =>
        {
            entity.HasKey(e => e.AgtManufacturerId).HasName("pkagt_manufacturer_id");

            entity.Property(e => e.AgtManufacturerId).ValueGeneratedNever();
            entity.Property(e => e.FullName).IsFixedLength();
            entity.Property(e => e.ManufacturerGrp).IsFixedLength();
            entity.Property(e => e.ManufacturerName).IsFixedLength();
            entity.Property(e => e.MvxCode).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtName>(entity =>
        {
            entity.HasKey(e => e.AgtName1).HasName("pkagt_name");

            entity.Property(e => e.AgtName1).IsFixedLength();
            entity.Property(e => e.AgtCategory).IsFixedLength();
            entity.Property(e => e.MediActiveInd).IsFixedLength();
            entity.Property(e => e.MediDrugName).IsFixedLength();
            entity.Property(e => e.PerMeterSq).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgtTypNavigation).WithMany(p => p.AgtName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_agt_name");
        });

        modelBuilder.Entity<AgtNameTrans>(entity =>
        {
            entity.HasKey(e => e.AgtName).HasName("pkagt_name_trans");

            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.AgtClsDesc).IsFixedLength();
            entity.Property(e => e.AgtNameAbrv).IsFixedLength();
            entity.Property(e => e.CustomBillTypInd).IsFixedLength();
            entity.Property(e => e.MediDrugName).IsFixedLength();
            entity.Property(e => e.PrefAgtName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpperAgtName).IsFixedLength();
        });

        modelBuilder.Entity<AgtNote>(entity =>
        {
            entity.HasKey(e => new { e.AgtName, e.AgtNoteTyp }).HasName("pkagt_note");

            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgtNameNavigation).WithMany(p => p.AgtNote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_agt_note");

            entity.HasOne(d => d.AgtNoteTypNavigation).WithMany(p => p.AgtNote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_agt_note");
        });

        modelBuilder.Entity<AgtNoteTyp>(entity =>
        {
            entity.HasKey(e => e.AgtNoteTyp1).HasName("pkagt_note_typ");

            entity.Property(e => e.AgtNoteTyp1).ValueGeneratedNever();
            entity.Property(e => e.AgtNoteDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtRx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RxId, e.ItemNo }).HasName("pkagt_rx");

            entity.ToTable("agt_rx", tb =>
                {
                    tb.HasTrigger("tD_agt_rx");
                    tb.HasTrigger("tU_agt_rx");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AdHocActiveEntryInd).IsFixedLength();
            entity.Property(e => e.AdmnDoseChangeInd).IsFixedLength();
            entity.Property(e => e.AgtLevelStatus).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.AgtStatus).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.Concentration)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.ContinueRxInd).IsFixedLength();
            entity.Property(e => e.DispDoseLevelInd).IsFixedLength();
            entity.Property(e => e.DispensedInd).IsFixedLength();
            entity.Property(e => e.DoseRecInd).IsFixedLength();
            entity.Property(e => e.DoseStrength).IsFixedLength();
            entity.Property(e => e.DrugCls).IsFixedLength();
            entity.Property(e => e.DrugLotNo).IsFixedLength();
            entity.Property(e => e.FormularyCheckedInd).IsFixedLength();
            entity.Property(e => e.HydraRateOvrideInstId).IsFixedLength();
            entity.Property(e => e.HydraRateOvrideTyp).IsFixedLength();
            entity.Property(e => e.InactivateInd).IsFixedLength();
            entity.Property(e => e.InstLastDoseChkUom).IsFixedLength();
            entity.Property(e => e.LastDoseStatusTyp).IsFixedLength();
            entity.Property(e => e.NdcCd).IsFixedLength();
            entity.Property(e => e.NotDispensedInd).IsFixedLength();
            entity.Property(e => e.OrderChgInd).IsFixedLength();
            entity.Property(e => e.OvrideDoseTimesInd).IsFixedLength();
            entity.Property(e => e.PreparedInd).IsFixedLength();
            entity.Property(e => e.PrnInd).IsFixedLength();
            entity.Property(e => e.PrnRepeatInd).IsFixedLength();
            entity.Property(e => e.RefillInd).IsFixedLength();
            entity.Property(e => e.Req).IsFixedLength();
            entity.Property(e => e.ReviewReqInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.RsnDesc).IsFixedLength();
            entity.Property(e => e.SubsAllowed).IsFixedLength();
            entity.Property(e => e.SyncDoseTimesInd).IsFixedLength();
            entity.Property(e => e.TakeAsDirectedInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.DispLoc).WithMany(p => p.AgtRx).HasConstraintName("fk4_agt_rx");

            entity.HasOne(d => d.InfusionTypNavigation).WithMany(p => p.AgtRx).HasConstraintName("fk3_agt_rx");
        });

        modelBuilder.Entity<AgtRxDisp>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RxId, e.ItemNo, e.DispId }).HasName("pkagt_rx_disp");

            entity.ToTable("agt_rx_disp", tb =>
                {
                    tb.HasTrigger("tD_agt_rx_disp");
                    tb.HasTrigger("tU_agt_rx_disp");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Concentration).IsFixedLength();
            entity.Property(e => e.CustomSyringeInd)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.DispAgtName).IsFixedLength();
            entity.Property(e => e.DispApprInd).IsFixedLength();
            entity.Property(e => e.DispByInstId).IsFixedLength();
            entity.Property(e => e.DispChgInd).IsFixedLength();
            entity.Property(e => e.DispCmt).IsFixedLength();
            entity.Property(e => e.DispDoseStrength).IsFixedLength();
            entity.Property(e => e.ExpiryDateCalcInd).IsFixedLength();
            entity.Property(e => e.FormularyCheckedInd).IsFixedLength();
            entity.Property(e => e.HydraRateOvrideInstId).IsFixedLength();
            entity.Property(e => e.HydraRateOvrideTyp).IsFixedLength();
            entity.Property(e => e.NotDispensedInd).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.PnInstId).IsFixedLength();
            entity.Property(e => e.PrepByInstId).IsFixedLength();
            entity.Property(e => e.PreparedInd).IsFixedLength();
            entity.Property(e => e.ReviewInd)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<AgtRxDispMh>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Concentration).IsFixedLength();
            entity.Property(e => e.CustomSyringeInd).IsFixedLength();
            entity.Property(e => e.DispAgtName).IsFixedLength();
            entity.Property(e => e.DispApprInd).IsFixedLength();
            entity.Property(e => e.DispByInstId).IsFixedLength();
            entity.Property(e => e.DispChgInd).IsFixedLength();
            entity.Property(e => e.DispCmt).IsFixedLength();
            entity.Property(e => e.DispDoseStrength).IsFixedLength();
            entity.Property(e => e.ExpiryDateCalcInd).IsFixedLength();
            entity.Property(e => e.FormularyCheckedInd).IsFixedLength();
            entity.Property(e => e.HydraRateOvrideInstId).IsFixedLength();
            entity.Property(e => e.HydraRateOvrideTyp).IsFixedLength();
            entity.Property(e => e.NotDispensedInd).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.PnInstId).IsFixedLength();
            entity.Property(e => e.PrepByInstId).IsFixedLength();
            entity.Property(e => e.PreparedInd).IsFixedLength();
            entity.Property(e => e.ReviewInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<AgtRxDispSyringe>(entity =>
        {
            entity.HasKey(e => new { e.SyringeId, e.SyringeSeqNo }).HasName("pkagt_rx_disp_syringe");

            entity.ToTable("agt_rx_disp_syringe", tb =>
                {
                    tb.HasTrigger("tD_agt_rx_disp_syringe");
                    tb.HasTrigger("tU_agt_rx_disp_syringe");
                });

            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtRxDispSyringeMh>(entity =>
        {
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtRxDoseVrtn>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RxId, e.ItemNo, e.DoseVrtnTyp }).HasName("pkagt_rx_dose_vrtn");

            entity.ToTable("agt_rx_dose_vrtn", tb =>
                {
                    tb.HasTrigger("tD_agt_rx_dose_vrtn");
                    tb.HasTrigger("tU_agt_rx_dose_vrtn");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtRxDoseVrtnMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RxId, e.ItemNo, e.DoseVrtnTyp, e.RevisionNo }).HasName("pkagt_rx_dose_vrtn_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtRxDxOvride>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RxId, e.ItemNo }).HasName("pkagt_rx_dx_ovride");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.OvrideInstId).IsFixedLength();
            entity.Property(e => e.OvrideRsnCmt).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtRxHxInstr>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.InstrId }).HasName("pkagt_rx_hx_instr");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.HxEntryInd).IsFixedLength();
            entity.Property(e => e.InstrInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AgtRxImmun>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RxId, e.ItemNo, e.CvxCd }).HasName("pkagt_rx_immun");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CvxCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgtRx).WithMany(p => p.AgtRxImmun)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_agt_rx_immun");
        });

        modelBuilder.Entity<AgtRxMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RxId, e.ItemNo, e.RevisionNo }).HasName("pkagt_rx_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AdHocActiveEntryInd).IsFixedLength();
            entity.Property(e => e.AdmnDoseChangeInd).IsFixedLength();
            entity.Property(e => e.AgtLevelStatus).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.AgtStatus).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.Concentration).IsFixedLength();
            entity.Property(e => e.ContinueRxInd).IsFixedLength();
            entity.Property(e => e.DispDoseLevelInd).IsFixedLength();
            entity.Property(e => e.DispensedInd).IsFixedLength();
            entity.Property(e => e.DoseRecInd).IsFixedLength();
            entity.Property(e => e.DoseStrength).IsFixedLength();
            entity.Property(e => e.DrugCls).IsFixedLength();
            entity.Property(e => e.DrugLotNo).IsFixedLength();
            entity.Property(e => e.FormularyCheckedInd).IsFixedLength();
            entity.Property(e => e.HydraRateOvrideInstId).IsFixedLength();
            entity.Property(e => e.HydraRateOvrideTyp).IsFixedLength();
            entity.Property(e => e.InactivateInd).IsFixedLength();
            entity.Property(e => e.InstLastDoseChkUom).IsFixedLength();
            entity.Property(e => e.LastDoseStatusTyp).IsFixedLength();
            entity.Property(e => e.NotDispensedInd).IsFixedLength();
            entity.Property(e => e.OrderChgInd).IsFixedLength();
            entity.Property(e => e.OvrideDoseTimesInd).IsFixedLength();
            entity.Property(e => e.PreparedInd).IsFixedLength();
            entity.Property(e => e.PrnInd).IsFixedLength();
            entity.Property(e => e.PrnRepeatInd).IsFixedLength();
            entity.Property(e => e.RefillInd).IsFixedLength();
            entity.Property(e => e.Req).IsFixedLength();
            entity.Property(e => e.ReviewReqInd).IsFixedLength();
            entity.Property(e => e.RsnDesc).IsFixedLength();
            entity.Property(e => e.SubsAllowed).IsFixedLength();
            entity.Property(e => e.SyncDoseTimesInd).IsFixedLength();
            entity.Property(e => e.TakeAsDirectedInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<AgtRxPharm>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.AgtRxPharmId }).HasName("pkagt_rx_pharm");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AgtFormularyInstId).IsFixedLength();
            entity.Property(e => e.CancelCmt).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.DoseLevelInd).IsFixedLength();
            entity.Property(e => e.IntfStatus).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DispLoc).WithMany(p => p.AgtRxPharm).HasConstraintName("fk2_agt_rx_pharm");
        });

        modelBuilder.Entity<AgtRxPharmXref>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.AgtRxPharmId, e.AdmnId }).HasName("pkagt_rx_pharm_xref");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgtRxPharm).WithMany(p => p.AgtRxPharmXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_agt_rx_pharm_xref");
        });

        modelBuilder.Entity<AgtTr>(entity =>
        {
            entity.HasKey(e => new { e.AgtName, e.TrTyp, e.TrCompName }).HasName("pkagt_tr");

            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TrCompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgtNameNavigation).WithMany(p => p.AgtTr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_agt_tr");

            entity.HasOne(d => d.TrCompNameNavigation).WithMany(p => p.AgtTr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_agt_tr");
        });

        modelBuilder.Entity<AgtTyp>(entity =>
        {
            entity.HasKey(e => e.AgtTyp1).HasName("pkagt_typ");

            entity.Property(e => e.AgtTyp1).ValueGeneratedNever();
            entity.Property(e => e.AgtTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AicPatient>(entity =>
        {
            entity.HasKey(e => new { e.Ekey, e.Area }).HasName("XPKAIC_Patient");
        });

        modelBuilder.Entity<AllergyDesc>(entity =>
        {
            entity.HasKey(e => e.AllergyDescId).HasName("pkallergy_desc");

            entity.Property(e => e.AllergyDescId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AllergyRespTyp>(entity =>
        {
            entity.HasKey(e => e.RespTyp).HasName("pkallergy_resp_typ");

            entity.Property(e => e.RespTyp).ValueGeneratedNever();
            entity.Property(e => e.RespDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AllergySeverity>(entity =>
        {
            entity.HasKey(e => e.SeverityId).HasName("pkallergy_severity");

            entity.Property(e => e.SeverityId).ValueGeneratedNever();
            entity.Property(e => e.SeverityCd).IsFixedLength();
            entity.Property(e => e.SeverityDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AllergyTyp>(entity =>
        {
            entity.HasKey(e => e.AllergyTyp1).HasName("pkallergy_typ");

            entity.Property(e => e.AllergyTyp1).ValueGeneratedNever();
            entity.Property(e => e.AllergyCd).IsFixedLength();
            entity.Property(e => e.AllergyDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<App>(entity =>
        {
            entity.HasKey(e => e.AppCd).HasName("pkapp");

            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AppBuildNo).IsFixedLength();
            entity.Property(e => e.AppName).IsFixedLength();
            entity.Property(e => e.AppVersNo).IsFixedLength();
            entity.Property(e => e.DspAppBuildNo).IsFixedLength();
            entity.Property(e => e.DspAppVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AppAccessTime>(entity =>
        {
            entity.HasKey(e => e.AccessTimeId).HasName("pkapp_access_time");

            entity.Property(e => e.AccessTimeId).ValueGeneratedNever();
            entity.Property(e => e.DayOfWeek).IsFixedLength();
            entity.Property(e => e.GroupInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UserGroupId).IsFixedLength();
        });

        modelBuilder.Entity<AppLevel>(entity =>
        {
            entity.HasKey(e => new { e.AppVersNo, e.AppBuildNo, e.AppLevelNo }).HasName("pkapp_level");

            entity.Property(e => e.AppVersNo).IsFixedLength();
            entity.Property(e => e.AppBuildNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.AppLevelTypNoNavigation).WithMany(p => p.AppLevel).HasConstraintName("fk1_app_level");
        });

        modelBuilder.Entity<AppLevelLog>(entity =>
        {
            entity.HasKey(e => new { e.AppVersNo, e.AppBuildNo, e.AppLevelNo, e.MachineName, e.TransLogTstamp }).HasName("pkapp_level_log");

            entity.Property(e => e.AppVersNo).IsFixedLength();
            entity.Property(e => e.AppBuildNo).IsFixedLength();
            entity.Property(e => e.MachineName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AppLevelTyp>(entity =>
        {
            entity.HasKey(e => e.AppLevelTypNo).HasName("pkapp_level_typ");

            entity.Property(e => e.AppLevelTypNo).ValueGeneratedNever();
            entity.Property(e => e.AppLevelFileExt).IsFixedLength();
            entity.Property(e => e.AppLevelTypDesc).IsFixedLength();
            entity.Property(e => e.AppLevelTypPath).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AppLevelXref>(entity =>
        {
            entity.HasKey(e => new { e.AppCd, e.AppLevelTypNo }).HasName("pkapp_level_xref");

            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.AppLevelXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_app_level_xref");

            entity.HasOne(d => d.AppLevelTypNoNavigation).WithMany(p => p.AppLevelXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_app_level_xref");
        });

        modelBuilder.Entity<AppMsg>(entity =>
        {
            entity.HasKey(e => new { e.MsgNo, e.LangTyp }).HasName("pkapp_msg");

            entity.Property(e => e.MsgNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AppMsgClsSeqNoNavigation).WithMany(p => p.AppMsg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_app_msg");

            entity.HasOne(d => d.AppMsgFmtSeqNoNavigation).WithMany(p => p.AppMsg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_app_msg");
        });

        modelBuilder.Entity<AppMsgCls>(entity =>
        {
            entity.HasKey(e => e.AppMsgClsSeqNo).HasName("pkapp_msg_cls");

            entity.Property(e => e.AppMsgClsSeqNo).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AppMsgDbms>(entity =>
        {
            entity.HasKey(e => new { e.Dbms, e.DbmsMsgNo }).HasName("pkapp_msg_dbms");

            entity.Property(e => e.Dbms).IsFixedLength();
            entity.Property(e => e.DbmsMsgNo).IsFixedLength();
            entity.Property(e => e.MsgNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AppMsgFmt>(entity =>
        {
            entity.HasKey(e => e.AppMsgFmtSeqNo).HasName("pkapp_msg_fmt");

            entity.Property(e => e.AppMsgFmtSeqNo).ValueGeneratedNever();
            entity.Property(e => e.MsgBtn1Txt).IsFixedLength();
            entity.Property(e => e.MsgBtn2Txt).IsFixedLength();
            entity.Property(e => e.MsgBtn3Txt).IsFixedLength();
            entity.Property(e => e.MsgIconName).IsFixedLength();
            entity.Property(e => e.MsgSerCd).IsFixedLength();
            entity.Property(e => e.ShowMsgNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AppMsgLog>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AppMsgLogId }).HasName("pkapp_msg_log");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.MsgNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AppObject>(entity =>
        {
            entity.HasKey(e => e.AppObjectSer).HasName("XPKScreenObject");

            entity.Property(e => e.AppObjectSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<AppTyp>(entity =>
        {
            entity.HasKey(e => new { e.AppCd, e.AppTyp1 }).HasName("pkapp_typ");

            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AppTyp1).IsFixedLength();
            entity.Property(e => e.AppTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.AppTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_app_typ");
        });

        modelBuilder.Entity<AppUser>(entity =>
        {
            entity.HasKey(e => e.AppUserSer).HasName("XPKAppUser");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_AppUser");
                    tb.HasTrigger("tI_AppUser");
                    tb.HasTrigger("tU_AppUser");
                });

            entity.Property(e => e.AppUserSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.Language).WithMany(p => p.AppUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKLanguageLookup_AppUser");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.AppUser)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKResource_AppUser");
        });

        modelBuilder.Entity<Application>(entity =>
        {
            entity.HasKey(e => e.ApplicationSer).HasName("XPKApplication");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Application");
                    tb.HasTrigger("tU_Application");
                });

            entity.Property(e => e.ApplicationSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<ApplicationAccessLog>(entity =>
        {
            entity.HasKey(e => e.ApplicationAccessLogSer).HasName("XPKApplicationAccessLog");

            entity.Property(e => e.ApplicationAccessLogSer).ValueGeneratedNever();
        });

        modelBuilder.Entity<ApplicationPrintReport>(entity =>
        {
            entity.HasKey(e => new { e.PrintReportSer, e.ApplicationSer }).HasName("XPKApplicationPrintReport");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ApplicationPrintReport");
                    tb.HasTrigger("tU_ApplicationPrintReport");
                });

            
                
                

            entity.HasOne(d => d.ApplicationSerNavigation).WithMany(p => p.ApplicationPrintReport)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKApplication_ApplicationPrintReport");

            entity.HasOne(d => d.PrintReportSerNavigation).WithMany(p => p.ApplicationPrintReport)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPrintReport_ApplicationPrintReport");
        });

        modelBuilder.Entity<Applicator>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKApplicator");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Applicator");
                    tb.HasTrigger("tI_Applicator");
                    tb.HasTrigger("tU_Applicator");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithOne(p => p.Applicator).HasConstraintName("FKAddOn_Applicator");
        });

        modelBuilder.Entity<ApplicatorJawSize>(entity =>
        {
            entity.HasKey(e => e.ApplicatorJawSizeSer).HasName("XPKApplicatorJawSize");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ApplicatorJawSize");
                    tb.HasTrigger("tU_ApplicatorJawSize");
                });

            entity.Property(e => e.ApplicatorJawSizeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ApplicatorSerNavigation).WithMany(p => p.ApplicatorJawSize)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKApplicator_ApplicatorJawSize");

            entity.HasOne(d => d.EnergyModeSerNavigation).WithMany(p => p.ApplicatorJawSize)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKEnergyMode_ApplicatorJawSize");
        });

        modelBuilder.Entity<Approval>(entity =>
        {
            entity.HasKey(e => e.ApprovalSer).HasName("XPKApproval");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_Approval");
                    tb.HasTrigger("tU_Approval");
                });

            entity.Property(e => e.ApprovalSer).ValueGeneratedOnAdd();
            
                
                
        });

        modelBuilder.Entity<ApprovalOptions>(entity =>
        {
            entity.HasKey(e => e.EventTyp).HasName("PK__approval__DA42169A86F84F95");

            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ArchiveLocation>(entity =>
        {
            entity.HasKey(e => e.ArchiveLocationSer).HasName("XPKArchiveLocation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ArchiveLocation");
                    tb.HasTrigger("tU_ArchiveLocation");
                });

            entity.Property(e => e.ArchiveLocationSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<ArchiveRestoredFile>(entity =>
        {
            entity.HasKey(e => e.ArchiveRestoredFileSer).HasName("XPKArchiveRestoredFile");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ArchiveRestoredFile");
                    tb.HasTrigger("tU_ArchiveRestoredFile");
                });

            entity.Property(e => e.ArchiveRestoredFileSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.ArchiveRestoredFile).HasConstraintName("FKPatient_ArchiveRestoredFile");
        });

        modelBuilder.Entity<AriaConnectIntfTrgr>(entity =>
        {
            entity.HasKey(e => e.AriaConnectIntfTrgrSer).HasName("XPKAriaConnectIntfTrgr");

            entity.Property(e => e.AriaConnectIntfTrgrSer).ValueGeneratedNever();
            
                
                
            entity.Property(e => e.ProcessIndicator).IsFixedLength();
        });

        modelBuilder.Entity<AsmtComp>(entity =>
        {
            entity.HasKey(e => e.AsmtCompName).HasName("pkasmt_comp");

            entity.Property(e => e.AsmtCompName).IsFixedLength();
            entity.Property(e => e.ActualTimeReq).IsFixedLength();
            entity.Property(e => e.MedMntrAsmtInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.StatusTypNavigation).WithMany(p => p.AsmtComp).HasConstraintName("fk1_asmt_comp");
        });

        modelBuilder.Entity<AsmtCompBill>(entity =>
        {
            entity.HasKey(e => new { e.AsmtCompName, e.BillCd, e.BillCdTypId, e.BillInstanceId }).HasName("pkasmt_comp_bill");

            entity.Property(e => e.AsmtCompName).IsFixedLength();
            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AsmtCompNameNavigation).WithMany(p => p.AsmtCompBill)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_asmt_comp_bill");
        });

        modelBuilder.Entity<AsmtCompGrade>(entity =>
        {
            entity.HasKey(e => new { e.AsmtCompName, e.GradeNo }).HasName("pkasmt_comp_grade");

            entity.Property(e => e.AsmtCompName).IsFixedLength();
            entity.Property(e => e.GradeDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AsmtCompNameNavigation).WithMany(p => p.AsmtCompGrade)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_asmt_comp_grade");
        });

        modelBuilder.Entity<AsmtGroup>(entity =>
        {
            entity.HasKey(e => e.AsmtGroupName).HasName("pkasmt_group");

            entity.Property(e => e.AsmtGroupName).IsFixedLength();
            entity.Property(e => e.ActualTimeReq).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AsmtGroupBill>(entity =>
        {
            entity.HasKey(e => new { e.AsmtGroupName, e.BillCd, e.BillCdTypId, e.BillInstanceId }).HasName("pkasmt_group_bill");

            entity.Property(e => e.AsmtGroupName).IsFixedLength();
            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AsmtGroupNameNavigation).WithMany(p => p.AsmtGroupBill)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_asmt_group_bill");
        });

        modelBuilder.Entity<AsmtGroupComp>(entity =>
        {
            entity.HasKey(e => new { e.AsmtGroupName, e.AsmtCompName }).HasName("pkasmt_group_comp");

            entity.Property(e => e.AsmtGroupName).IsFixedLength();
            entity.Property(e => e.AsmtCompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AsmtCompNameNavigation).WithMany(p => p.AsmtGroupComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_asmt_group_comp");

            entity.HasOne(d => d.AsmtGroupNameNavigation).WithMany(p => p.AsmtGroupComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_asmt_group_comp");
        });

        modelBuilder.Entity<AsmtMthd>(entity =>
        {
            entity.HasKey(e => e.AsmtMthd1).HasName("pkasmt_mthd");

            entity.Property(e => e.AsmtMthd1).ValueGeneratedNever();
            entity.Property(e => e.AsmtDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AspectDesc>(entity =>
        {
            entity.HasKey(e => new { e.System, e.Aspect, e.AspectDesc1 }).HasName("pkaspect_desc");

            entity.Property(e => e.System).IsFixedLength();
            entity.Property(e => e.Aspect).IsFixedLength();
            entity.Property(e => e.AspectDesc1).IsFixedLength();
            entity.Property(e => e.AbnormDfltInd).IsFixedLength();
            entity.Property(e => e.NormDfltInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.TrCompName).WithMany(p => p.AspectDesc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_aspect_desc");
        });

        modelBuilder.Entity<AspectDescPhys>(entity =>
        {
            entity.HasKey(e => new { e.System, e.Aspect, e.AspectDesc, e.Userid, e.InstId }).HasName("pkaspect_desc_phys");

            entity.Property(e => e.System).IsFixedLength();
            entity.Property(e => e.Aspect).IsFixedLength();
            entity.Property(e => e.AspectDesc).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AbnormDfltInd).IsFixedLength();
            entity.Property(e => e.NormDfltInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.AspectDescNavigation).WithMany(p => p.AspectDescPhys)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_aspect_desc_phys");
        });

        modelBuilder.Entity<Attendee>(entity =>
        {
            entity.HasKey(e => e.AttendeeSer).HasName("XPKAttendee");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Attendee");
                    tb.HasTrigger("tI_Attendee");
                    tb.HasTrigger("tU_Attendee");
                });

            entity.Property(e => e.AttendeeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityInstanceSerNavigation).WithMany(p => p.Attendee).HasConstraintName("FKActivityInstance_Attendee");

            entity.HasOne(d => d.ResourceGroupSerNavigation).WithMany(p => p.Attendee).HasConstraintName("FKResourceGroup_Attendee");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.Attendee).HasConstraintName("FKResource_Attendee");
        });

        modelBuilder.Entity<AttendeeMh>(entity =>
        {
            entity.HasKey(e => new { e.AttendeeSer, e.AttendeeRevCount }).HasName("XPKAttendeeMH");

            entity.ToTable("AttendeeMH", tb =>
                {
                    tb.HasTrigger("tD_AttendeeMH");
                    tb.HasTrigger("tI_AttendeeMH");
                    tb.HasTrigger("tU_AttendeeMH");
                });

            
                
                

            entity.HasOne(d => d.AttendeeSerNavigation).WithMany(p => p.AttendeeMh).HasConstraintName("FKAttendee_AttendeeMH");
        });

        modelBuilder.Entity<AttrCatTyp>(entity =>
        {
            entity.HasKey(e => e.AttrCatTyp1).HasName("pkattr_cat_typ");

            entity.Property(e => e.AttrCatTyp1).ValueGeneratedNever();
            entity.Property(e => e.AttrCatTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AttrValueTyp>(entity =>
        {
            entity.HasKey(e => e.AttrValueTyp1).HasName("pkattr_value_typ");

            entity.Property(e => e.AttrValueTyp1).ValueGeneratedNever();
            entity.Property(e => e.AttrValueDesc).IsFixedLength();
            entity.Property(e => e.AttrValueDsp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AttributeMetaData>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<AuditActionTyp>(entity =>
        {
            entity.HasKey(e => e.AuditActionTyp1).HasName("pkaudit_action_typ");

            entity.Property(e => e.AuditActionTyp1).ValueGeneratedNever();
            entity.Property(e => e.AuditActionDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AuditHistory1>(entity =>
        {
            entity.HasKey(e => new { e.AuditRecId, e.PtId, e.AuditTableName, e.AuditConcatKey }).HasName("pkaudit_history_1");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AuditTableName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AuditHistory2>(entity =>
        {
            entity.HasKey(e => new { e.AuditRecId, e.PtId, e.AuditTableName, e.AuditConcatKey }).HasName("pkaudit_history_2");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AuditTableName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AuditHistory3>(entity =>
        {
            entity.HasKey(e => new { e.AuditRecId, e.PtId, e.AuditTableName, e.AuditConcatKey }).HasName("pkaudit_history_3");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AuditTableName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AuditHistory4>(entity =>
        {
            entity.HasKey(e => new { e.AuditRecId, e.PtId, e.AuditTableName, e.AuditConcatKey }).HasName("pkaudit_history_4");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AuditTableName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AuditHistory5>(entity =>
        {
            entity.HasKey(e => new { e.AuditRecId, e.PtId, e.AuditTableName, e.AuditConcatKey }).HasName("pkaudit_history_5");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AuditTableName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AuditHistory6>(entity =>
        {
            entity.HasKey(e => new { e.AuditRecId, e.PtId, e.AuditTableName, e.AuditConcatKey }).HasName("pkaudit_history_6");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AuditTableName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AuditLog>(entity =>
        {
            entity.HasKey(e => e.AuditLogSer).HasName("XPKAuditLog");

            entity.Property(e => e.AuditLogSer).ValueGeneratedNever();
        });

        modelBuilder.Entity<AuditModificationLog>(entity =>
        {
            entity.HasKey(e => e.AuditModificationLogId).HasName("pkaudit_modification_log");

            entity.Property(e => e.AuditModificationLogId).ValueGeneratedNever();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TableName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<AuditReasonCd>(entity =>
        {
            entity.HasKey(e => e.AuditReasonCd1).HasName("pkaudit_reason_cd");

            entity.Property(e => e.AuditReasonDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<AuditRec>(entity =>
        {
            entity.HasKey(e => e.AuditSeqNo).HasName("pkaudit_rec");

            entity.Property(e => e.AuditSeqNo).ValueGeneratedNever();
            entity.Property(e => e.AppBuildNo).IsFixedLength();
            entity.Property(e => e.AppVersNo).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TableName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.AuditActionTypNavigation).WithMany(p => p.AuditRec)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_audit_rec");
        });

        modelBuilder.Entity<AuditRetentionPeriodSpexecution>(entity =>
        {
            entity.HasIndex(e => e.Id, "XPKAuditRetentionPeriodSPExecution").IsClustered();

            entity.Property(e => e.ExecutionDateTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<AuraConfiguration>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<AuraParentPackageJobStatus>(entity =>
        {
            entity.HasIndex(e => e.Id, "XPKAuraParentPackageJobStatus").IsClustered();

            entity.Property(e => e.DateCreation).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<AuthorTyp>(entity =>
        {
            entity.HasKey(e => e.AuthorTyp1).HasName("pkauthor_typ");

            entity.Property(e => e.AuthorTyp1).ValueGeneratedNever();
            entity.Property(e => e.AuthorDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Auxiliary>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKAuxiliary");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_Auxiliary");
                    tb.HasTrigger("tU_Auxiliary");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.Auxiliary).HasConstraintName("FKResource_Auxiliary");
        });

        modelBuilder.Entity<AvailPrefPttrnDetails>(entity =>
        {
            entity.HasKey(e => e.AvailPrefPttrnDetailsSer).HasName("XPKAvailPrefPttrnDetails");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_AvailPrefPttrnDetails");
                    tb.HasTrigger("tU_AvailPrefPttrnDetails");
                });

            entity.Property(e => e.AvailPrefPttrnDetailsSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityCategorySerNavigation).WithMany(p => p.AvailPrefPttrnDetails)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKActivityCategory_AvailPrefPttrnDetails");

            entity.HasOne(d => d.ActivitySerNavigation).WithMany(p => p.AvailPrefPttrnDetails)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKActivity_AvailPrefPttrnDetails");

            entity.HasOne(d => d.AvailPrefWeeklyPttrnSerNavigation).WithMany(p => p.AvailPrefPttrnDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKAvailPrefWeeklyPttrn_AvailPrefPttrnDetails");
        });

        modelBuilder.Entity<AvailPrefWeeklyPttrn>(entity =>
        {
            entity.HasKey(e => e.AvailPrefWeeklyPttrnSer)
                .HasName("XPKNonEventPttrnType")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_AvailPrefWeeklyPttrn");
                    tb.HasTrigger("tI_AvailPrefWeeklyPttrn");
                    tb.HasTrigger("tU_AvailPrefWeeklyPttrn");
                });

            entity.Property(e => e.AvailPrefWeeklyPttrnSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityCategorySerNavigation).WithMany(p => p.AvailPrefWeeklyPttrn)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKActivityCategory_AvailPrefWeeklyPttrn");

            entity.HasOne(d => d.ActivitySerNavigation).WithMany(p => p.AvailPrefWeeklyPttrn)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKActivity_AvailPrefWeeklyPttrn");

            entity.HasOne(d => d.ResourceDepartmentSerNavigation).WithMany(p => p.AvailPrefWeeklyPttrn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKResourceDepartment_AvailPrefWeeklyPttrn");
        });

        modelBuilder.Entity<BaseCd>(entity =>
        {
            entity.HasKey(e => e.BaseCd1).HasName("pkbase_cd");

            entity.Property(e => e.BaseCd1).IsFixedLength();
            entity.Property(e => e.BaseDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BaseClsTyp>(entity =>
        {
            entity.HasKey(e => e.BaseClsTyp1).HasName("pkbase_cls_typ");

            entity.Property(e => e.BaseClsTyp1).ValueGeneratedNever();
            entity.Property(e => e.BaseCdTyp).IsFixedLength();
            entity.Property(e => e.BaseDesc).IsFixedLength();
            entity.Property(e => e.CatInd).IsFixedLength();
            entity.Property(e => e.InstBasedInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BaseTyp>(entity =>
        {
            entity.HasKey(e => e.BaseTyp1).HasName("pkbase_typ");

            entity.Property(e => e.BaseTyp1).ValueGeneratedNever();
            entity.Property(e => e.BaseDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BaseTypPtListQueryXref>(entity =>
        {
            entity.HasKey(e => new { e.PtListQueryId, e.BaseTypId, e.InstId }).HasName("pkbase_typ_pt_list_query_xref");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtListQuery).WithMany(p => p.BaseTypPtListQueryXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_base_typ_pt_list_query_xref");

            entity.HasOne(d => d.InstBaseTyp).WithMany(p => p.BaseTypPtListQueryXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_base_typ_pt_list_query_xref");
        });

        modelBuilder.Entity<BatchCcpndic1>(entity =>
        {
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.ActiveVisitInd).IsFixedLength();
            entity.Property(e => e.ApprFlag).IsFixedLength();
            entity.Property(e => e.AuthorActiveEntryInd).IsFixedLength();
            entity.Property(e => e.AuthorFirstName).IsFixedLength();
            entity.Property(e => e.AuthorInitial).IsFixedLength();
            entity.Property(e => e.AuthorLastName).IsFixedLength();
            entity.Property(e => e.AuthorPrefInd).IsFixedLength();
            entity.Property(e => e.CurLastName).IsFixedLength();
            entity.Property(e => e.CurValueInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.InstId1).IsFixedLength();
            entity.Property(e => e.InstName).IsFixedLength();
            entity.Property(e => e.InstPtKeyDesc).IsFixedLength();
            entity.Property(e => e.OptxPrimaryInd).IsFixedLength();
            entity.Property(e => e.OverrideInstId).IsFixedLength();
            entity.Property(e => e.PtFirstName).IsFixedLength();
            entity.Property(e => e.PtInitial).IsFixedLength();
            entity.Property(e => e.StkhActiveEntryInd).IsFixedLength();
            entity.Property(e => e.StkhFirstName).IsFixedLength();
            entity.Property(e => e.StkhInitial).IsFixedLength();
            entity.Property(e => e.StkhLastName).IsFixedLength();
            entity.Property(e => e.StkhPrefInd).IsFixedLength();
            entity.Property(e => e.TestPtInd).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<BeamlineOption>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKBeamlineOption");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_BeamlineOption");
                    tb.HasTrigger("tU_BeamlineOption");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithOne(p => p.BeamlineOption).HasConstraintName("FKAddOn_BeamlineOption");
        });

        modelBuilder.Entity<BedUseTyp>(entity =>
        {
            entity.HasKey(e => e.BedUseTyp1).HasName("pkbed_use_typ");

            entity.Property(e => e.BedUseTyp1).ValueGeneratedNever();
            entity.Property(e => e.BedUseTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BehaviorCd>(entity =>
        {
            entity.HasKey(e => e.BehaviorCd1).HasName("pkbehavior_cd");

            entity.Property(e => e.BehaviorCd1).IsFixedLength();
            entity.Property(e => e.BehaviorDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BillAcct>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.BillAcctId }).HasName("pkbill_acct");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.BillAcctLabel).IsFixedLength();
            entity.Property(e => e.BillAcctValue).IsFixedLength();
            entity.Property(e => e.BillInstId).IsFixedLength();
            entity.Property(e => e.ExtRefStkhId).IsFixedLength();
            entity.Property(e => e.Hl7FinClsTypInstId).IsFixedLength();
            entity.Property(e => e.Hl7HospServiceTypInstId).IsFixedLength();
            entity.Property(e => e.Hl7PtClsTypInstId).IsFixedLength();
            entity.Property(e => e.Hl7PtStatusTypInstId).IsFixedLength();
            entity.Property(e => e.Hl7PtTypInstId).IsFixedLength();
            entity.Property(e => e.RadoncTyp).IsFixedLength();
            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.Stkh).WithMany(p => p.BillAcct).HasConstraintName("fk6_bill_acct");

            entity.HasOne(d => d.Hl7FinClsTypNavigation).WithMany(p => p.BillAcct).HasConstraintName("fk3_bill_acct");

            entity.HasOne(d => d.Hl7HospServiceTypNavigation).WithMany(p => p.BillAcct).HasConstraintName("fk5_bill_acct");

            entity.HasOne(d => d.Hl7PtClsTypNavigation).WithMany(p => p.BillAcct).HasConstraintName("fk1_bill_acct");

            entity.HasOne(d => d.Hl7PtStatusTypNavigation).WithMany(p => p.BillAcct).HasConstraintName("fk2_bill_acct");

            entity.HasOne(d => d.Hl7PtTypNavigation).WithMany(p => p.BillAcct).HasConstraintName("fk4_bill_acct");
        });

        modelBuilder.Entity<BillAcctPtVisit>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.BillAcctId }).HasName("pkbill_acct_pt_visit");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillAcct).WithMany(p => p.BillAcctPtVisit)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_bill_acct_pt_visit");

            entity.HasOne(d => d.PtVisit).WithMany(p => p.BillAcctPtVisit)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bill_acct_pt_visit");
        });

        modelBuilder.Entity<BillCd>(entity =>
        {
            entity.HasKey(e => new { e.BillCd1, e.BillCdTypId }).HasName("pkbill_cd");

            entity.Property(e => e.BillCd1).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.BillCdDesc).IsFixedLength();
            entity.Property(e => e.ExtProcedureBillCd).IsFixedLength();
            entity.Property(e => e.IntfSendBillDescInd).IsFixedLength();
            entity.Property(e => e.MsgTypStatusCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillCdTyp).WithMany(p => p.BillCd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bill_cd");
        });

        modelBuilder.Entity<BillCdHx>(entity =>
        {
            entity.HasKey(e => new { e.BillCd, e.BillCdTypId, e.ExpiryDate }).HasName("pkbill_cd_hx");

            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.BillCdDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<BillCdInfo>(entity =>
        {
            entity.HasKey(e => new { e.BillCd, e.BillCdTypId, e.BillInstanceId, e.BillCdEfcDt }).HasName("pkbill_cd_info");

            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.BillCdInvId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillCdInstance).WithMany(p => p.BillCdInfo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bill_cd_info");
        });

        modelBuilder.Entity<BillCdInstance>(entity =>
        {
            entity.HasKey(e => new { e.BillCd, e.BillCdTypId, e.BillInstanceId }).HasName("pkbill_cd_instance");

            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.BillInstanceDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillCdNavigation).WithMany(p => p.BillCdInstance)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bill_cd_instance");
        });

        modelBuilder.Entity<BillCdTyp>(entity =>
        {
            entity.HasKey(e => e.BillCdTypId).HasName("pkbill_cd_typ");

            entity.Property(e => e.BillCdTypId).ValueGeneratedNever();
            entity.Property(e => e.BillCdTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BillEmCatTyp>(entity =>
        {
            entity.HasKey(e => e.BillEmCatTyp1).HasName("pkbill_em_cat_typ");

            entity.Property(e => e.BillEmCatTyp1).ValueGeneratedNever();
            entity.Property(e => e.BillEmCatDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BillEmCptTyp>(entity =>
        {
            entity.HasKey(e => e.BillEmCptTyp1).HasName("pkbill_em_cpt_typ");

            entity.Property(e => e.BillEmCptTyp1).ValueGeneratedNever();
            entity.Property(e => e.BillEmCptDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BillEmDataTyp>(entity =>
        {
            entity.HasKey(e => e.BillEmDataTyp1).HasName("pkbill_em_data_typ");

            entity.Property(e => e.BillEmDataTyp1).ValueGeneratedNever();
            entity.Property(e => e.BillEmDataDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BillEmDecisionTyp>(entity =>
        {
            entity.HasKey(e => e.BillEmDecisionTyp1).HasName("pkbill_em_decision_typ");

            entity.Property(e => e.BillEmDecisionTyp1).ValueGeneratedNever();
            entity.Property(e => e.BillEmDecisionDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BillEmDefn>(entity =>
        {
            entity.HasKey(e => new { e.BillEmCatTyp, e.BillEmElmtTyp, e.BillEmMinCount }).HasName("pkbill_em_defn");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillEmCatTypNavigation).WithMany(p => p.BillEmDefn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bill_em_defn");

            entity.HasOne(d => d.BillEmElmtTypNavigation).WithMany(p => p.BillEmDefn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_bill_em_defn");
        });

        modelBuilder.Entity<BillEmDxTyp>(entity =>
        {
            entity.HasKey(e => e.BillEmDxTyp1).HasName("pkbill_em_dx_typ");

            entity.Property(e => e.BillEmDxTyp1).ValueGeneratedNever();
            entity.Property(e => e.BillEmDxDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BillEmElmtTyp>(entity =>
        {
            entity.HasKey(e => e.BillEmElmtTyp1).HasName("pkbill_em_elmt_typ");

            entity.Property(e => e.BillEmElmtTyp1).ValueGeneratedNever();
            entity.Property(e => e.BillEmElmtDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BillEmMsg>(entity =>
        {
            entity.HasKey(e => e.BillEmMsgNo).HasName("pkbill_em_msg");

            entity.Property(e => e.BillEmMsgNo).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BillEmRiskTyp>(entity =>
        {
            entity.HasKey(e => e.BillEmRiskTyp1).HasName("pkbill_em_risk_typ");

            entity.Property(e => e.BillEmRiskTyp1).ValueGeneratedNever();
            entity.Property(e => e.BillEmRiskDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BillEvent>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.BillEventId, e.PtVisitId }).HasName("pkbill_event");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.BillCdInvId).IsFixedLength();
            entity.Property(e => e.BillEventBillCd).IsFixedLength();
            entity.Property(e => e.BillEventDesc).IsFixedLength();
            entity.Property(e => e.BillEventLinkCd).IsFixedLength();
            entity.Property(e => e.BillEventMod).IsFixedLength();
            entity.Property(e => e.BillEventStatus).IsFixedLength();
            entity.Property(e => e.BillGeneratedInd).IsFixedLength();
            entity.Property(e => e.BillInstId).IsFixedLength();
            entity.Property(e => e.BillItemDesc).IsFixedLength();
            entity.Property(e => e.BillModifier).IsFixedLength();
            entity.Property(e => e.BilledInd).IsFixedLength();
            entity.Property(e => e.NdcUpcHriCd).IsFixedLength();
            entity.Property(e => e.OverrideInd).IsFixedLength();
            entity.Property(e => e.PhysInstId).IsFixedLength();
            entity.Property(e => e.SpsrStkhId).IsFixedLength();
            entity.Property(e => e.TransId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillCdTyp).WithMany(p => p.BillEvent).HasConstraintName("fk1_bill_event");

            entity.HasOne(d => d.BillEventTyp).WithMany(p => p.BillEvent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_bill_event");
        });

        modelBuilder.Entity<BillEventActual>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.BillEventId, e.PtActualId, e.EventTyp }).HasName("pkbill_event_actual");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillEvent).WithMany(p => p.BillEventActual)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bill_event_actual");
        });

        modelBuilder.Entity<BillEventEmInfo>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.BillEventId, e.PtVisitId }).HasName("pkbill_event_em_info");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.DurationInd).IsFixedLength();
            entity.Property(e => e.PfshFamilyInd).IsFixedLength();
            entity.Property(e => e.PfshPastInd).IsFixedLength();
            entity.Property(e => e.PfshSocialInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillEmCatTypNavigation).WithMany(p => p.BillEventEmInfo).HasConstraintName("fk2_bill_event_em_info");

            entity.HasOne(d => d.MdmDataTypNavigation).WithMany(p => p.BillEventEmInfo).HasConstraintName("fk5_bill_event_em_info");

            entity.HasOne(d => d.MdmDecisionTypNavigation).WithMany(p => p.BillEventEmInfo).HasConstraintName("fk3_bill_event_em_info");

            entity.HasOne(d => d.MdmDxTypNavigation).WithMany(p => p.BillEventEmInfo).HasConstraintName("fk4_bill_event_em_info");

            entity.HasOne(d => d.MdmRiskTypNavigation).WithMany(p => p.BillEventEmInfo).HasConstraintName("fk6_bill_event_em_info");

            entity.HasOne(d => d.BillEvent).WithOne(p => p.BillEventEmInfo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bill_event_em_info");
        });

        modelBuilder.Entity<BillEventLink>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.FromPtVisitId, e.FromBillEventId, e.ToPtVisitId, e.ToBillEventId }).HasName("pkbill_event_link");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<BillEventTyp>(entity =>
        {
            entity.HasKey(e => e.EventCdTypId).HasName("pkbill_event_typ");

            entity.Property(e => e.EventCdTypId).ValueGeneratedNever();
            entity.Property(e => e.EventCdTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BillEvntCharge>(entity =>
        {
            entity.HasKey(e => e.TransId).HasName("pkbill_evnt_charge");

            entity.Property(e => e.BillCdInvId).IsFixedLength();
            entity.Property(e => e.BillChargeStatus).IsFixedLength();
            entity.Property(e => e.FillerRefNo).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VoidInd).IsFixedLength();
        });

        modelBuilder.Entity<BillEvntChrgWrk>(entity =>
        {
            entity.HasKey(e => e.TransId).HasName("pkbill_evnt_chrg_wrk");

            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.BillCdInvId).IsFixedLength();
            entity.Property(e => e.BillEventLinkCd).IsFixedLength();
            entity.Property(e => e.BillModifier).IsFixedLength();
            entity.Property(e => e.BillSysInstId).IsFixedLength();
            entity.Property(e => e.ExternalOrgStkhId).IsFixedLength();
            entity.Property(e => e.FillerRefNo).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillSysBatchGroup).WithMany(p => p.BillEvntChrgWrk).HasConstraintName("fk1_bill_evnt_chrg_wrk");

            entity.HasOne(d => d.BillSystem).WithMany(p => p.BillEvntChrgWrk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_bill_evnt_chrg_wrk");
        });

        modelBuilder.Entity<BillEvntPayment>(entity =>
        {
            entity.HasKey(e => new { e.BillEvntPmtId, e.InstId }).HasName("pkbill_evnt_payment");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<BillForm>(entity =>
        {
            entity.HasKey(e => e.BillFormId).HasName("pkbill_form");

            entity.Property(e => e.BillFormId).ValueGeneratedNever();
            entity.Property(e => e.BillFormDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<BillFormItem>(entity =>
        {
            entity.HasKey(e => e.BillItemId).HasName("pkbill_form_item");

            entity.Property(e => e.BillItemId).ValueGeneratedNever();
            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.BillGroupName).IsFixedLength();
            entity.Property(e => e.BillModifier).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillEventTyp).WithMany(p => p.BillFormItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_bill_form_item");

            entity.HasOne(d => d.BillForm).WithMany(p => p.BillFormItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bill_form_item");

            entity.HasOne(d => d.BillCdNavigation).WithMany(p => p.BillFormItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_bill_form_item");
        });

        modelBuilder.Entity<BillFormTyp>(entity =>
        {
            entity.HasKey(e => e.BillFormTyp1).HasName("pkbill_form_typ");

            entity.Property(e => e.BillFormTyp1).ValueGeneratedNever();
            entity.Property(e => e.BillFormTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<BillModifierTyp>(entity =>
        {
            entity.HasKey(e => new { e.BillModifierCd, e.BillCdTypId }).HasName("pkbill_modifier_typ");

            entity.Property(e => e.BillModifierCd).IsFixedLength();
            entity.Property(e => e.BillModifierDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<BillRelVal>(entity =>
        {
            entity.HasKey(e => new { e.BillCd, e.BillCdTypId, e.RelValName }).HasName("pkbill_rel_val");

            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.RelValName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillCdNavigation).WithMany(p => p.BillRelVal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bill_rel_val");
        });

        modelBuilder.Entity<BillSysBatchDef>(entity =>
        {
            entity.HasKey(e => new { e.BatchSetupId, e.BillSysKeyOrderNo }).HasName("pkbill_sys_batch_def");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BatchSetup).WithMany(p => p.BillSysBatchDef)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bill_sys_batch_def");

            entity.HasOne(d => d.BillSysKey).WithMany(p => p.BillSysBatchDef)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_bill_sys_batch_def");
        });

        modelBuilder.Entity<BillSysBatchGroup>(entity =>
        {
            entity.HasKey(e => new { e.BatchSetupId, e.BatchGroupId }).HasName("pkbill_sys_batch_group");

            entity.Property(e => e.DefaultInd).IsFixedLength();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BatchSetup).WithMany(p => p.BillSysBatchGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bill_sys_batch_group");

            entity.HasOne(d => d.IntfAppParm).WithMany(p => p.BillSysBatchGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_bill_sys_batch_group");
        });

        modelBuilder.Entity<BillSysBatchSetup>(entity =>
        {
            entity.HasKey(e => e.BatchSetupId).HasName("pkbill_sys_batch_setup");

            entity.Property(e => e.BatchSetupId).ValueGeneratedNever();
            entity.Property(e => e.BillSysInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillSystem).WithMany(p => p.BillSysBatchSetup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bill_sys_batch_setup");
        });

        modelBuilder.Entity<BillSysChrgWrk>(entity =>
        {
            entity.HasKey(e => new { e.VarisBillRunSeqId, e.ActInstProcCodeSer, e.ActInstProcCodeRevCount, e.ChargeIndicator }).HasName("XPKBillSysChrgWrk");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_BillSysChrgWrk");
                    tb.HasTrigger("tU_BillSysChrgWrk");
                });

            entity.Property(e => e.PatientSex).IsFixedLength();

            entity.HasOne(d => d.AccountBillingCodeSerNavigation).WithMany(p => p.BillSysChrgWrk).HasConstraintName("FKAccountBillingCode_BillSysChrgWrk");

            entity.HasOne(d => d.ActInstProcCodeSerNavigation).WithMany(p => p.BillSysChrgWrk).HasConstraintName("FKActInstProcCode_BillSysChrgWrk");

            entity.HasOne(d => d.ActivityCaptureSerNavigation).WithMany(p => p.BillSysChrgWrk)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKActivityCapture_BillSysChrgWrk");

            entity.HasOne(d => d.ActivitySerialNumberNavigation).WithMany(p => p.BillSysChrgWrk)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKActivity_BillSysChrgWrk");

            entity.HasOne(d => d.ChargesControlSerialNumberNavigation).WithMany(p => p.BillSysChrgWrk)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKChargesControl_BillSysChrgWrk");

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.BillSysChrgWrk)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKDepartment_BillSysChrgWrk");

            entity.HasOne(d => d.HospitalSerNavigation).WithMany(p => p.BillSysChrgWrk)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKHospital_BillSysChrgWrk");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.BillSysChrgWrk)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKPatient_BillSysChrgWrk");

            entity.HasOne(d => d.ProcedureCodeSerNavigation).WithMany(p => p.BillSysChrgWrk).HasConstraintName("FKProcedureCode_BillSysChrgWrk");
        });

        modelBuilder.Entity<BillSysHospDeptActivity>(entity =>
        {
            entity.HasKey(e => e.BillSysHospDeptActivitySer).HasName("XPKBillSysHospDeptActivity");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_BillSysHospDeptActivity");
                    tb.HasTrigger("tU_BillSysHospDeptActivity");
                });

            entity.Property(e => e.BillSysHospDeptActivitySer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.BillSysHospDeptActivity).HasConstraintName("FKDepartment_BillSysHospDeptActivity");

            entity.HasOne(d => d.HospitalSerNavigation).WithMany(p => p.BillSysHospDeptActivity).HasConstraintName("FKHospital_BillSysHospDeptActivity");
        });

        modelBuilder.Entity<BillSysKeyCd>(entity =>
        {
            entity.HasKey(e => e.BillSysKeyId).HasName("pkbill_sys_key_cd");

            entity.Property(e => e.BillSysKeyId).ValueGeneratedNever();
            entity.Property(e => e.BillSysKeyColName).IsFixedLength();
            entity.Property(e => e.BillSysKeyDesc).IsFixedLength();
            entity.Property(e => e.DddwDataName).IsFixedLength();
            entity.Property(e => e.DddwDispName).IsFixedLength();
            entity.Property(e => e.DddwName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<BillSysPendingTransactions>(entity =>
        {
            entity.HasKey(e => new { e.VarisBillRunSeqId, e.ActInstProcCodeSer, e.ActInstProcCodeRevCount, e.ChargeIndicator, e.BillSysInstId, e.BillSysId }).HasName("XPKBillSysPendingTransactions");

            entity.Property(e => e.PatientSex).IsFixedLength();

            entity.HasOne(d => d.AccountBillingCodeSerNavigation).WithMany(p => p.BillSysPendingTransactions).HasConstraintName("FKAccountBillingCode_BillSysPendingTransactions");

            entity.HasOne(d => d.ActInstProcCodeSerNavigation).WithMany(p => p.BillSysPendingTransactions).HasConstraintName("FKActInstProcCode_BillSysPendingTransactions");

            entity.HasOne(d => d.ActivityCaptureSerNavigation).WithMany(p => p.BillSysPendingTransactions)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKActivityCapture_BillSysPendingTransactions");

            entity.HasOne(d => d.ActivitySerialNumberNavigation).WithMany(p => p.BillSysPendingTransactions)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKActivity_BillSysPendingTransactions");

            entity.HasOne(d => d.ChargesControlSerialNumberNavigation).WithMany(p => p.BillSysPendingTransactions)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKChargesControl_BillSysPendingTransactions");

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.BillSysPendingTransactions)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKDepartment_BillSysPendingTransactions");

            entity.HasOne(d => d.HospitalSerNavigation).WithMany(p => p.BillSysPendingTransactions)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKHospital_BillSysPendingTransactions");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.BillSysPendingTransactions)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKPatient_BillSysPendingTransactions");

            entity.HasOne(d => d.ProcedureCodeSerNavigation).WithMany(p => p.BillSysPendingTransactions).HasConstraintName("FKProcedureCode_BillSysPendingTransactions");
        });

        modelBuilder.Entity<BillSysSentCharges>(entity =>
        {
            entity.HasKey(e => e.BillSysSentChargesSer)
                .HasName("XPKBillSysSentCharges")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_BillSysSentCharges");
                    tb.HasTrigger("tU_BillSysSentCharges");
                });

            entity.HasIndex(e => new { e.TransId, e.ActInstProcCodeSer, e.ActInstProcCodeRevCount, e.ChargeIndicator, e.VoidCharge, e.BillSysId }, "XAKBillSysSentCharges")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.BillSysSentChargesSer).ValueGeneratedNever();

            entity.HasOne(d => d.ActInstProcCodeSerNavigation).WithMany(p => p.BillSysSentCharges).HasConstraintName("FKActInstProcCode_BillSysSentCharges");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.BillSysSentCharges)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKPatient_BillSysSentCharges");
        });

        modelBuilder.Entity<BillSystem>(entity =>
        {
            entity.HasKey(e => new { e.BillSysInstId, e.BillSysId }).HasName("pkbill_system");

            entity.Property(e => e.BillSysInstId).IsFixedLength();
            entity.Property(e => e.AceDtFormat).IsFixedLength();
            entity.Property(e => e.AceFieldDelimiter).IsFixedLength();
            entity.Property(e => e.AceFileTyp).IsFixedLength();
            entity.Property(e => e.AceIncludeColHdrInd).IsFixedLength();
            entity.Property(e => e.AceInd).IsFixedLength();
            entity.Property(e => e.AceOutTyp).IsFixedLength();
            entity.Property(e => e.AceTxtDelimiter).IsFixedLength();
            entity.Property(e => e.BillAcctInd).IsFixedLength();
            entity.Property(e => e.BillAllCdInd).IsFixedLength();
            entity.Property(e => e.BillRptSortOrder1).IsFixedLength();
            entity.Property(e => e.BillRptSortOrder2).IsFixedLength();
            entity.Property(e => e.BillRptSortOrder3).IsFixedLength();
            entity.Property(e => e.BillSpsrCd).IsFixedLength();
            entity.Property(e => e.BillSysTypCd).IsFixedLength();
            entity.Property(e => e.EnableBatchSetupInd).IsFixedLength();
            entity.Property(e => e.GenFillerRefInd).IsFixedLength();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.MergeInd).IsFixedLength();
            entity.Property(e => e.OverrideBatchInd).IsFixedLength();
            entity.Property(e => e.SuppressAmtInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<BillVisitEvent>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.PhaseSeqNo, e.TpCycleNo, e.CycleDay }).HasName("pkbill_visit_event");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillCdInstance).WithMany(p => p.BillVisitEvent).HasConstraintName("fk1_bill_visit_event");
        });

        modelBuilder.Entity<BillVisitTyp>(entity =>
        {
            entity.HasKey(e => new { e.BillCd, e.BillCdTypId, e.BillInstanceId }).HasName("pkbill_visit_typ");

            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.DiscontinueInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VisitTypName).IsFixedLength();

            entity.HasOne(d => d.BillCdInstance).WithOne(p => p.BillVisitTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bill_visit_typ");
        });

        modelBuilder.Entity<BillingService>(entity =>
        {
            entity.HasKey(e => e.BillingServiceSer).HasName("XPKBillingService");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_BillingService");
                    tb.HasTrigger("tU_BillingService");
                });

            entity.Property(e => e.BillingServiceSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<Block>(entity =>
        {
            entity.HasKey(e => e.BlockSer).HasName("XPKBlock");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Block");
                    tb.HasTrigger("tD_Block_PatientEditingLog");
                    tb.HasTrigger("tD_Block_VaBusinessLogic");
                    tb.HasTrigger("tI_Block");
                    tb.HasTrigger("tI_Block_PatientEditingLog");
                    tb.HasTrigger("tI_Block_VaBusinessLogic");
                    tb.HasTrigger("tU_Block");
                    tb.HasTrigger("tU_Block_PatientEditingLog");
                    tb.HasTrigger("tU_Block_VaBusinessLogic");
                });

            entity.Property(e => e.BlockSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.AddOnMaterialSerNavigation).WithMany(p => p.Block).HasConstraintName("FKAddOnMaterial_Block");

            entity.HasOne(d => d.MillingMachineResourceSerNavigation).WithMany(p => p.Block).HasConstraintName("FKResource_Block");

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.Block)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKExternalFieldCommon_Block");

            entity.HasOne(d => d.TrayAddOnSerNavigation).WithMany(p => p.Block).HasConstraintName("FKTray_Block");
        });

        modelBuilder.Entity<BmiTrend>(entity =>
        {
            entity.HasKey(e => e.BmiTrendId).HasName("pkbmi_trend");

            entity.Property(e => e.BmiTrendId).ValueGeneratedNever();
            entity.Property(e => e.SexCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BaseTypNavigation).WithMany(p => p.BmiTrend)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_bmi_trend");

            entity.HasOne(d => d.ClsScheme).WithMany(p => p.BmiTrend)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_bmi_trend");
        });

        modelBuilder.Entity<BrachyApplicator>(entity =>
        {
            entity.HasKey(e => e.BrachyApplicatorSer).HasName("XPKBrachyApplicator");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_BrachyApplicator");
                    tb.HasTrigger("tU_BrachyApplicator");
                });

            entity.Property(e => e.BrachyApplicatorSer).ValueGeneratedNever();
            entity.Property(e => e.DeadSpace).HasComment("Amount of dead space in millimeters from the tip of the applicator to the start of the inner lumen of the applicator. Must be non-negative.");
            
                
                
        });

        modelBuilder.Entity<BrachyField>(entity =>
        {
            entity.HasKey(e => e.RadiationSer).HasName("XPKBrachyField");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_BrachyField");
                    tb.HasTrigger("tD_BrachyField_PatientEditingLog");
                    tb.HasTrigger("tD_BrachyField_VaBusinessLogic");
                    tb.HasTrigger("tI_BrachyField");
                    tb.HasTrigger("tI_BrachyField_PatientEditingLog");
                    tb.HasTrigger("tI_BrachyField_VaBusinessLogic");
                    tb.HasTrigger("tU_BrachyField");
                    tb.HasTrigger("tU_BrachyField_PatientEditingLog");
                    tb.HasTrigger("tU_BrachyField_VaBusinessLogic");
                });

            entity.Property(e => e.RadiationSer).ValueGeneratedNever();
            entity.Property(e => e.DeadSpace).HasComment("Amount of dead space in millimeters from the tip of the applicator to the start of the inner lumen of the applicator. Must be non-negative.");

            entity.HasOne(d => d.BrachyApplicatorSerNavigation).WithMany(p => p.BrachyField).HasConstraintName("FKBrachyApplicator_BrachyField");

            entity.HasOne(d => d.BrachySolidApplicatorSerNavigation).WithMany(p => p.BrachyField).HasConstraintName("FKBrachySolidApplicator_BrachyField");

            entity.HasOne(d => d.ChannelSerNavigation).WithMany(p => p.BrachyField).HasConstraintName("FKChannel_BrachyField");

            entity.HasOne(d => d.RadiationSerNavigation).WithOne(p => p.BrachyField).HasConstraintName("FKRadiation_BrachyField");
        });

        modelBuilder.Entity<BrachyFieldHstry>(entity =>
        {
            entity.HasKey(e => e.RadiationHstrySer).HasName("XPKBrachyFieldHstry");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_BrachyFieldHstry");
                    tb.HasTrigger("tU_BrachyFieldHstry");
                });

            entity.Property(e => e.RadiationHstrySer).ValueGeneratedNever();

            entity.HasOne(d => d.RadiationHstrySerNavigation).WithOne(p => p.BrachyFieldHstry).HasConstraintName("FKRadiationHstry_BrachyFieldHstry");
        });

        modelBuilder.Entity<BrachySolidApplicator>(entity =>
        {
            entity.HasKey(e => e.BrachySolidApplicatorSer).HasName("XPKBrachySolidApplicator");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_BrachySolidApplicator");
                    tb.HasTrigger("tI_BrachySolidApplicator");
                    tb.HasTrigger("tU_BrachySolidApplicator");
                });

            entity.Property(e => e.BrachySolidApplicatorSer).ValueGeneratedNever();
            
                
                
            entity.Property(e => e.Transformation).IsFixedLength();

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.BrachySolidApplicator)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPlanSetup_BrachySolidApplicator");
        });

        modelBuilder.Entity<BrachyUnit>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKBrachyUnitReplace");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_BrachyUnit");
                    tb.HasTrigger("tI_BrachyUnit");
                    tb.HasTrigger("tU_BrachyUnit");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.BrachyUnit).HasConstraintName("FKRadiationDevice_BrachyUnit");
        });

        modelBuilder.Entity<BreakPoint>(entity =>
        {
            entity.HasKey(e => e.BreakPointSer).HasName("XPKBreakPoint");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_BreakPoint_PatientEditingLog");
                    tb.HasTrigger("tI_BreakPoint");
                    tb.HasTrigger("tI_BreakPoint_PatientEditingLog");
                    tb.HasTrigger("tU_BreakPoint");
                    tb.HasTrigger("tU_BreakPoint_PatientEditingLog");
                });

            entity.Property(e => e.BreakPointSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.RefPointSerNavigation).WithMany(p => p.BreakPoint)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRefPoint_BreakPoint");
        });

        modelBuilder.Entity<BsaFormulaTyp>(entity =>
        {
            entity.HasKey(e => e.BsaFormulaTyp1).HasName("pkbsa_formula_typ");

            entity.Property(e => e.BsaFormulaTyp1).ValueGeneratedNever();
            entity.Property(e => e.BsaFormulaDesc).IsFixedLength();
            entity.Property(e => e.BsaFormulaName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CalcPrcsCd>(entity =>
        {
            entity.HasKey(e => e.CalcPrcsCd1).HasName("pkcalc_prcs_cd");

            entity.Property(e => e.CalcPrcsCd1).IsFixedLength();
            entity.Property(e => e.CalcPrcsCdDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CalcTyp>(entity =>
        {
            entity.HasKey(e => e.CalcTyp1).HasName("pkcalc_typ");

            entity.Property(e => e.CalcTyp1).ValueGeneratedNever();
            entity.Property(e => e.CalcTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CancelReasonTyp>(entity =>
        {
            entity.HasKey(e => e.CancelReasonTyp1).HasName("pkcancel_reason_typ");

            entity.Property(e => e.CancelReasonTyp1).ValueGeneratedNever();
            entity.Property(e => e.CancelReasonDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CcdCat>(entity =>
        {
            entity.HasKey(e => e.CcdCatId).HasName("pkccd_cat");

            entity.Property(e => e.CcdCatId).ValueGeneratedNever();
            entity.Property(e => e.ExportInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CcdaError>(entity =>
        {
            entity.HasKey(e => e.CcdaErrorId).HasName("pkccda_error");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.TransitionOfCareInbound).WithMany(p => p.CcdaError)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKToCInbound_CcdaError");
        });

        modelBuilder.Entity<CdTblVal>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.RefId, e.CdVal }).HasName("pkcd_tbl_val");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.RefId).IsFixedLength();
            entity.Property(e => e.CdVal).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.RefDef).WithMany(p => p.CdTblVal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_cd_tbl_val");
        });

        modelBuilder.Entity<CdcEthnicGroups>(entity =>
        {
            entity.ToView("cdc_ethnic_groups");

            entity.Property(e => e.CdcCd).IsFixedLength();
        });

        modelBuilder.Entity<CdcRaceTyp>(entity =>
        {
            entity.ToView("cdc_race_typ");

            entity.Property(e => e.CdcCd).IsFixedLength();
        });

        modelBuilder.Entity<ChangeTrackingTableList>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Channel>(entity =>
        {
            entity.HasKey(e => e.ChannelSer).HasName("XPKChannel");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Channel");
                    tb.HasTrigger("tI_Channel");
                    tb.HasTrigger("tU_Channel");
                });

            entity.Property(e => e.ChannelSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.Channel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKBrachyUnit_Channel");
        });

        modelBuilder.Entity<ChargesControl>(entity =>
        {
            entity.HasKey(e => e.ChargesControlSer).HasName("XPKChargesControl");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ChargesControl");
                    tb.HasTrigger("tI_ChargesControl");
                    tb.HasTrigger("tU_ChargesControl");
                });

            entity.Property(e => e.ChargesControlSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.HospitalSerNavigation).WithMany(p => p.ChargesControl).HasConstraintName("FKHospital_ChargesControl");
        });

        modelBuilder.Entity<ChartQa>(entity =>
        {
            entity.HasKey(e => e.ChartQaser).HasName("XPKChartQA");

            entity.ToTable("ChartQA", tb =>
                {
                    tb.HasTrigger("tD_ChartQA");
                    tb.HasTrigger("tI_ChartQA");
                    tb.HasTrigger("tU_ChartQA");
                });

            entity.Property(e => e.ChartQaser).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityInstanceSerNavigation).WithMany(p => p.ChartQa)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKActivityInstance_ChartQA");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.ChartQa).HasConstraintName("FKPatient_ChartQA");
        });

        modelBuilder.Entity<ChartQatreatment>(entity =>
        {
            entity.HasKey(e => e.ChartQatreatmentSer).HasName("XPKChartQATreatment");

            entity.ToTable("ChartQATreatment", tb =>
                {
                    tb.HasTrigger("tI_ChartQATreatment");
                    tb.HasTrigger("tU_ChartQATreatment");
                });

            entity.Property(e => e.ChartQatreatmentSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ChartQaserNavigation).WithMany(p => p.ChartQatreatment).HasConstraintName("FKChartQA_ChartQATreatment");

            entity.HasOne(d => d.RadiationHstrySerNavigation).WithMany(p => p.ChartQatreatment)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRadiationHstry_ChartQATreatment");
        });

        modelBuilder.Entity<ChecklistGroup>(entity =>
        {
            entity.HasKey(e => e.ChecklistGroupSer).HasName("XPKChecklistGroup");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ChecklistGroup");
                    tb.HasTrigger("tI_ChecklistGroup");
                    tb.HasTrigger("tU_ChecklistGroup");
                });

            entity.Property(e => e.ChecklistGroupSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.ChecklistGroup).HasConstraintName("FKDepartment_ChecklistGroup");
        });

        modelBuilder.Entity<ChecklistItem>(entity =>
        {
            entity.HasKey(e => e.ChecklistItemSer).HasName("XPKChecklistItem");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ChecklistItem");
                    tb.HasTrigger("tI_ChecklistItem");
                    tb.HasTrigger("tU_ChecklistItem");
                });

            entity.Property(e => e.ChecklistItemSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.ChecklistItem).HasConstraintName("FKDepartment_ChecklistItem");
        });

        modelBuilder.Entity<ChecklistItemGroup>(entity =>
        {
            entity.HasKey(e => e.ChecklistItemGroupSer).HasName("XPKChecklistItemGroup");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ChecklistItemGroup");
                    tb.HasTrigger("tU_ChecklistItemGroup");
                });

            entity.Property(e => e.ChecklistItemGroupSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ChecklistGroupSerNavigation).WithMany(p => p.ChecklistItemGroup).HasConstraintName("FKChecklistGroup_ChecklistItemGroup");

            entity.HasOne(d => d.ChecklistItemSerNavigation).WithMany(p => p.ChecklistItemGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKChecklistItem_ChecklistItemGroup");
        });

        modelBuilder.Entity<ChildMachine>(entity =>
        {
            entity.HasKey(e => new { e.ChildResourceSer, e.ParentResourceSer }).HasName("XPKChildMachine");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ChildMachine");
                    tb.HasTrigger("tU_ChildMachine");
                });

            
                
                

            entity.HasOne(d => d.ChildResourceSerNavigation).WithMany(p => p.ChildMachineChildResourceSerNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKMachine_ChildMachine2");

            entity.HasOne(d => d.ParentResourceSerNavigation).WithMany(p => p.ChildMachineParentResourceSerNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKMachine_ChildMachine1");
        });

        modelBuilder.Entity<ChildProcessing>(entity =>
        {
            entity.HasKey(e => new { e.ParentProcessingSer, e.ChildProcessingSer }).HasName("XPKChildProcessing");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ChildProcessing");
                    tb.HasTrigger("tU_ChildProcessing");
                });

            
                
                

            entity.HasOne(d => d.ChildProcessingSerNavigation).WithMany(p => p.ChildProcessingChildProcessingSerNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKProcessing_ChildProcessing1");

            entity.HasOne(d => d.ParentProcessingSerNavigation).WithMany(p => p.ChildProcessingParentProcessingSerNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKProcessing_ChlildProcessing");
        });

        modelBuilder.Entity<ClinNotifPtListQueryXref>(entity =>
        {
            entity.HasKey(e => new { e.ClinicalNotificationId, e.PtListQueryId }).HasName("pkclin_notif_pt_list_query_xref");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Clinic>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.ClinicId }).HasName("pkclinic");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.ClinicName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ClinicProvider>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.ClinicId, e.UserInstId, e.Userid }).HasName("pkclinic_provider");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ClinicalNotifctnUsrGrp>(entity =>
        {
            entity.HasKey(e => e.ClinicalNotifctnUsrGrpId).HasName("pkclinical_notifctn_usr_grp");

            entity.Property(e => e.ClinicalNotifctnUsrGrpId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ClinicalNotification>(entity =>
        {
            entity.HasKey(e => e.ClinicalNotificationId).HasName("pkclinical_notification");

            entity.Property(e => e.ClinicalNotificationId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.MaxFreqUnit).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ClinicalNotificationHstry>(entity =>
        {
            entity.HasKey(e => e.ClinicalNotificationHstryId).HasName("pkclinical_notification_hstry");

            entity.Property(e => e.ClinicalNotificationHstryId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ClsCritLst>(entity =>
        {
            entity.HasKey(e => new { e.SchemeAuthor, e.EffDate, e.ClsValue }).HasName("pkcls_crit_lst");

            entity.Property(e => e.ClsValueDisp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ClsScheme>(entity =>
        {
            entity.HasKey(e => e.ClsSchemeId).HasName("pkcls_scheme");

            entity.ToTable("cls_scheme", tb => tb.HasTrigger("tU_cls_scheme"));

            entity.Property(e => e.ClsSchemeId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.EnmInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.SchemeName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.OrigAuthorNavigation).WithMany(p => p.ClsSchemeOrigAuthorNavigation).HasConstraintName("fk2_cls_scheme");

            entity.HasOne(d => d.SchemeAuthorNavigation).WithMany(p => p.ClsSchemeSchemeAuthorNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_cls_scheme");

            entity.HasOne(d => d.SchemeTypNavigation).WithMany(p => p.ClsScheme)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_cls_scheme");
        });

        modelBuilder.Entity<Cmtee>(entity =>
        {
            entity.HasKey(e => e.CmteeId).HasName("pkcmtee");

            entity.Property(e => e.CmteeId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.CmteeAbbr).IsFixedLength();
            entity.Property(e => e.CmteeDesc).IsFixedLength();
            entity.Property(e => e.CmteeName).IsFixedLength();
            entity.Property(e => e.DefaultRoom).IsFixedLength();
            entity.Property(e => e.EmailGroupName).IsFixedLength();
            entity.Property(e => e.InternalInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeActivityPrd>(entity =>
        {
            entity.HasKey(e => new { e.CmteeId, e.ActivityTyp, e.ActivityPrd }).HasName("pkcmtee_activity_prd");

            entity.Property(e => e.ModeInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeAgenda>(entity =>
        {
            entity.HasKey(e => e.CmteeAgendaId).HasName("pkcmtee_agenda");

            entity.Property(e => e.CmteeAgendaId).ValueGeneratedNever();
            entity.Property(e => e.CompleteInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeAgendaGuest>(entity =>
        {
            entity.HasKey(e => e.CmteeGuestId).HasName("pkcmtee_agenda_guest");

            entity.Property(e => e.CmteeGuestId).ValueGeneratedNever();
            entity.Property(e => e.GuestName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeAgendaIssue>(entity =>
        {
            entity.HasKey(e => e.CmteeIssueId).HasName("pkcmtee_agenda_issue");

            entity.Property(e => e.CmteeIssueId).ValueGeneratedNever();
            entity.Property(e => e.ConfirmInd).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.DistributedInd).IsFixedLength();
            entity.Property(e => e.Motion).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeAgendaMbr>(entity =>
        {
            entity.HasKey(e => new { e.CmteeId, e.CmteeIssueId, e.CmteeAgendaId, e.CmteeMbrStkhId }).HasName("pkcmtee_agenda_mbr");

            entity.Property(e => e.CmteeMbrStkhId).IsFixedLength();
            entity.Property(e => e.ExcdInd).IsFixedLength();
            entity.Property(e => e.PrimaryInd).IsFixedLength();
            entity.Property(e => e.SecondaryInd).IsFixedLength();
            entity.Property(e => e.StatInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeAgendaMins>(entity =>
        {
            entity.HasKey(e => e.CmteeAgendaId).HasName("pkcmtee_agenda_mins");

            entity.Property(e => e.CmteeAgendaId).ValueGeneratedNever();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.ChairStkhId).IsFixedLength();
            entity.Property(e => e.MinsApprInd).IsFixedLength();
            entity.Property(e => e.PrevMinsApprInd).IsFixedLength();
            entity.Property(e => e.RecordedByStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeAgendaMinsMbr>(entity =>
        {
            entity.HasKey(e => new { e.CmteeAgendaId, e.MbrStkhId }).HasName("pkcmtee_agenda_mins_mbr");

            entity.Property(e => e.MbrStkhId).IsFixedLength();
            entity.Property(e => e.MbrAttendInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeAgendaTrial>(entity =>
        {
            entity.HasKey(e => new { e.CmteeId, e.CmteeIssueId, e.TpName, e.TpVersNo }).HasName("pkcmtee_agenda_trial");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.ConfirmInd).IsFixedLength();
            entity.Property(e => e.DistributedInd).IsFixedLength();
            entity.Property(e => e.RcmdPoints).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeDate>(entity =>
        {
            entity.HasKey(e => e.CmteeAgendaId).HasName("pkcmtee_date");

            entity.Property(e => e.CmteeAgendaId).ValueGeneratedNever();
            entity.Property(e => e.DateConfirmInd).IsFixedLength();
            entity.Property(e => e.MeetingOccurInd).IsFixedLength();
            entity.Property(e => e.MtgRoom).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeFnctn>(entity =>
        {
            entity.HasKey(e => new { e.CmteeId, e.CmteeFnctnTyp }).HasName("pkcmtee_fnctn");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeFnctnTyp>(entity =>
        {
            entity.HasKey(e => new { e.CmteeFnctnTyp1, e.CultureCd }).HasName("pkcmtee_fnctn_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.CmteeFnctnDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeIssue>(entity =>
        {
            entity.HasKey(e => e.CmteeIssueTypId).HasName("pkcmtee_issue");

            entity.Property(e => e.CmteeIssueTypId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.CmteeCatDesc).IsFixedLength();
            entity.Property(e => e.CmteeIssueAbrv).IsFixedLength();
            entity.Property(e => e.CmteeIssueDesc).IsFixedLength();
            entity.Property(e => e.CmteeTopicDesc).IsFixedLength();
            entity.Property(e => e.IaInd).IsFixedLength();
            entity.Property(e => e.InitialInd).IsFixedLength();
            entity.Property(e => e.MonitorInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeIssueMotionTyp>(entity =>
        {
            entity.HasKey(e => new { e.CmteeIssueMotionTyp1, e.CultureCd }).HasName("pkcmtee_issue_motion_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.CmteeIssueMotionDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeIssueRcmd>(entity =>
        {
            entity.HasKey(e => e.CmteeIssueRcmdId).HasName("pkcmtee_issue_rcmd");

            entity.Property(e => e.CmteeIssueRcmdId).ValueGeneratedNever();
            entity.Property(e => e.CmteeIssueRcmdDesc).IsFixedLength();
            entity.Property(e => e.RcmdMotionDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeIssueTyp>(entity =>
        {
            entity.HasKey(e => e.IssueTyp).HasName("pkcmtee_issue_typ");

            entity.Property(e => e.IssueTyp).ValueGeneratedNever();
            entity.Property(e => e.IssueDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeLtrTemplate>(entity =>
        {
            entity.HasKey(e => new { e.CmteeId, e.LtrTyp }).HasName("pkcmtee_ltr_template");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeMbr>(entity =>
        {
            entity.HasKey(e => new { e.CmteeId, e.CmteeMbrStkhId }).HasName("pkcmtee_mbr");

            entity.Property(e => e.CmteeMbrStkhId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.CmteeChairInd).IsFixedLength();
            entity.Property(e => e.CmteeViceChairInd).IsFixedLength();
            entity.Property(e => e.SittingMbrInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeMbrRoleTyp>(entity =>
        {
            entity.HasKey(e => new { e.CmteeMbrRoleTyp1, e.CultureCd }).HasName("pkcmtee_mbr_role_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.CmteeMbrRoleTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeMtg>(entity =>
        {
            entity.HasKey(e => e.CmteeId).HasName("pkcmtee_mtg");

            entity.Property(e => e.CmteeId).ValueGeneratedNever();
            entity.Property(e => e.MtgFreqCd).IsFixedLength();
            entity.Property(e => e.MtgFriInd).IsFixedLength();
            entity.Property(e => e.MtgMonInd).IsFixedLength();
            entity.Property(e => e.MtgSatInd).IsFixedLength();
            entity.Property(e => e.MtgSunInd).IsFixedLength();
            entity.Property(e => e.MtgThurInd).IsFixedLength();
            entity.Property(e => e.MtgTuesInd).IsFixedLength();
            entity.Property(e => e.MtgWedInd).IsFixedLength();
            entity.Property(e => e.MtgWeekOfMonth).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeRcmdAbs>(entity =>
        {
            entity.HasKey(e => new { e.CmteeId, e.CmteeDateId, e.RcmdAbsId }).HasName("pkcmtee_rcmd_abs");

            entity.Property(e => e.CmteeMbrStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeRcmdAbstention>(entity =>
        {
            entity.HasKey(e => new { e.CmteeIssueId, e.StkhId }).HasName("pkcmtee_rcmd_abstention");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CmteeRcmdCc>(entity =>
        {
            entity.HasKey(e => new { e.CmteeId, e.CmteeDateId, e.CmteeCcId }).HasName("pkcmtee_rcmd_cc");

            entity.Property(e => e.CmteeMbrStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CodeStructureCode>(entity =>
        {
            entity.HasKey(e => e.CodeStructureCodeSer).HasName("XPKCodeStructureCode");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_CodeStructureCode");
                    tb.HasTrigger("tU_CodeStructureCode");
                });

            entity.Property(e => e.CodeStructureCodeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.TargetStructureCodeSerNavigation).WithMany(p => p.CodeStructureCode).HasConstraintName("FKStructureCode_CodeStructureCode");
        });

        modelBuilder.Entity<CodeSystem>(entity =>
        {
            entity.HasKey(e => e.CodeSystemId).HasName("pkcode_system");

            entity.Property(e => e.CodeSystemId).ValueGeneratedNever();
            entity.Property(e => e.CodeSystemName).IsFixedLength();
            entity.Property(e => e.Hl7Oid).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CollcVol>(entity =>
        {
            entity.HasKey(e => e.CollcVolId).HasName("pkcollc_vol");

            entity.Property(e => e.CollcVolId).ValueGeneratedNever();
            entity.Property(e => e.CollcVolCd).IsFixedLength();
            entity.Property(e => e.CollcVolDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CompTyp>(entity =>
        {
            entity.HasKey(e => e.CompTyp1).HasName("pkcomp_typ");

            entity.Property(e => e.CompTyp1).ValueGeneratedNever();
            entity.Property(e => e.CompDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Compensator>(entity =>
        {
            entity.HasKey(e => e.CompensatorSer).HasName("XPKCompensator");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Compensator");
                    tb.HasTrigger("tD_Compensator_PatientEditingLog");
                    tb.HasTrigger("tD_Compensator_VaBusinessLogic");
                    tb.HasTrigger("tI_Compensator");
                    tb.HasTrigger("tI_Compensator_PatientEditingLog");
                    tb.HasTrigger("tI_Compensator_VaBusinessLogic");
                    tb.HasTrigger("tU_Compensator");
                    tb.HasTrigger("tU_Compensator_PatientEditingLog");
                    tb.HasTrigger("tU_Compensator_VaBusinessLogic");
                });

            entity.Property(e => e.CompensatorSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.AddOnMaterialSerNavigation).WithMany(p => p.Compensator).HasConstraintName("FKAddOnMaterial_Compensator");

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.Compensator)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKExternalFieldCommon_Compensator");

            entity.HasOne(d => d.TrayAddOnSerNavigation).WithMany(p => p.Compensator).HasConstraintName("FKTray_Compensator");
        });

        modelBuilder.Entity<ComplaintTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.ComplaintId }).HasName("pkcomplaint_typ");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.ComplaintName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CompletionStatus>(entity =>
        {
            entity.HasKey(e => e.CompletionStatusId).HasName("pkcompletion_status");

            entity.Property(e => e.CompletionStatusId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BaseTypNavigation).WithMany(p => p.CompletionStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_completion_status");
        });

        modelBuilder.Entity<ComplianceItem>(entity =>
        {
            entity.HasKey(e => new { e.ComplianceItemId, e.CompliancePgmId }).HasName("pkcompliance_item");

            entity.Property(e => e.CompliancePgmId).HasDefaultValue(1);
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.BaseRequiredInd).IsFixedLength();
            entity.Property(e => e.BinaryInd).IsFixedLength();
            entity.Property(e => e.BonusInd).IsFixedLength();
            entity.Property(e => e.ComplianceItem1).IsFixedLength();
            entity.Property(e => e.TotalCalcMethod).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CompliancePeriodHospital>(entity =>
        {
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.HospitalSerNavigation).WithMany(p => p.CompliancePeriodHospital)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK1_CompliancePeriodHospital");
        });

        modelBuilder.Entity<CompliancePeriodInst>(entity =>
        {
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CompliancePgm>(entity =>
        {
            entity.HasKey(e => e.CompliancePgmId).HasName("pkcompliance_pgm");

            entity.Property(e => e.CompliancePgmId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CompliancePrd>(entity =>
        {
            entity.HasKey(e => e.CompliancePrdId).HasName("pkcompliance_prd");

            entity.Property(e => e.CompliancePrdId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.GroupReportingInd).IsFixedLength();
            entity.Property(e => e.JobActiveInd).IsFixedLength();
            entity.Property(e => e.JobExecutionTime).IsFixedLength();
            entity.Property(e => e.MuErrorInd).IsFixedLength();
            entity.Property(e => e.PrdDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.Tin).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.CompliancePgm).WithMany(p => p.CompliancePrd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_compliance_prd");
        });

        modelBuilder.Entity<CompliancePrdBinaryMeasure>(entity =>
        {
            entity.Property(e => e.ComplianceItem).IsFixedLength();
            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.MeasureMet).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ConfigurationGuard>(entity =>
        {
            entity.HasKey(e => e.HstryTimeStamp)
                .HasName("XPKConfigurationGuard")
                .IsClustered(false);

            
                
                
        });

        modelBuilder.Entity<ConfigurationItem>(entity =>
        {
            entity.HasKey(e => new { e.ConfigurationSetSer, e.ConfigurationItemId })
                .HasName("XPKConfigurationItem")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ConfigurationItem");
                    tb.HasTrigger("tU_ConfigurationItem");
                });

            
                
                

            entity.HasOne(d => d.ConfigurationSetSerNavigation).WithMany(p => p.ConfigurationItem).HasConstraintName("FKConfigurationSet_ConfigurationItem");
        });

        modelBuilder.Entity<ConfigurationSet>(entity =>
        {
            entity.HasKey(e => e.ConfigurationSetSer)
                .HasName("XPKConfigurationSet")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ConfigurationSet");
                    tb.HasTrigger("tI_ConfigurationSet");
                    tb.HasTrigger("tU_ConfigurationSet");
                });

            entity.Property(e => e.ConfigurationSetSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.AppUserSerNavigation).WithMany(p => p.ConfigurationSet)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKAppUser_ConfigurationSet");

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.ConfigurationSet)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKDepartment_ConfigurationSet");
        });

        modelBuilder.Entity<ConfiguredEmt>(entity =>
        {
            entity.HasKey(e => e.ConfiguredEmtser).HasName("XPKConfiguredEMT");

            entity.ToTable("ConfiguredEMT", tb =>
                {
                    tb.HasTrigger("tD_ConfiguredEMT");
                    tb.HasTrigger("tI_ConfiguredEMT");
                    tb.HasTrigger("tU_ConfiguredEMT");
                });

            entity.Property(e => e.ConfiguredEmtser).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.EnergyModeSerNavigation).WithMany(p => p.ConfiguredEmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKEnergyMode_ConfiguredEMT");

            entity.HasOne(d => d.TechniqueSerNavigation).WithMany(p => p.ConfiguredEmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTechnique_ConfiguredEMT");
        });

        modelBuilder.Entity<ContactTyp>(entity =>
        {
            entity.HasKey(e => e.ContactTyp1).HasName("pkcontact_typ");

            entity.Property(e => e.ContactTyp1).ValueGeneratedNever();
            entity.Property(e => e.ContactDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ContrastBolus>(entity =>
        {
            entity.HasKey(e => e.ContrastBolusSer).HasName("XPKContrastBolus");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ContrastBolus");
                    tb.HasTrigger("tI_ContrastBolus");
                    tb.HasTrigger("tU_ContrastBolus");
                });

            entity.Property(e => e.ContrastBolusSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.SliceSerNavigation).WithMany(p => p.ContrastBolus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSlice_ContrastBolus");
        });

        modelBuilder.Entity<ContrastBolusCode>(entity =>
        {
            entity.HasKey(e => e.ContrastBolusCodeSer).HasName("XPKContrastBolusCode");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ContrastBolusCode");
                    tb.HasTrigger("tU_ContrastBolusCode");
                });

            entity.Property(e => e.ContrastBolusCodeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ContrastBolusSerNavigation).WithMany(p => p.ContrastBolusCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKContrastBolus_ContrastBolusCode");
        });

        modelBuilder.Entity<ContrastFlow>(entity =>
        {
            entity.HasKey(e => e.ContrastFlowSer).HasName("XPKContrastFlow");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ContrastFlow");
                    tb.HasTrigger("tU_ContrastFlow");
                });

            entity.Property(e => e.ContrastFlowSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ContrastBolusSerNavigation).WithMany(p => p.ContrastFlow)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKContrastBolus_ContrastFlow");
        });

        modelBuilder.Entity<ControlPoint>(entity =>
        {
            entity.HasKey(e => e.ControlPointSer).HasName("XPKControlPoint");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ControlPoint");
                    tb.HasTrigger("tD_ControlPoint_PatientEditingLog");
                    tb.HasTrigger("tD_ControlPoint_VaBusinessLogic");
                    tb.HasTrigger("tI_ControlPoint");
                    tb.HasTrigger("tI_ControlPoint_PatientEditingLog");
                    tb.HasTrigger("tI_ControlPoint_VaBusinessLogic");
                    tb.HasTrigger("tU_ControlPoint");
                    tb.HasTrigger("tU_ControlPoint_PatientEditingLog");
                    tb.HasTrigger("tU_ControlPoint_VaBusinessLogic");
                });

            entity.Property(e => e.ControlPointSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.ControlPoint).HasConstraintName("FKExternalFieldCommon_ControlPoint");
        });

        modelBuilder.Entity<ControlPointProton>(entity =>
        {
            entity.HasKey(e => e.ControlPointSer).HasName("XPKControlPointProton");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ControlPointProton");
                    tb.HasTrigger("tI_ControlPointProton_PatientEditingLog");
                    tb.HasTrigger("tI_ControlPointProton_VaBusinessLogic");
                    tb.HasTrigger("tU_ControlPointProton");
                    tb.HasTrigger("tU_ControlPointProton_PatientEditingLog");
                    tb.HasTrigger("tU_ControlPointProton_VaBusinessLogic");
                });

            entity.Property(e => e.ControlPointSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithMany(p => p.ControlPointProton)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKAddOn_ControlPointProton");

            entity.HasOne(d => d.ControlPointSerNavigation).WithOne(p => p.ControlPointProton).HasConstraintName("FKControlPoint_ControlPointProton");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryId).HasName("pkcountry");

            entity.Property(e => e.CountryId).ValueGeneratedNever();
            entity.Property(e => e.CountryCd).IsFixedLength();
            entity.Property(e => e.CountryDesc).IsFixedLength();
            entity.Property(e => e.PhysRegLabel).IsFixedLength();
            entity.Property(e => e.PhysRegLabelFmt).IsFixedLength();
            entity.Property(e => e.PhysRxLabel).IsFixedLength();
            entity.Property(e => e.PhysRxLabelFmt).IsFixedLength();
            entity.Property(e => e.SinFmt).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CountryField>(entity =>
        {
            entity.HasKey(e => new { e.CountryId, e.FmtFieldName }).HasName("pkcountry_field");

            entity.Property(e => e.FmtFieldName).IsFixedLength();
            entity.Property(e => e.FmtFieldLbl).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.CourseSer).HasName("XPKCourse");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Course");
                    tb.HasTrigger("tD_Course_PatientEditingLog");
                    tb.HasTrigger("tD_Course_VaBusinessLogic");
                    tb.HasTrigger("tI_Course");
                    tb.HasTrigger("tI_Course_PatientEditingLog");
                    tb.HasTrigger("tI_Course_VaBusinessLogic");
                    tb.HasTrigger("tU_Course");
                    tb.HasTrigger("tU_Course_PatientEditingLog");
                    tb.HasTrigger("tU_Course_VaBusinessLogic");
                });

            entity.Property(e => e.CourseSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.Course)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_Course");
        });

        modelBuilder.Entity<CourseDiagnosis>(entity =>
        {
            entity.HasKey(e => new { e.CourseSer, e.DiagnosisSer })
                .HasName("XPKCourseDiagnosis")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_CourseDiagnosis");
                    tb.HasTrigger("tI_CourseDiagnosis_VaBusinessLogic");
                    tb.HasTrigger("tU_CourseDiagnosis");
                    tb.HasTrigger("tU_CourseDiagnosis_VaBusinessLogic");
                });

            
                
                

            entity.HasOne(d => d.CourseSerNavigation).WithMany(p => p.CourseDiagnosis)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKCourse_CourseDiagnosis");
        });

        modelBuilder.Entity<CoursePrintInfo>(entity =>
        {
            entity.HasKey(e => e.CourseSer).HasName("XPKCoursePrintInfo");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_CoursePrintInfo");
                    tb.HasTrigger("tU_CoursePrintInfo");
                });

            entity.Property(e => e.CourseSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.CourseSerNavigation).WithOne(p => p.CoursePrintInfo).HasConstraintName("FKCourse_CoursePrintInfo");
        });

        modelBuilder.Entity<CoursePrintInfo1>(entity =>
        {
            entity.HasKey(e => e.CourseSer).HasName("XPK_CoursePrintInfo");

            entity.Property(e => e.CourseSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.CourseSerNavigation).WithOne(p => p.CoursePrintInfo1).HasConstraintName("FKCourse_DWHCoursePrintInfo");
        });

        modelBuilder.Entity<Credit>(entity =>
        {
            entity.HasKey(e => e.CreditSer).HasName("XPKCredit");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Credit");
                    tb.HasTrigger("tI_Credit");
                    tb.HasTrigger("tU_Credit");
                });

            entity.Property(e => e.CreditSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActInstProcCodeSerNavigation).WithMany(p => p.Credit)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKActInstProcCode_Credit");

            entity.HasOne(d => d.ActivityCaptureSerNavigation).WithMany(p => p.Credit)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKActivityCapture_Credit");
        });

        modelBuilder.Entity<CreditMh>(entity =>
        {
            entity.HasKey(e => new { e.CreditSer, e.CreditRevCount }).HasName("XPKCreditMH");

            entity.ToTable("CreditMH", tb =>
                {
                    tb.HasTrigger("tD_CreditMH");
                    tb.HasTrigger("tI_CreditMH");
                    tb.HasTrigger("tU_CreditMH");
                });

            
                
                

            entity.HasOne(d => d.CreditSerNavigation).WithMany(p => p.CreditMh).HasConstraintName("FKCredit_CreditMH");
        });

        modelBuilder.Entity<CrwCurJobs>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.SessionId, e.JobNo }).HasName("pkcrw_cur_jobs");

            entity.Property(e => e.SessionId).IsFixedLength();
            entity.Property(e => e.Hdr1).IsFixedLength();
            entity.Property(e => e.Hdr2).IsFixedLength();
            entity.Property(e => e.Hdr3).IsFixedLength();
            entity.Property(e => e.Hdr4).IsFixedLength();
            entity.Property(e => e.Hdr5).IsFixedLength();
            entity.Property(e => e.Hdr6).IsFixedLength();
            entity.Property(e => e.Hdr7).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ReportGroupId).IsFixedLength();
            entity.Property(e => e.ReportName).IsFixedLength();
            entity.Property(e => e.Str1).IsFixedLength();
            entity.Property(e => e.Str2).IsFixedLength();
            entity.Property(e => e.Str3).IsFixedLength();
            entity.Property(e => e.Str4).IsFixedLength();
            entity.Property(e => e.Str5).IsFixedLength();
            entity.Property(e => e.Str6).IsFixedLength();
            entity.Property(e => e.Str7).IsFixedLength();
            entity.Property(e => e.Str8).IsFixedLength();
            entity.Property(e => e.Str9).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
        });

        modelBuilder.Entity<CrwDemgrMsg>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTimeSch }).HasName("pkcrw_demgr_msg");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AddressInd).IsFixedLength();
            entity.Property(e => e.BusTelInd).IsFixedLength();
            entity.Property(e => e.CityInd).IsFixedLength();
            entity.Property(e => e.CountryInd).IsFixedLength();
            entity.Property(e => e.CountyInd).IsFixedLength();
            entity.Property(e => e.Hdr1).IsFixedLength();
            entity.Property(e => e.HomeTelInd).IsFixedLength();
            entity.Property(e => e.PicInd).IsFixedLength();
            entity.Property(e => e.ProviderInd).IsFixedLength();
            entity.Property(e => e.ReferringInd).IsFixedLength();
            entity.Property(e => e.SessionId).IsFixedLength();
            entity.Property(e => e.SsnDemoInd).IsFixedLength();
            entity.Property(e => e.StateInd).IsFixedLength();
            entity.Property(e => e.Str1).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.ZipInd).IsFixedLength();
        });

        modelBuilder.Entity<CrwHxJobs>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.SessionId, e.JobNo }).HasName("pkcrw_hx_jobs");

            entity.Property(e => e.SessionId).IsFixedLength();
            entity.Property(e => e.Hdr1).IsFixedLength();
            entity.Property(e => e.Hdr2).IsFixedLength();
            entity.Property(e => e.Hdr3).IsFixedLength();
            entity.Property(e => e.Hdr4).IsFixedLength();
            entity.Property(e => e.Hdr5).IsFixedLength();
            entity.Property(e => e.Hdr6).IsFixedLength();
            entity.Property(e => e.Hdr7).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ReportGroupId).IsFixedLength();
            entity.Property(e => e.ReportName).IsFixedLength();
            entity.Property(e => e.Str1).IsFixedLength();
            entity.Property(e => e.Str2).IsFixedLength();
            entity.Property(e => e.Str3).IsFixedLength();
            entity.Property(e => e.Str4).IsFixedLength();
            entity.Property(e => e.Str5).IsFixedLength();
            entity.Property(e => e.Str6).IsFixedLength();
            entity.Property(e => e.Str7).IsFixedLength();
            entity.Property(e => e.Str8).IsFixedLength();
            entity.Property(e => e.Str9).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
        });

        modelBuilder.Entity<CrwReportAccess>(entity =>
        {
            entity.HasKey(e => new { e.ReportName, e.GroupInstId, e.UserGroupId }).HasName("pkcrw_report_access");

            entity.Property(e => e.ReportName).IsFixedLength();
            entity.Property(e => e.GroupInstId).IsFixedLength();
            entity.Property(e => e.UserGroupId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ReportNameNavigation).WithMany(p => p.CrwReportAccess)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_crw_report_access");

            entity.HasOne(d => d.UserGroup).WithMany(p => p.CrwReportAccess)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_crw_report_access");
        });

        modelBuilder.Entity<CrwReportLink>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.CrwReportLinkId }).HasName("pkcrw_report_link");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.CtrlLabel).IsFixedLength();
            entity.Property(e => e.ReportName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.WindowLabel).IsFixedLength();
        });

        modelBuilder.Entity<CrwReportList>(entity =>
        {
            entity.HasKey(e => e.ReportName).HasName("pkcrw_report_list");

            entity.Property(e => e.ReportName).IsFixedLength();
            entity.Property(e => e.CpInd).IsFixedLength();
            entity.Property(e => e.CtaInd).IsFixedLength();
            entity.Property(e => e.CtaModeCd).IsFixedLength();
            entity.Property(e => e.MgrInd).IsFixedLength();
            entity.Property(e => e.PlnInd).IsFixedLength();
            entity.Property(e => e.ReportDesc).IsFixedLength();
            entity.Property(e => e.ReportDwName).IsFixedLength();
            entity.Property(e => e.ReportEnv).IsFixedLength();
            entity.Property(e => e.ReportTitle).IsFixedLength();
            entity.Property(e => e.RxInd).IsFixedLength();
            entity.Property(e => e.SecInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TxInd).IsFixedLength();

            entity.HasOne(d => d.ReportTypNavigation).WithMany(p => p.CrwReportList)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_crw_report_list");
        });

        modelBuilder.Entity<CrwReportParm>(entity =>
        {
            entity.HasKey(e => new { e.ReportName, e.ParmName }).HasName("pkcrw_report_parm");

            entity.Property(e => e.ReportName).IsFixedLength();
            entity.Property(e => e.ParmName).IsFixedLength();
            entity.Property(e => e.DataSourceProcArgsTyp).IsFixedLength();
            entity.Property(e => e.DataSourceProcName).IsFixedLength();
            entity.Property(e => e.DisplayTyp).IsFixedLength();
            entity.Property(e => e.ParentParmName).IsFixedLength();
            entity.Property(e => e.ParmHelp).IsFixedLength();
            entity.Property(e => e.ParmInitValue).IsFixedLength();
            entity.Property(e => e.ParmLabel).IsFixedLength();
            entity.Property(e => e.ParmTyp).IsFixedLength();
            entity.Property(e => e.RequiredInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ReportNameNavigation).WithMany(p => p.CrwReportParm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_crw_report_parm");
        });

        modelBuilder.Entity<CrwReportTyp>(entity =>
        {
            entity.HasKey(e => e.ReportTyp).HasName("pkcrw_report_typ");

            entity.Property(e => e.ReportTyp).ValueGeneratedNever();
            entity.Property(e => e.ReportTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CrwReportUser>(entity =>
        {
            entity.HasKey(e => new { e.UserInstId, e.Userid, e.ReportName }).HasName("pkcrw_report_user");

            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.ReportName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CsOfDthTyp>(entity =>
        {
            entity.HasKey(e => e.CsOfDthTypId).HasName("pkcs_of_dth_typ");

            entity.Property(e => e.CsOfDthTypId).ValueGeneratedNever();
            entity.Property(e => e.CsOfDthTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CtActivity>(entity =>
        {
            entity.HasKey(e => e.ActivityId).HasName("pkct_activity");

            entity.Property(e => e.ActivityId).ValueGeneratedNever();
            entity.Property(e => e.OwnerStkhId).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtBudgetTyp>(entity =>
        {
            entity.HasKey(e => new { e.BudgetTyp, e.CultureCd }).HasName("pkct_budget_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.BudgetDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtConsentFormStatus>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.FileName, e.VersNo }).HasName("pkct_consent_form_status");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.FileName).IsFixedLength();
            entity.Property(e => e.VersNo).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtContractTyp>(entity =>
        {
            entity.HasKey(e => new { e.ContractTyp, e.CultureCd }).HasName("pkct_contract_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.ContractDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtCustForm>(entity =>
        {
            entity.HasKey(e => e.CustFormId).HasName("pkct_cust_form");

            entity.Property(e => e.CustFormId).ValueGeneratedNever();
            entity.Property(e => e.CustFormActiveInd).IsFixedLength();
            entity.Property(e => e.CustFormDesc).IsFixedLength();
            entity.Property(e => e.CustFormName).IsFixedLength();
            entity.Property(e => e.CustFormTrialSpecificInd).IsFixedLength();
            entity.Property(e => e.CustFormVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CtCustFormFields>(entity =>
        {
            entity.HasKey(e => new { e.CustFormId, e.FormFieldId }).HasName("pkct_cust_form_fields");

            entity.Property(e => e.FieldDataSourceSpName).IsFixedLength();
            entity.Property(e => e.FieldName).IsFixedLength();
            entity.Property(e => e.FieldOutcomesDesc).IsFixedLength();
            entity.Property(e => e.FieldOutcomesName).IsFixedLength();
            entity.Property(e => e.FieldRequiredInd).IsFixedLength();
            entity.Property(e => e.FieldWordFieldTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtCustFormResultDetail>(entity =>
        {
            entity.HasKey(e => new { e.CustFormResultId, e.CustFormFieldName }).HasName("pkct_cust_form_result_detail");

            entity.Property(e => e.CustFormFieldName).IsFixedLength();
            entity.Property(e => e.CustFormFieldValue).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtCustFormResultHdr>(entity =>
        {
            entity.HasKey(e => e.CustFormResultId).HasName("pkct_cust_form_result_hdr");

            entity.Property(e => e.CustFormResultId).ValueGeneratedNever();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<CtCustFormTyp>(entity =>
        {
            entity.HasKey(e => e.CtCustFormTyp1).HasName("pkct_cust_form_typ");

            entity.Property(e => e.CtCustFormTyp1).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.CtCustFormTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtDcmnt>(entity =>
        {
            entity.HasKey(e => e.CtDcmntId).HasName("pkct_dcmnt");

            entity.Property(e => e.CtDcmntId).ValueGeneratedNever();
            entity.Property(e => e.DcmntDesc).IsFixedLength();
            entity.Property(e => e.DcmntFileDirectory).IsFixedLength();
            entity.Property(e => e.DcmntFileName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<CtFinDisclosureTyp>(entity =>
        {
            entity.HasKey(e => new { e.FinDisclosureTyp, e.CultureCd }).HasName("pkct_fin_disclosure_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.FinDisclosureDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtForm1SignTyp>(entity =>
        {
            entity.HasKey(e => new { e.Form1SignTyp, e.CultureCd }).HasName("pkct_form1_sign_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.Form1SignDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtForm1Typ>(entity =>
        {
            entity.HasKey(e => new { e.Form1Typ, e.CultureCd }).HasName("pkct_form1_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.Form1Desc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtIbcReviewTyp>(entity =>
        {
            entity.HasKey(e => new { e.IbcReviewTyp, e.CultureCd }).HasName("pkct_ibc_review_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.IbcReviewDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtIcfTyp>(entity =>
        {
            entity.HasKey(e => new { e.IcfTyp, e.CultureCd }).HasName("pkct_icf_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.IcfDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtInstrumentsTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstrumentsTyp, e.CultureCd }).HasName("pkct_instruments_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.InstrumentsDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtIssueRcmdTyp>(entity =>
        {
            entity.HasKey(e => e.CtIssueRcmdTyp1).HasName("pkct_issue_rcmd_typ");

            entity.Property(e => e.CtIssueRcmdTyp1).ValueGeneratedNever();
            entity.Property(e => e.CtIssueRcmdDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CtMatStorage>(entity =>
        {
            entity.HasKey(e => e.MatStorageId).HasName("pkct_mat_storage");

            entity.Property(e => e.MatStorageId).ValueGeneratedNever();
            entity.Property(e => e.BoxDesc).IsFixedLength();
            entity.Property(e => e.LocDesc).IsFixedLength();
            entity.Property(e => e.MatMovedStkhId).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtMgdByTyp>(entity =>
        {
            entity.HasKey(e => new { e.MgdByTyp, e.CultureCd }).HasName("pkct_mgd_by_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.MgdByDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtNextStepTyp>(entity =>
        {
            entity.HasKey(e => new { e.NextStepTyp, e.CultureCd }).HasName("pkct_next_step_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.NextStepDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtPhaseCd>(entity =>
        {
            entity.HasKey(e => new { e.CtPhaseCd1, e.CultureCd }).HasName("pkct_phase_cd");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.CtPhaseDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtPlsoTyp>(entity =>
        {
            entity.HasKey(e => new { e.PlsoTyp, e.CultureCd }).HasName("pkct_plso_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.PlsoDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtPriorityListTyp>(entity =>
        {
            entity.HasKey(e => new { e.PriorityListTyp, e.CultureCd }).HasName("pkct_priority_list_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.PriorityListDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtProtocol1572Typ>(entity =>
        {
            entity.HasKey(e => new { e.Protocol1572Typ, e.CultureCd }).HasName("pkct_protocol_1572_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.Protocol1572Desc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtProtocolRecvStatusTyp>(entity =>
        {
            entity.HasKey(e => new { e.ProtocolRecvStatusTyp, e.CultureCd }).HasName("pkct_protocol_recv_status_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.ProtocolRecvStatusDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtRegDcmntTyp>(entity =>
        {
            entity.HasKey(e => new { e.RegDcmntTyp, e.CultureCd }).HasName("pkct_reg_dcmnt_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.RegDcmntDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtResReviewStatusTyp>(entity =>
        {
            entity.HasKey(e => new { e.ResReviewStatusTyp, e.CultureCd }).HasName("pkct_res_review_status_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.ResReviewStatusDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtRscReviewTyp>(entity =>
        {
            entity.HasKey(e => new { e.RscReviewTyp, e.CultureCd }).HasName("pkct_rsc_review_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.RscReviewDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtStaffRoleTyp>(entity =>
        {
            entity.HasKey(e => new { e.CtStaffRoleTypId, e.CultureCd }).HasName("pkct_staff_role_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.CtStaffRoleDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CtStatusTyp>(entity =>
        {
            entity.HasKey(e => e.CtStatusTyp1).HasName("pkct_status_typ");

            entity.Property(e => e.CtStatusTyp1).ValueGeneratedNever();
            entity.Property(e => e.CtStatusDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CtSystemComp>(entity =>
        {
            entity.HasKey(e => e.CompId).HasName("pkct_system_comp");

            entity.Property(e => e.CompId).IsFixedLength();
            entity.Property(e => e.CompBased).IsFixedLength();
            entity.Property(e => e.CompCode).IsFixedLength();
            entity.Property(e => e.CompValue).IsFixedLength();
            entity.Property(e => e.CtCatCode).IsFixedLength();
            entity.Property(e => e.CtSecCode).IsFixedLength();
            entity.Property(e => e.ItemBased).IsFixedLength();
            entity.Property(e => e.ToolbarInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CtWorkFileTyp>(entity =>
        {
            entity.HasKey(e => new { e.WorkFileTyp, e.CultureCd }).HasName("pkct_work_file_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.WorkFileDesc).IsFixedLength();
        });

        modelBuilder.Entity<Ctscanner>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKCTScanner");

            entity.ToTable("CTScanner", tb =>
                {
                    tb.HasTrigger("tI_CTScanner");
                    tb.HasTrigger("tU_CTScanner");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.Ctscanner).HasConstraintName("FKImagingDevice_CTScanner");
        });

        modelBuilder.Entity<Ctsimulator>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKCTSimulation");

            entity.ToTable("CTSimulator", tb =>
                {
                    tb.HasTrigger("tI_CTSimulator");
                    tb.HasTrigger("tU_CTSimulator");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.Ctsimulator).HasConstraintName("FKImagingDevice_CTSimulator");

            entity.HasOne(d => d.SimulatorResourceSerNavigation).WithMany(p => p.Ctsimulator)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSimulator_CTSimulator");
        });

        modelBuilder.Entity<CultureCd>(entity =>
        {
            entity.HasKey(e => e.CultureCd1).HasName("pkculture_cd");

            entity.Property(e => e.CultureCd1).IsFixedLength();
            entity.Property(e => e.CountryCd).IsFixedLength();
            entity.Property(e => e.CultureDesc).IsFixedLength();
            entity.Property(e => e.LanguageCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CumTyp>(entity =>
        {
            entity.HasKey(e => e.CumTyp1).HasName("pkcum_typ");

            entity.Property(e => e.CumTyp1).ValueGeneratedNever();
            entity.Property(e => e.CumDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Currency>(entity =>
        {
            entity.HasKey(e => e.Currency1).HasName("pkcurrency");

            entity.Property(e => e.Currency1).ValueGeneratedNever();
            entity.Property(e => e.CurrencyDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<CvxCd>(entity =>
        {
            entity.HasKey(e => e.CvxCd1).HasName("pkcvx_cd");

            entity.Property(e => e.CvxCd1).IsFixedLength();
            entity.Property(e => e.CvxDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CycleEvent>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.PhaseSeqNo, e.CycleDay, e.EventSeqNo }).HasName("pkcycle_event");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.ChartReqInd).IsFixedLength();
            entity.Property(e => e.ChartSummaryInd).IsFixedLength();
            entity.Property(e => e.CyclicalInd).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.MedMntrAsmtInd).IsFixedLength();
            entity.Property(e => e.OffsetDesc).IsFixedLength();
            entity.Property(e => e.OffsetHhmm).IsFixedLength();
            entity.Property(e => e.PrnInd).IsFixedLength();
            entity.Property(e => e.PrnRepeatInd).IsFixedLength();
            entity.Property(e => e.RenewableInd).IsFixedLength();
            entity.Property(e => e.SpsrStkhId).IsFixedLength();
            entity.Property(e => e.TimeSuppressInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VrblReqInd).IsFixedLength();

            entity.HasOne(d => d.TpIntv).WithMany(p => p.CycleEvent).HasConstraintName("fk2_cycle_event");

            entity.HasOne(d => d.TpTperiod).WithMany(p => p.CycleEvent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_cycle_event");
        });

        modelBuilder.Entity<CycleEventDetail>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.PhaseSeqNo, e.CycleEventId }).HasName("pkcycle_event_detail");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.CldrInd).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.NotifiedInd).IsFixedLength();
            entity.Property(e => e.RqstnInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<CycleEventOrder>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.PhaseSeqNo, e.OrderId }).HasName("pkcycle_event_order");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.CldrInd).IsFixedLength();
            entity.Property(e => e.CyclicalInd).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.OffsetDesc).IsFixedLength();
            entity.Property(e => e.OffsetHhmm).IsFixedLength();
            entity.Property(e => e.PrnInd).IsFixedLength();
            entity.Property(e => e.PrnRepeatInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<DataUpdateLog>(entity =>
        {
            entity.HasKey(e => e.DataUpdateLogId).HasName("pk_data_update_log");

            entity.Property(e => e.DataUpdateLogId).ValueGeneratedNever();
            entity.Property(e => e.SchemeName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpdateFailMsg).IsFixedLength();
            entity.Property(e => e.UpdateMethod).IsFixedLength();
            entity.Property(e => e.UpdateStatus).IsFixedLength();
        });

        modelBuilder.Entity<DateCd>(entity =>
        {
            entity.HasKey(e => e.DateCd1).HasName("pkdate_cd");

            entity.Property(e => e.DateCd1).ValueGeneratedNever();
            entity.Property(e => e.DateCdDesc).IsFixedLength();
            entity.Property(e => e.DateCdMask).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<DateChangeLog>(entity =>
        {
            entity.HasKey(e => new { e.TransLogUserid, e.TransLogTstamp }).HasName("pkdate_change_log");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<DbInst>(entity =>
        {
            entity.HasKey(e => e.InstId).HasName("pkdb_inst");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AuditInd).IsFixedLength();
            entity.Property(e => e.AuditReasonInd).IsFixedLength();
            entity.Property(e => e.DatabaseServerName).IsFixedLength();
            entity.Property(e => e.DbBuildNo).IsFixedLength();
            entity.Property(e => e.DbStatusCd).IsFixedLength();
            entity.Property(e => e.DbVersNo).IsFixedLength();
            entity.Property(e => e.DualModInd).IsFixedLength();
            entity.Property(e => e.InstallFlag).IsFixedLength();

            entity.HasOne(d => d.Inst).WithOne(p => p.DbInst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_db_inst");
        });

        modelBuilder.Entity<DbModCompleted>(entity =>
        {
            entity.HasKey(e => e.ModGrpId).HasName("pkdb_mod_completed");

            entity.Property(e => e.ModGrpId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<DbPrinterMutex>(entity =>
        {
            entity.HasKey(e => e.PrinterMutexId).HasName("pkdb_printer_mutex");

            entity.Property(e => e.PrinterMutexId).ValueGeneratedNever();
            entity.Property(e => e.PrinterStatusInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<DbTimeSelect>(entity =>
        {
            entity.HasKey(e => e.DbTimeSelect1).HasName("pkdb_time_select");

            entity.Property(e => e.DbTimeSelect1).IsFixedLength();
        });

        modelBuilder.Entity<Dbhistory>(entity =>
        {
            entity.HasKey(e => e.DbhistorySer).HasName("XPKDBHistory");

            entity.Property(e => e.DbhistorySer).ValueGeneratedNever();
        });

        modelBuilder.Entity<DcmntMailQue>(entity =>
        {
            entity.HasKey(e => e.DcmntMailQueId).HasName("pkdcmnt_mail_que");

            entity.Property(e => e.DcmntMailQueId).IsFixedLength();
            entity.Property(e => e.AuthStkhId).IsFixedLength();
            entity.Property(e => e.DcmntPrty).IsFixedLength();
            entity.Property(e => e.ErrorMsgInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PrcsIndCd).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.SendOnAppr).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<DcmntMailRcpts>(entity =>
        {
            entity.HasKey(e => new { e.DcmntMailQueId, e.DcmntMailRcptsId }).HasName("pkdcmnt_mail_rcpts");

            entity.Property(e => e.DcmntMailQueId).IsFixedLength();
            entity.Property(e => e.CorspMthd).IsFixedLength();
            entity.Property(e => e.ExternalPrcsCd).IsFixedLength();
            entity.Property(e => e.OrgStkhId).IsFixedLength();
            entity.Property(e => e.PrcsCd).IsFixedLength();
            entity.Property(e => e.ProviderStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DcmntMailQue).WithMany(p => p.DcmntMailRcpts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_dcmnt_mail_rcpts");
        });

        modelBuilder.Entity<DcmntServer>(entity =>
        {
            entity.HasKey(e => e.InstId).HasName("pkdcmnt_server");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.CoversheetPath).IsFixedLength();
            entity.Property(e => e.CoversheetReqInd).IsFixedLength();
            entity.Property(e => e.FaxCommProtocol).IsFixedLength();
            entity.Property(e => e.FaxDialingPrefix).IsFixedLength();
            entity.Property(e => e.FaxLoginPassword).IsFixedLength();
            entity.Property(e => e.FaxServerName).IsFixedLength();
            entity.Property(e => e.IntfEngineId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<DcobjectPointerSeries>(entity =>
        {
            entity.HasKey(e => e.DcobjectPointerSeriesSer).HasName("XPKDCObjectPointerSeries");

            entity.ToTable("DCObjectPointerSeries", tb =>
                {
                    tb.HasTrigger("tD_DCObjectPointerSeries");
                    tb.HasTrigger("tI_DCObjectPointerSeries");
                    tb.HasTrigger("tU_DCObjectPointerSeries");
                });

            entity.Property(e => e.DcobjectPointerSeriesSer).ValueGeneratedNever();

            entity.HasOne(d => d.DcobjectPointerStudySerNavigation).WithMany(p => p.DcobjectPointerSeries)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKDCObjectPointerStudy_DCObjectPointerSeries");
        });

        modelBuilder.Entity<DcobjectPointerStudy>(entity =>
        {
            entity.HasKey(e => e.DcobjectPointerStudySer).HasName("XPKDCObjectPointerStudy");

            entity.ToTable("DCObjectPointerStudy", tb =>
                {
                    tb.HasTrigger("tD_DCObjectPointerStudy");
                    tb.HasTrigger("tU_DCObjectPointerStudy");
                });

            entity.Property(e => e.DcobjectPointerStudySer).ValueGeneratedNever();
        });

        modelBuilder.Entity<DcobjectTrackingInfo>(entity =>
        {
            entity.HasKey(e => e.DcobjectTrackingInfoSer).HasName("XPKDCObjectTrackingInfo");

            entity.ToTable("DCObjectTrackingInfo", tb =>
                {
                    tb.HasTrigger("tI_DCObjectTrackingInfo");
                    tb.HasTrigger("tU_DCObjectTrackingInfo");
                });

            entity.Property(e => e.DcobjectTrackingInfoSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ObjectPointerSerNavigation).WithMany(p => p.DcobjectTrackingInfo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKObjectPointer_DCObjectTrackingInfo");

            entity.HasOne(d => d.TrackingInformationSerNavigation).WithMany(p => p.DcobjectTrackingInfo).HasConstraintName("FKTrackingInformation_DCObjectTrackingInfo");
        });

        modelBuilder.Entity<DctransferSyntax>(entity =>
        {
            entity.HasKey(e => e.DctransferSyntaxSer).HasName("XPKDCTransferSyntax");

            entity.ToTable("DCTransferSyntax", tb =>
                {
                    tb.HasTrigger("tD_DCTransferSyntax");
                    tb.HasTrigger("tU_DCTransferSyntax");
                });

            entity.Property(e => e.DctransferSyntaxSer).ValueGeneratedNever();
        });

        modelBuilder.Entity<DeliverySetupDevice>(entity =>
        {
            entity.HasKey(e => e.DeliverySetupDeviceSer).HasName("XPKDeliverySetupDevice");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_DeliverySetupDevice");
                    tb.HasTrigger("tU_DeliverySetupDevice");
                });

            entity.Property(e => e.DeliverySetupDeviceSer).ValueGeneratedNever();
            entity.Property(e => e.DeviceType).HasComment("The type of Setup Device as denoted in DICOM tag (300A,01B6) or for Fixation Device in DICOM tag (300A,0192).");
            
                
                
            entity.Property(e => e.Manufacturer).HasComment("Manufacturer of the device (0008,0070)");
            entity.Property(e => e.ModelConfigurationReference).HasComment("Name of the xml-file in case for a fixation device defining technique dependent collision \r\nfree envelopes and models used for collision detection in VDR. Fixation device only references this data, it does not own it. This is \r\nthe base part of the file name not including folders.");
            entity.Property(e => e.ModelName).HasComment("Manufacturer's Model Name of the device (0008,1090)");
        });

        modelBuilder.Entity<DeliverySetupDeviceMachine>(entity =>
        {
            entity.HasKey(e => new { e.DeliverySetupDeviceSer, e.ResourceSer })
                .HasName("XPKDeliverySetupDeviceMachine")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_DeliverySetupDeviceMachine");
                    tb.HasTrigger("tU_DeliverySetupDeviceMachine");
                });

            
                
                

            entity.HasOne(d => d.DeliverySetupDeviceSerNavigation).WithMany(p => p.DeliverySetupDeviceMachine)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKDeliverySetupDevice_DeliverySetupDeviceMachine");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.DeliverySetupDeviceMachine)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKMachine_DeliverySetupDeviceMachine");
        });

        modelBuilder.Entity<DemExternalBeam>(entity =>
        {
            entity.HasKey(e => e.DemExternalBeamSer).HasName("XPKDemExternalBeam");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_DemExternalBeam");
                    tb.HasTrigger("tU_DemExternalBeam");
                });

            entity.Property(e => e.DemExternalBeamSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DemGroupSerNavigation).WithMany(p => p.DemExternalBeam)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKDemGroup_DemExternalBeam");

            entity.HasOne(d => d.EnergyModeSerNavigation).WithMany(p => p.DemExternalBeam)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKEnergyMode_DemExternalBeam");

            entity.HasOne(d => d.PrimaryFluenceModeSerNavigation).WithMany(p => p.DemExternalBeam)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKPrimaryFluenceMode_DemExternalBeam");

            entity.HasOne(d => d.TechniqueSerNavigation).WithMany(p => p.DemExternalBeam).HasConstraintName("FKTechnique_DemExternalBeam");
        });

        modelBuilder.Entity<DemGroup>(entity =>
        {
            entity.HasKey(e => e.DemGroupSer).HasName("XPKDemGroup");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_DemGroup");
                    tb.HasTrigger("tU_DemGroup");
                });

            entity.Property(e => e.DemGroupSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.DepartmentSer).HasName("XPKDepartment");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Department");
                    tb.HasTrigger("tI_Department");
                    tb.HasTrigger("tU_Department");
                });

            entity.Property(e => e.DepartmentSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.HospitalSerNavigation).WithMany(p => p.Department)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKHospital_Department");
        });

        modelBuilder.Entity<DepartmentPttrnDetails>(entity =>
        {
            entity.HasKey(e => e.DeptPttrnDetailSer).HasName("XPKDepartmentPttrnDetails");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_DepartmentPttrnDetails");
                    tb.HasTrigger("tU_DepartmentPttrnDetails");
                });

            entity.Property(e => e.DeptPttrnDetailSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.DepartmentPttrnDetails).HasConstraintName("FKDepartment_DepartmentPttrnDetails");
        });

        modelBuilder.Entity<DeptGrpAssociation>(entity =>
        {
            entity.HasKey(e => e.DeptGrpAssociationSer).HasName("XPKDepartmentGroupAssociation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_DeptGrpAssociation");
                    tb.HasTrigger("tU_DeptGrpAssociation");
                });

            entity.Property(e => e.DeptGrpAssociationSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.DeptGrpAssociation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKDepartment_DeptGrpAssociation");

            entity.HasOne(d => d.ResourceGroupSerNavigation).WithMany(p => p.DeptGrpAssociation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKResourceGroup_DeptGrpAssociation");
        });

        modelBuilder.Entity<DerivedImageCode>(entity =>
        {
            entity.HasKey(e => e.DerivedImageCodeSer).HasName("XPKDerivedImageCode");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_DerivedImageCode");
                    tb.HasTrigger("tU_DerivedImageCode");
                });

            entity.Property(e => e.DerivedImageCodeSer).ValueGeneratedNever();

            entity.HasOne(d => d.DicomcodeValueSerNavigation).WithMany(p => p.DerivedImageCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKDICOMCodeValue_DerivedImageCode");

            entity.HasOne(d => d.SliceSerNavigation).WithMany(p => p.DerivedImageCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSlice_DerivedImageCode");
        });

        modelBuilder.Entity<DerivedInstanceUid>(entity =>
        {
            entity.HasKey(e => e.DerivedInstanceUidser).HasName("XPKDerivedInstanceUID");

            entity.ToTable("DerivedInstanceUID", tb =>
                {
                    tb.HasTrigger("tI_DerivedInstanceUID");
                    tb.HasTrigger("tU_DerivedInstanceUID");
                });

            entity.Property(e => e.DerivedInstanceUidser).ValueGeneratedNever();

            entity.HasOne(d => d.SliceSerNavigation).WithMany(p => p.DerivedInstanceUid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSlice_DerivedInstanceUID");
        });

        modelBuilder.Entity<DesignationTyp>(entity =>
        {
            entity.HasKey(e => e.DesignationTyp1).HasName("pkdesignation_typ");

            entity.Property(e => e.DesignationTyp1).ValueGeneratedNever();
            entity.Property(e => e.DesignationDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<DfltCtrl>(entity =>
        {
            entity.HasKey(e => new { e.AppCd, e.WindowLabel, e.CtrlLabel }).HasName("pkdflt_ctrl");

            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.WindowLabel).IsFixedLength();
            entity.Property(e => e.CtrlLabel).IsFixedLength();
            entity.Property(e => e.CtrlName).IsFixedLength();
            entity.Property(e => e.EnabledFlag).IsFixedLength();
            entity.Property(e => e.ModFlag).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.DfltCtrl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_dflt_ctrl");
        });

        modelBuilder.Entity<DfltMenu>(entity =>
        {
            entity.HasKey(e => new { e.AppCd, e.MenuLabel }).HasName("pkdflt_menu");

            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.MenuLabel).IsFixedLength();
            entity.Property(e => e.EnabledFlag).IsFixedLength();
            entity.Property(e => e.ParentMenuLabel).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.DfltMenu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_dflt_menu");
        });

        modelBuilder.Entity<DfltXrefCtrl>(entity =>
        {
            entity.HasKey(e => new { e.AppCd, e.WindowLabelXref, e.CtrlLabelXref, e.WindowLabelCtrl, e.CtrlLabelCtrl }).HasName("pkdflt_xref_ctrl");

            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.WindowLabelXref).IsFixedLength();
            entity.Property(e => e.CtrlLabelXref).IsFixedLength();
            entity.Property(e => e.WindowLabelCtrl).IsFixedLength();
            entity.Property(e => e.CtrlLabelCtrl).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.DfltXrefCtrl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_dflt_xref_ctrl");

            entity.HasOne(d => d.DfltCtrl).WithMany(p => p.DfltXrefCtrlDfltCtrl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_dflt_xref_ctrl");

            entity.HasOne(d => d.DfltCtrlNavigation).WithMany(p => p.DfltXrefCtrlDfltCtrlNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_dflt_xref_ctrl");
        });

        modelBuilder.Entity<DfltXrefMenu>(entity =>
        {
            entity.HasKey(e => new { e.AppCd, e.MenuLabel, e.WindowLabelCtrl, e.CtrlLabelCtrl }).HasName("pkdflt_xref_menu");

            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.MenuLabel).IsFixedLength();
            entity.Property(e => e.WindowLabelCtrl).IsFixedLength();
            entity.Property(e => e.CtrlLabelCtrl).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.DfltXrefMenu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_dflt_xref_menu");

            entity.HasOne(d => d.DfltMenu).WithMany(p => p.DfltXrefMenu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_dflt_xref_menu");

            entity.HasOne(d => d.DfltCtrl).WithMany(p => p.DfltXrefMenu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_dflt_xref_menu");
        });

        modelBuilder.Entity<Diagnosis>(entity =>
        {
            entity.HasKey(e => new { e.DiagnosisSer, e.PatientSer }).HasName("pkDiagnosis");
        });

        modelBuilder.Entity<DiagnosisCode>(entity =>
        {
            entity.ToView("DiagnosisCode");

            entity.Property(e => e.DiagnosisCode1).IsFixedLength();
        });

        modelBuilder.Entity<DiagnosisDetail>(entity =>
        {
            entity.ToView("DiagnosisDetail");
        });

        modelBuilder.Entity<DiagnosisStage>(entity =>
        {
            entity.HasKey(e => e.DiagnosisStageSer).HasName("XPKDiagnosisStage");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_DiagnosisStage");
                    tb.HasTrigger("tU_DiagnosisStage");
                });

            entity.Property(e => e.DiagnosisStageSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<DicomLocation>(entity =>
        {
            entity.HasKey(e => e.DicomLocationSer).HasName("XPKDicomLocation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_DicomLocation");
                    tb.HasTrigger("tU_DicomLocation");
                });

            entity.Property(e => e.DicomLocationSer).ValueGeneratedNever();
        });

        modelBuilder.Entity<DicomcodeMeaning>(entity =>
        {
            entity.HasKey(e => e.DicomcodeMeaningSer).HasName("XPKDICOMCodeMeaning");

            entity.ToTable("DICOMCodeMeaning", tb =>
                {
                    tb.HasTrigger("tI_DICOMCodeMeaning");
                    tb.HasTrigger("tU_DICOMCodeMeaning");
                });

            entity.Property(e => e.DicomcodeMeaningSer).ValueGeneratedNever();

            entity.HasOne(d => d.DicomcodeValueSerNavigation).WithMany(p => p.DicomcodeMeaning)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKDICOMCodeValue_DICOMCodeMeaning");
        });

        modelBuilder.Entity<DicomcodeScheme>(entity =>
        {
            entity.HasKey(e => e.DicomcodeSchemeSer).HasName("XPKDICOMCodeScheme");

            entity.ToTable("DICOMCodeScheme", tb =>
                {
                    tb.HasTrigger("tD_DICOMCodeScheme");
                    tb.HasTrigger("tU_DICOMCodeScheme");
                });

            entity.Property(e => e.DicomcodeSchemeSer).ValueGeneratedNever();
        });

        modelBuilder.Entity<DicomcodeValue>(entity =>
        {
            entity.HasKey(e => e.DicomcodeValueSer).HasName("XPKDICOMCodeValue");

            entity.ToTable("DICOMCodeValue", tb =>
                {
                    tb.HasTrigger("tD_DICOMCodeValue");
                    tb.HasTrigger("tI_DICOMCodeValue");
                    tb.HasTrigger("tU_DICOMCodeValue");
                });

            entity.Property(e => e.DicomcodeValueSer).ValueGeneratedNever();

            entity.HasOne(d => d.DicomcodeSchemeSerNavigation).WithMany(p => p.DicomcodeValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKDICOMCodeScheme_DICOMCodeValue");
        });

        modelBuilder.Entity<DictationQueue>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DictationQueueId }).HasName("pkdictation_queue");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActualDesc).IsFixedLength();
            entity.Property(e => e.AudioDelInd).IsFixedLength();
            entity.Property(e => e.DictatedByUserInstId).IsFixedLength();
            entity.Property(e => e.DictationCompleteInd).IsFixedLength();
            entity.Property(e => e.DictationFileId).IsFixedLength();
            entity.Property(e => e.ReviewRequiredInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TranscriptionCompleteInd).IsFixedLength();
            entity.Property(e => e.TranscriptionUserInstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.DictationTypNavigation).WithMany(p => p.DictationQueue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_dictation_queue");
        });

        modelBuilder.Entity<DictationQueueMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DictationQueueId, e.RevisionNo }).HasName("pk_dictation_queue_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActualDesc).IsFixedLength();
            entity.Property(e => e.AudioDelInd).IsFixedLength();
            entity.Property(e => e.DictatedByUserInstId).IsFixedLength();
            entity.Property(e => e.DictationCompleteInd).IsFixedLength();
            entity.Property(e => e.DictationFileId).IsFixedLength();
            entity.Property(e => e.ReviewRequiredInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TranscriptionCompleteInd).IsFixedLength();
            entity.Property(e => e.TranscriptionUserInstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.DictationQueue).WithMany(p => p.DictationQueueMh)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_dictation_queue_mh");
        });

        modelBuilder.Entity<DictationTyp>(entity =>
        {
            entity.HasKey(e => e.DictationTyp1).HasName("pk_dictation_typ");

            entity.Property(e => e.DictationTyp1).ValueGeneratedNever();
            entity.Property(e => e.DictationTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Directive>(entity =>
        {
            entity.HasKey(e => e.DirectiveSer).HasName("XPKDirective");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Directive");
                    tb.HasTrigger("tU_Directive");
                });

            entity.Property(e => e.DirectiveSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<DisciplineTyp>(entity =>
        {
            entity.HasKey(e => e.DisciplineTyp1).HasName("pkdiscipline_typ");

            entity.Property(e => e.DisciplineTyp1).ValueGeneratedNever();
            entity.Property(e => e.DisciplineDesc).IsFixedLength();
            entity.Property(e => e.DisciplineDisplay).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<DispLoc>(entity =>
        {
            entity.HasKey(e => e.DispLocId).HasName("pkdisp_loc");

            entity.Property(e => e.DispLocId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.AdjustDrugBatchExpiryInd).IsFixedLength();
            entity.Property(e => e.DispLocCloseTime).IsFixedLength();
            entity.Property(e => e.DispLocName).IsFixedLength();
            entity.Property(e => e.DispLocOpenTime).IsFixedLength();
            entity.Property(e => e.ElctrncTrfInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DispLocTypNavigation).WithMany(p => p.DispLoc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_disp_loc");
        });

        modelBuilder.Entity<DispLocTyp>(entity =>
        {
            entity.HasKey(e => e.DispLocTyp1).HasName("pkdisp_loc_typ");

            entity.Property(e => e.DispLocTyp1).ValueGeneratedNever();
            entity.Property(e => e.DispLocTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<DmDbMod>(entity =>
        {
            entity.HasKey(e => e.DmDbModId).HasName("pkdm_db_mod");

            entity.Property(e => e.DmDbModId).ValueGeneratedNever();
            entity.Property(e => e.CompletedInd).IsFixedLength();
            entity.Property(e => e.DmDbModDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<DmDbXref>(entity =>
        {
            entity.HasKey(e => new { e.CcsKeyId, e.CcsSeqTyp, e.CcsEnmValue, e.CcsMedValue }).HasName("pkdm_db_xref");

            entity.Property(e => e.CcsKeyId).IsFixedLength();
            entity.Property(e => e.CcsSeqTyp).IsFixedLength();
            entity.Property(e => e.CcsEnmValue).IsFixedLength();
            entity.Property(e => e.CcsMedValue).IsFixedLength();
        });

        modelBuilder.Entity<DocFileTyp>(entity =>
        {
            entity.HasKey(e => e.DocFileTyp1).HasName("pkdoc_file_typ");

            entity.Property(e => e.DocFileTyp1).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Doctor>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKDoctor");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Doctor");
                    tb.HasTrigger("tI_Doctor");
                    tb.HasTrigger("tU_Doctor");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();
            entity.Property(e => e.Sex).IsFixedLength();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.Doctor).HasConstraintName("FKResource_Doctor");
        });

        modelBuilder.Entity<DoctorBillingService>(entity =>
        {
            entity.HasKey(e => new { e.BillingServiceSer, e.ResourceSer }).HasName("XPKDoctorBillingService");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_DoctorBillingService");
                    tb.HasTrigger("tU_DoctorBillingService");
                });

            
                
                

            entity.HasOne(d => d.BillingServiceSerNavigation).WithMany(p => p.DoctorBillingService).HasConstraintName("FKBillingService_DoctorBillingService");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.DoctorBillingService).HasConstraintName("FKDoctor_DoctorBillingService");
        });

        modelBuilder.Entity<DoctorMh>(entity =>
        {
            entity.HasKey(e => new { e.ResourceSer, e.ResourceRevCount }).HasName("XPKDoctorMH");

            entity.ToTable("DoctorMH", tb =>
                {
                    tb.HasTrigger("tD_DoctorMH");
                    tb.HasTrigger("tI_DoctorMH");
                    tb.HasTrigger("tU_DoctorMH");
                });

            
                
                
            entity.Property(e => e.Sex).IsFixedLength();

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.DoctorMh).HasConstraintName("FKDoctor_DoctorMH");
        });

        modelBuilder.Entity<DosageForm>(entity =>
        {
            entity.HasKey(e => e.DosageForm1).HasName("pkdosage_form");

            entity.Property(e => e.DosageForm1).ValueGeneratedNever();
            entity.Property(e => e.DosageFormDesc).IsFixedLength();
            entity.Property(e => e.MediDoseForm).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<DosageFormExtDrugDb>(entity =>
        {
            entity.HasKey(e => new { e.DosageForm, e.ExtDrugDbId }).HasName("pkdosage_form_ext_drug_db");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DosageFormNavigation).WithMany(p => p.DosageFormExtDrugDb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_dosage_form_ext_drug_db");

            entity.HasOne(d => d.ExtDrugDb).WithMany(p => p.DosageFormExtDrugDb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_dosage_form_ext_drug_db");
        });

        modelBuilder.Entity<DoseContribution>(entity =>
        {
            entity.HasKey(e => new { e.RtplanSer, e.RefPointSer }).HasName("XPKDoseContribution");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_DoseContribution_PatientEditingLog");
                    tb.HasTrigger("tI_DoseContribution");
                    tb.HasTrigger("tI_DoseContribution_PatientEditingLog");
                    tb.HasTrigger("tI_DoseContribution_VaBusinessLogic");
                    tb.HasTrigger("tU_DoseContribution");
                    tb.HasTrigger("tU_DoseContribution_PatientEditingLog");
                    tb.HasTrigger("tU_DoseContribution_VaBusinessLogic");
                });

            
                
                

            entity.HasOne(d => d.RefPointSerNavigation).WithMany(p => p.DoseContribution)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRefPoint_DoseContribution");

            entity.HasOne(d => d.RtplanSerNavigation).WithMany(p => p.DoseContribution)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRTPlan_DoseContribution");
        });

        modelBuilder.Entity<DoseCorrectionLog>(entity =>
        {
            entity.HasKey(e => e.DoseCorrectionLogSer)
                .HasName("XPKDoseCorrectionLog")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_DoseCorrectionLog");
                    tb.HasTrigger("tD_DoseCorrectionLog_PatientEditingLog");
                    tb.HasTrigger("tU_DoseCorrectionLog");
                    tb.HasTrigger("tU_DoseCorrectionLog_PatientEditingLog");
                });

            entity.Property(e => e.DoseCorrectionLogSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<DoseLevel>(entity =>
        {
            entity.HasKey(e => e.DoseLevel1).HasName("pkdose_level");

            entity.Property(e => e.DoseLevel1).ValueGeneratedNever();
            entity.Property(e => e.DoseLevelDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<DoseMatrix>(entity =>
        {
            entity.HasKey(e => e.DoseMatrixSer).HasName("XPKDoseMatrix");

            entity.ToTable(tb =>
                {
                    tb.HasComment("Only one of the four FKs PlanSetupSer, RadiationSer, FieldVariationSer or PlanVariationSer may be not null in a single row.");
                    tb.HasTrigger("tI_DoseMatrix");
                    tb.HasTrigger("tU_DoseMatrix");
                });

            entity.Property(e => e.DoseMatrixSer).ValueGeneratedNever();
            
                
                
            entity.Property(e => e.PlanSetupSer).HasComment("Internal Identification (Serial Number which is the Primary Key to the Table). \r\nThe vp_syGetNextKey procedure retrieves the key from the NextKeyTable. If not null, this DoseMatrix \r\nis the plan dose of a PlanSetup.");
            entity.Property(e => e.PlanVariationSer).HasComment("Foreign key to PlanVariation table. If not null, this DoseMatrix is the plan dose of a PlanVariation.");
            entity.Property(e => e.RadiationSer).HasComment("Internal Identification (Serial Number which is the Primary Key to the Table). \r\nThe vp_syGetNextKey procedure retrieves the key from the NextKeyTable. If not null, this DoseMatrix \r\nis the field dose of a Radiation.");
            entity.Property(e => e.Transformation).IsFixedLength();

            entity.HasOne(d => d.EquipmentSerNavigation).WithMany(p => p.DoseMatrix).HasConstraintName("FKEquipment_DoseMatrix");

            entity.HasOne(d => d.FieldVariationSerNavigation).WithMany(p => p.DoseMatrix).HasConstraintName("FKFieldVariation_DoseMatrix");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.DoseMatrix).HasConstraintName("FKPatient_DoseMatrix");

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.DoseMatrix).HasConstraintName("FKPlanSetup_DoseMAtrix");

            entity.HasOne(d => d.PlanVariationSerNavigation).WithMany(p => p.DoseMatrix).HasConstraintName("FKPlanVariation_DoseMatrix");

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.DoseMatrix).HasConstraintName("FKRadiation_DoseMatrix");

            entity.HasOne(d => d.SeriesSerNavigation).WithMany(p => p.DoseMatrix)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSeries_DoseMatrix");
        });

        modelBuilder.Entity<DoseObjectives>(entity =>
        {
            entity.HasKey(e => e.DoseObjectivesSer).HasName("XPKDoseObjectives");

            entity.ToTable(tb =>
                {
                    tb.HasComment("This table links a set of dose objectives between a structure and a plan or plan sum. The link to structure \r\nis optional to allow defining plan or plan sum specific objectives that are not related to any structure.");
                    tb.HasTrigger("tI_DoseObjectives");
                    tb.HasTrigger("tU_DoseObjectives");
                });

            entity.Property(e => e.DoseObjectivesSer)
                .ValueGeneratedNever()
                .HasComment("Primary key of the table.");
            
                
                
            entity.Property(e => e.Objectives).HasComment("Objectives field which replaces the storage of plan objectives inside a clinical protocol instance. \r\nObjectives are stored as XML. The schema for the objectives is defined in DoseObjectives.xsd schema.");
            entity.Property(e => e.PlanSetupSer).HasComment("Parent plan of this Dose objective set. The context in which the dose objectives are to be interpreted.");
            entity.Property(e => e.PlanSumSer).HasComment("Parent plan sum of this Dose objective set. The context in which the dose objectives are to be interpreted.");
            entity.Property(e => e.StructureSer).HasComment("Parent structure of this Dose objective set. The structure to which the dose objectives belong to.");

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.DoseObjectives).HasConstraintName("FKPlanSetup_DoseObjectives");

            entity.HasOne(d => d.PlanSumSerNavigation).WithMany(p => p.DoseObjectives).HasConstraintName("FKPlanSum_DoseObjectives");

            entity.HasOne(d => d.StructureSerNavigation).WithMany(p => p.DoseObjectives)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKStructure_DoseObjectives");
        });

        modelBuilder.Entity<DoseRate>(entity =>
        {
            entity.HasKey(e => e.DoseRateSer).HasName("XPKDoseRate");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_DoseRate");
                    tb.HasTrigger("tU_DoseRate");
                });

            entity.Property(e => e.DoseRateSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.EnergyModeSerNavigation).WithMany(p => p.DoseRate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKEnergyMode_DoseRate");

            entity.HasOne(d => d.PrimaryFluenceModeSerNavigation).WithMany(p => p.DoseRate).HasConstraintName("FKPrimaryFluenceMode_DoseRate");
        });

        modelBuilder.Entity<DoseRoundMthd>(entity =>
        {
            entity.HasKey(e => e.DoseRoundMthd1).HasName("pkdose_round_mthd");

            entity.Property(e => e.DoseRoundMthd1).ValueGeneratedNever();
            entity.Property(e => e.DoseRoundDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<DoseTemplate>(entity =>
        {
            entity.HasKey(e => e.DoseTemplateSer).HasName("XPKIsodoseLevelTemplate");

            entity.Property(e => e.DoseTemplateSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<DoseVrtnTyp>(entity =>
        {
            entity.HasKey(e => e.DoseVrtnTyp1).HasName("pkdose_vrtn_typ");

            entity.Property(e => e.DoseVrtnTyp1).ValueGeneratedNever();
            entity.Property(e => e.DoseVrtnDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<DosimetricData>(entity =>
        {
            entity.HasKey(e => e.DosimetricDataSer)
                .HasName("XPKDosimetricData")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_DosimetricData");
                    tb.HasTrigger("tU_DosimetricData");
                });

            entity.Property(e => e.DosimetricDataSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.AddOnMaterialSerNavigation).WithMany(p => p.DosimetricData)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKAddOnMaterial_DosimetricData");

            entity.HasOne(d => d.EnergyModeSerNavigation).WithMany(p => p.DosimetricData)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKEnergyMode_DosimetricData");

            entity.HasOne(d => d.PrimaryFluenceModeSerNavigation).WithMany(p => p.DosimetricData).HasConstraintName("FKPrimaryFluenceMode_DosimetricData");
        });

        modelBuilder.Entity<DowFrqUnit>(entity =>
        {
            entity.HasKey(e => e.DowFrqUnit1).HasName("pkdow_frq_unit");

            entity.Property(e => e.DowFrqUnit1).ValueGeneratedNever();
            entity.Property(e => e.AdmnDoseFrqDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<DrillBit>(entity =>
        {
            entity.HasKey(e => e.DrillBitSer).HasName("XPKDrillBit");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_DrillBit");
                    tb.HasTrigger("tU_DrillBit");
                });

            entity.Property(e => e.DrillBitSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.DrillBit)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKMillingMachine_DrillBit");
        });

        modelBuilder.Entity<DrugBatch>(entity =>
        {
            entity.HasKey(e => e.DrugBatchId).HasName("pkdrug_batch");

            entity.Property(e => e.DrugBatchId).ValueGeneratedNever();
            entity.Property(e => e.AddlLblDtl).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.DrugBatchDesc).IsFixedLength();
            entity.Property(e => e.DrugBatchDest).IsFixedLength();
            entity.Property(e => e.DrugBatchInstId).IsFixedLength();
            entity.Property(e => e.ExpiryOverrideCmt).IsFixedLength();
            entity.Property(e => e.ExpiryOverrideInd).IsFixedLength();
            entity.Property(e => e.PreparedInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<DrugBatchAgt>(entity =>
        {
            entity.HasKey(e => e.DrugBatchAgtId).HasName("pkdrug_batch_agt");

            entity.Property(e => e.DrugBatchAgtId).ValueGeneratedNever();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.DoseStrength).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DrugBatch).WithMany(p => p.DrugBatchAgt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_drug_batch_agt");
        });

        modelBuilder.Entity<DrugBatchLblDtl>(entity =>
        {
            entity.HasKey(e => e.DrugBatchLblDtlId).HasName("pkdrug_batch_lbl_dtl");

            entity.Property(e => e.DrugBatchLblDtlId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.DrugBatchLblDtlDesc).IsFixedLength();
            entity.Property(e => e.DrugBatchLblDtlDescCust).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<DrugBatchPrint>(entity =>
        {
            entity.HasKey(e => e.DrugBatchPrintId).HasName("pkdrug_batch_print");

            entity.Property(e => e.DrugBatchPrintId).ValueGeneratedNever();
            entity.Property(e => e.PrintoutTyp).IsFixedLength();
            entity.Property(e => e.ReprintCmt).IsFixedLength();
            entity.Property(e => e.ReprintInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DrugBatch).WithMany(p => p.DrugBatchPrint)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_drug_batch_print");
        });

        modelBuilder.Entity<DrugBatchPrintLblDtl>(entity =>
        {
            entity.HasKey(e => new { e.DrugBatchId, e.DrugBatchLblDtlId }).HasName("pkdrug_batch_print_lbl_dtl");

            entity.Property(e => e.PrintDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DrugBatch).WithMany(p => p.DrugBatchPrintLblDtl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_drug_batch_print_lbl_dtl");

            entity.HasOne(d => d.DrugBatchLblDtl).WithMany(p => p.DrugBatchPrintLblDtl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_drug_batch_print_lbl_dtl");
        });

        modelBuilder.Entity<DrugBatchSignoffDtl>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.SignoffSectId, e.SignoffDtlId }).HasName("pkdrug_batch_signoff_dtl");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.SignoffDtlHdrDesc).IsFixedLength();
            entity.Property(e => e.SignoffPersonnel).IsFixedLength();
            entity.Property(e => e.SignoffReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.WrkshtIncludeInd).IsFixedLength();

            entity.HasOne(d => d.DrugBatchSignoffSect).WithMany(p => p.DrugBatchSignoffDtl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_drug_batch_signoff_dtl");
        });

        modelBuilder.Entity<DrugBatchSignoffSect>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.SignoffSectId }).HasName("pkdrug_batch_signoff_sect");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.SignoffSectDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.WrkshtIncludeInd).IsFixedLength();
        });

        modelBuilder.Entity<DrugBatchUnit>(entity =>
        {
            entity.HasKey(e => e.DrugBatchUnitId).HasName("pkdrug_batch_unit");

            entity.Property(e => e.DrugBatchUnitId).ValueGeneratedNever();
            entity.Property(e => e.DispensedInd).IsFixedLength();
            entity.Property(e => e.LinkedToPtInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DrugBatch).WithMany(p => p.DrugBatchUnit)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_drug_batch_unit");
        });

        modelBuilder.Entity<DrugBatchUnitPt>(entity =>
        {
            entity.HasKey(e => e.DrugBatchUnitPtId).HasName("pkdrug_batch_unit_pt");

            entity.Property(e => e.DrugBatchUnitPtId).ValueGeneratedNever();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DrugBatchAgt).WithMany(p => p.DrugBatchUnitPt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_drug_batch_unit_pt");

            entity.HasOne(d => d.DrugBatchUnit).WithMany(p => p.DrugBatchUnitPt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_drug_batch_unit_pt");
        });

        modelBuilder.Entity<DurationUnit>(entity =>
        {
            entity.HasKey(e => e.DurationUnit1).HasName("pkduration_unit");

            entity.Property(e => e.DurationUnit1).ValueGeneratedNever();
            entity.Property(e => e.DurationDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Dvh>(entity =>
        {
            entity.HasKey(e => e.Dvhser).HasName("XPKDVH");

            entity.ToTable("DVH", tb =>
                {
                    tb.HasTrigger("tI_DVH");
                    tb.HasTrigger("tU_DVH");
                });

            entity.Property(e => e.Dvhser).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.Dvh)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKPlanSetup_DVH");

            entity.HasOne(d => d.PlanSumSerNavigation).WithMany(p => p.Dvh)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKPlanSum_DVH");
        });

        modelBuilder.Entity<DvhestimationTrainingSet>(entity =>
        {
            entity.HasKey(e => e.DvhestimationTrainingSetSer).HasName("XPKDVHEstimationTrainingSet");

            entity.ToTable("DVHEstimationTrainingSet", tb =>
                {
                    tb.HasTrigger("tD_DVHEstimationTrainingSet");
                    tb.HasTrigger("tU_DVHEstimationTrainingSet");
                });

            entity.Property(e => e.DvhestimationTrainingSetSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<DvhestimationTrainingSetPlanSetup>(entity =>
        {
            entity.HasKey(e => new { e.DvhestimationTrainingSetSer, e.PlanSetupSer }).HasName("XPKDVHEstimationTrainingSetPlanSetup");

            
                
                

            entity.HasOne(d => d.DvhestimationTrainingSetSerNavigation).WithMany(p => p.DvhestimationTrainingSetPlanSetup).HasConstraintName("FKDVHEstimationTrainingSet_DVHEstimationTrainingSetPlanSetup");

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.DvhestimationTrainingSetPlanSetup).HasConstraintName("FKPlanSetup_DVHEstimationTrainingSetPlanSetup");
        });

        modelBuilder.Entity<DvhestimationTrainingSetPlanSetupStructureMapping>(entity =>
        {
            entity.HasKey(e => new { e.DvhestimationTrainingSetSer, e.PlanSetupSer, e.StructureSer }).HasName("XPKDVHEstimationTrainingSetPlanSetupStructureMapping");

            entity.ToTable("DVHEstimationTrainingSetPlanSetupStructureMapping", tb =>
                {
                    tb.HasTrigger("tD_DVHEstimationTrainingSetPla");
                    tb.HasTrigger("tI_DVHEstimationTrainingSetPla");
                    tb.HasTrigger("tU_DVHEstimationTrainingSetPla");
                });

            
                
                

            entity.HasOne(d => d.DvhestimationTrainingSetStructureSerNavigation).WithMany(p => p.DvhestimationTrainingSetPlanSetupStructureMapping)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKDVHEstimationTrainingSetStructure_DVHEstimationTrainingSetPlanSetupStructureMapping");

            entity.HasOne(d => d.StructureSerNavigation).WithMany(p => p.DvhestimationTrainingSetPlanSetupStructureMapping).HasConstraintName("FKStructure_DVHEstimationTrainingSetPlanSetupStructureMapping");

            entity.HasOne(d => d.DvhestimationTrainingSetPlanSetup).WithMany(p => p.DvhestimationTrainingSetPlanSetupStructureMapping).HasConstraintName("FKDVHEstimationTrainingSetPlanSetup_DVHEstimationTrainingSetPlanSetupStructureMapping");
        });

        modelBuilder.Entity<DvhestimationTrainingSetStructure>(entity =>
        {
            entity.HasKey(e => e.DvhestimationTrainingSetStructureSer).HasName("XPKDVHEstimationTrainingSetStructure");

            entity.ToTable("DVHEstimationTrainingSetStructure", tb =>
                {
                    tb.HasTrigger("tD_DVHEstimationTrainingSetStr");
                    tb.HasTrigger("tI_DVHEstimationTrainingSetStr");
                    tb.HasTrigger("tU_DVHEstimationTrainingSetStr");
                });

            entity.Property(e => e.DvhestimationTrainingSetStructureSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DvhestimationTrainingSetSerNavigation).WithMany(p => p.DvhestimationTrainingSetStructure).HasConstraintName("FKDVHEstimationTrainingSet_DVHEstimationTrainingSetStructure");
        });

        modelBuilder.Entity<DxMthdTyp>(entity =>
        {
            entity.HasKey(e => e.DxMthdTyp1).HasName("pkdx_mthd_typ");

            entity.ToTable("dx_mthd_typ", tb => tb.HasTrigger("tU_dx_mthd_typ"));

            entity.Property(e => e.DxMthdTyp1).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.DxMthdDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<DxSrvSection>(entity =>
        {
            entity.HasKey(e => e.DssId).HasName("pkdx_srv_section");

            entity.Property(e => e.DssId).ValueGeneratedNever();
            entity.Property(e => e.DssCd).IsFixedLength();
            entity.Property(e => e.DssDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<DxTyp>(entity =>
        {
            entity.HasKey(e => e.DxTyp1).HasName("pkdx_typ");

            entity.Property(e => e.DxTyp1).IsFixedLength();
            entity.Property(e => e.DxTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<DynamicWedge>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKDynamicWedge");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_DynamicWedge");
                    tb.HasTrigger("tI_DynamicWedge");
                    tb.HasTrigger("tU_DynamicWedge");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithOne(p => p.DynamicWedge).HasConstraintName("FKWedge_DynamicWedge");
        });

        modelBuilder.Entity<EdiOut>(entity =>
        {
            entity.HasKey(e => e.EdiOutId).HasName("pkedi_out");

            entity.ToTable("edi_out", tb => tb.HasTrigger("tI_edi_out"));

            entity.Property(e => e.EdiOutId).ValueGeneratedNever();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.Msg).IsFixedLength();
            entity.Property(e => e.PharmId).IsFixedLength();
            entity.Property(e => e.ProcessedInd).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ReqTwoFactorAuth).IsFixedLength();
            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<EducContent>(entity =>
        {
            entity.HasKey(e => e.EducContentId).HasName("pkeduc_content");

            entity.Property(e => e.EducContentId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.DocId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<EducTopics>(entity =>
        {
            entity.HasKey(e => e.EducTopicId).HasName("pkeduc_topics");

            entity.Property(e => e.EducTopicId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<EducationLvl>(entity =>
        {
            entity.HasKey(e => e.EducationLvlTyp).HasName("pkeducation_lvl");

            entity.Property(e => e.EducationLvlTyp).ValueGeneratedNever();
            entity.Property(e => e.EducationLvlDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<EducationResource>(entity =>
        {
            entity.HasKey(e => new { e.EducationResourceId, e.InstId }).HasName("pkeducation_resource");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.EducationResourceTyp).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InstBaseTyp).WithMany(p => p.EducationResource)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_education_resource");
        });

        modelBuilder.Entity<EmailAddress>(entity =>
        {
            entity.HasKey(e => e.EmailAddressId).HasName("pkemail_address");

            entity.Property(e => e.EmailAddressId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.CcInd).IsFixedLength();
            entity.Property(e => e.EmailAddress1).IsFixedLength();
            entity.Property(e => e.EmailKey).IsFixedLength();
            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.EmailAddress).HasConstraintName("fk1_email_address");

            entity.HasOne(d => d.Stkh).WithMany(p => p.EmailAddress).HasConstraintName("fk2_email_address");
        });

        modelBuilder.Entity<EmailCd>(entity =>
        {
            entity.HasKey(e => new { e.EmailCd1, e.StkhCd }).HasName("pkemail_cd");

            entity.Property(e => e.EmailCd1).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.DfltInd).IsFixedLength();
            entity.Property(e => e.EmailCdDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<EmailFnctnlAreaCd>(entity =>
        {
            entity.HasKey(e => e.FnctnlAreaCd).HasName("pkemail_fnctnl_area_cd");

            entity.Property(e => e.FnctnlAreaCd).IsFixedLength();
            entity.Property(e => e.FnctnlAreaDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<EmailIncidentTyp>(entity =>
        {
            entity.HasKey(e => e.EmailIncidentId).HasName("pkemail_incident_typ");

            entity.Property(e => e.EmailIncidentId).ValueGeneratedNever();
            entity.Property(e => e.FnctnlAreaCd).IsFixedLength();
            entity.Property(e => e.Incident).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.FnctnlAreaCdNavigation).WithMany(p => p.EmailIncidentTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_email_incident_typ");
        });

        modelBuilder.Entity<EmpStatusTyp>(entity =>
        {
            entity.HasKey(e => e.EmpStatusTyp1).HasName("pkemp_status_typ");

            entity.Property(e => e.EmpStatusTyp1).ValueGeneratedNever();
            entity.Property(e => e.EmpStatusDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Employer>(entity =>
        {
            entity.HasKey(e => e.EmployerSer).HasName("XPKEmployer");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Employer");
                    tb.HasTrigger("tI_Employer");
                    tb.HasTrigger("tU_Employer");
                });

            entity.Property(e => e.EmployerSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.AddressSerNavigation).WithMany(p => p.Employer).HasConstraintName("FKAddress_Employer");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.Employer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_Employer");
        });

        modelBuilder.Entity<EnergyMode>(entity =>
        {
            entity.HasKey(e => e.EnergyModeSer).HasName("XPKEnergyMode");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_EnergyMode");
                    tb.HasTrigger("tI_EnergyMode");
                    tb.HasTrigger("tU_EnergyMode");
                });

            entity.Property(e => e.EnergyModeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.EnergyMode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKExternalBeam_EnergyMode");
        });

        modelBuilder.Entity<EnmDbMod>(entity =>
        {
            entity.HasKey(e => e.EnmDbModId).HasName("pkenm_db_mod");

            entity.ToTable("enm_db_mod", tb => tb.HasTrigger("tU_enm_db_mod"));

            entity.Property(e => e.EnmDbModId).ValueGeneratedNever();
            entity.Property(e => e.CompletedInd).IsFixedLength();
            entity.Property(e => e.EnmDbModDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<EpcsAuditLog>(entity =>
        {
            entity.HasKey(e => e.EpcsAuditLogId).HasName("pkepcs_audit_log");

            entity.ToTable("epcs_audit_log", tb =>
                {
                    tb.HasTrigger("tD_epcs_audit_log");
                    tb.HasTrigger("tU_epcs_audit_log");
                });

            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AppUserid).IsFixedLength();
        });

        modelBuilder.Entity<EpcsDrugNdc>(entity =>
        {
            entity.HasKey(e => e.EpcsDrugNdcId).HasName("pkepcs_drug_ndc");

            entity.Property(e => e.EpcsDrugNdcId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TransLogMuserid).IsFixedLength();
            entity.Property(e => e.TransLogUserid).IsFixedLength();
        });

        modelBuilder.Entity<EpcsOrganization>(entity =>
        {
            entity.Property(e => e.EpcsOrganizationId).ValueGeneratedNever();
            entity.Property(e => e.OrganizationRegisteredInd).IsFixedLength();
            entity.Property(e => e.TestEnvironmentInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<EpcsVendor>(entity =>
        {
            entity.Property(e => e.EpcsVendorId).ValueGeneratedNever();
            entity.Property(e => e.EncryptedSharedSecret).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VendorRouterLabel).HasDefaultValue("varian_router_label");
        });

        modelBuilder.Entity<EpcsWebServiceReq>(entity =>
        {
            entity.Property(e => e.EpcsWebServiceReqId).ValueGeneratedNever();
            entity.Property(e => e.ReqInstId).IsFixedLength();
            entity.Property(e => e.ReqUserInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Equipment>(entity =>
        {
            entity.HasKey(e => e.EquipmentSer)
                .HasName("XPKEquipment")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Equipment");
                    tb.HasTrigger("tU_Equipment");
                    tb.HasTrigger("tU_Equipment_VaBusinessLogic");
                });

            entity.Property(e => e.EquipmentSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<ErrorMsg>(entity =>
        {
            entity.HasKey(e => new { e.ErrorCode, e.LanguageId })
                .HasName("XPKErrorMsg")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ErrorMsg");
                    tb.HasTrigger("tU_ErrorMsg");
                });

            entity.HasOne(d => d.Language).WithMany(p => p.ErrorMsg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKLanguageLookup_ErrorMsg");
        });

        modelBuilder.Entity<ErxAgtRx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.ErxAgtRxId }).HasName("pkerx_agt_rx");

            entity.ToTable("erx_agt_rx", tb =>
                {
                    tb.HasTrigger("tD_erx_agt_rx");
                    tb.HasTrigger("tU_erx_agt_rx");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CourseDesc).IsFixedLength();
            entity.Property(e => e.DeaClassFmtCd).IsFixedLength();
            entity.Property(e => e.DestPharmId).IsFixedLength();
            entity.Property(e => e.DispQty).IsFixedLength();
            entity.Property(e => e.EpcsSentCd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.NadeanCd).IsFixedLength();
            entity.Property(e => e.NdcCd).IsFixedLength();
            entity.Property(e => e.RcvdInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.RxRefNo).IsFixedLength();
            entity.Property(e => e.SentInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxAgtRxMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.ErxAgtRxId, e.RevisionNo }).HasName("pkerx_agt_rx_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CourseDesc).IsFixedLength();
            entity.Property(e => e.DeaClassFmtCd).IsFixedLength();
            entity.Property(e => e.DestPharmId).IsFixedLength();
            entity.Property(e => e.DispQty).IsFixedLength();
            entity.Property(e => e.EpcsSentCd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.NadeanCd).IsFixedLength();
            entity.Property(e => e.NdcCd).IsFixedLength();
            entity.Property(e => e.RcvdInd).IsFixedLength();
            entity.Property(e => e.RxRefNo).IsFixedLength();
            entity.Property(e => e.SentInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxBenefitIds>(entity =>
        {
            entity.HasKey(e => e.ErxBenefitIdId).HasName("pkerx_benefit_ids");

            entity.Property(e => e.ErxBenefitIdId).ValueGeneratedNever();
            entity.Property(e => e.IdValue).IsFixedLength();
            entity.Property(e => e.IdValueCd).IsFixedLength();
        });

        modelBuilder.Entity<ErxBenefitSeg>(entity =>
        {
            entity.HasKey(e => e.ErxBenefitId).HasName("pkerx_benefit_seg");

            entity.Property(e => e.ErxBenefitId).ValueGeneratedNever();
            entity.Property(e => e.CardholderFirstName).IsFixedLength();
            entity.Property(e => e.CardholderId).IsFixedLength();
            entity.Property(e => e.CardholderLastName).IsFixedLength();
            entity.Property(e => e.CardholderMiddleName).IsFixedLength();
            entity.Property(e => e.CardholderPrefix).IsFixedLength();
            entity.Property(e => e.CardholderSuffix).IsFixedLength();
            entity.Property(e => e.GroupId).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
            entity.Property(e => e.PayerName).IsFixedLength();
        });

        modelBuilder.Entity<ErxCancelRx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.ErxCancelRxId }).HasName("pkerx_cancel_rx");

            entity.ToTable("erx_cancel_rx", tb =>
                {
                    tb.HasTrigger("tD_erx_cancel_rx");
                    tb.HasTrigger("tU_erx_cancel_rx");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.CancelInstId).IsFixedLength();
            entity.Property(e => e.DestPharmId).IsFixedLength();
            entity.Property(e => e.DisregardInd).IsFixedLength();
            entity.Property(e => e.ErxMsgTyp).IsFixedLength();
            entity.Property(e => e.RcvdInd).IsFixedLength();
            entity.Property(e => e.RespMsgId).IsFixedLength();
            entity.Property(e => e.RespRelatesToMsgId).IsFixedLength();
            entity.Property(e => e.RespTyp).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.SentInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxCancelRxMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.ErxCancelRxId, e.RevisionNo }).HasName("pkerx_cancel_rx_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.CancelInstId).IsFixedLength();
            entity.Property(e => e.DestPharmId).IsFixedLength();
            entity.Property(e => e.DisregardInd).IsFixedLength();
            entity.Property(e => e.ErxMsgTyp).IsFixedLength();
            entity.Property(e => e.RcvdInd).IsFixedLength();
            entity.Property(e => e.RespMsgId).IsFixedLength();
            entity.Property(e => e.RespRelatesToMsgId).IsFixedLength();
            entity.Property(e => e.RespTyp).IsFixedLength();
            entity.Property(e => e.SentInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxCancelRxRespRsn>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.ErxCancelRxRespRsnId }).HasName("pkerx_cancel_rx_resp_rsn");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RespRsnCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ErxCancelRx).WithMany(p => p.ErxCancelRxRespRsn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKerx_cancel_rx_resp_rsn_erx_cancel_rx");
        });

        modelBuilder.Entity<ErxChangeRqst>(entity =>
        {
            entity.HasKey(e => e.ErxChangeRqstId).HasName("pkerx_change_rqst");

            entity.ToTable("erx_change_rqst", tb =>
                {
                    tb.HasTrigger("tD_erx_change_rqst");
                    tb.HasTrigger("tU_erx_change_rqst");
                });

            entity.Property(e => e.ErxChangeRqstId).ValueGeneratedNever();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.DisregardInd).IsFixedLength();
            entity.Property(e => e.EpcsSentCd).IsFixedLength();
            entity.Property(e => e.ErxChangeRqstTyp).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PharmId).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.ProvStkhId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RespCd).IsFixedLength();
            entity.Property(e => e.RespPlacerOrderNo).IsFixedLength();
            entity.Property(e => e.RespProvStkhId).IsFixedLength();
            entity.Property(e => e.RespRcvdInd).IsFixedLength();
            entity.Property(e => e.RespRsnCd).IsFixedLength();
            entity.Property(e => e.RespSvsrStkhId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.RqstMsgId).IsFixedLength();
            entity.Property(e => e.RqstRelatesToMsgId).IsFixedLength();
            entity.Property(e => e.RxRefNo).IsFixedLength();
            entity.Property(e => e.SentInd).IsFixedLength();
            entity.Property(e => e.SvsrStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxChangeRqstMh>(entity =>
        {
            entity.HasKey(e => new { e.ErxChangeRqstId, e.RevisionNo }).HasName("pkerx_change_rqst_mh");

            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.DisregardInd).IsFixedLength();
            entity.Property(e => e.EpcsSentCd).IsFixedLength();
            entity.Property(e => e.ErxChangeRqstTyp).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PharmId).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.ProvStkhId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RespCd).IsFixedLength();
            entity.Property(e => e.RespPlacerOrderNo).IsFixedLength();
            entity.Property(e => e.RespProvStkhId).IsFixedLength();
            entity.Property(e => e.RespRcvdInd).IsFixedLength();
            entity.Property(e => e.RespRsnCd).IsFixedLength();
            entity.Property(e => e.RespSvsrStkhId).IsFixedLength();
            entity.Property(e => e.RqstMsgId).IsFixedLength();
            entity.Property(e => e.RqstRelatesToMsgId).IsFixedLength();
            entity.Property(e => e.RxRefNo).IsFixedLength();
            entity.Property(e => e.SentInd).IsFixedLength();
            entity.Property(e => e.SvsrStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxConfig>(entity =>
        {
            entity.HasKey(e => e.ErxVendor).HasName("pkerx_config");

            entity.Property(e => e.ErxVendor).IsFixedLength();
            entity.Property(e => e.AcctId).IsFixedLength();
            entity.Property(e => e.PortalId).IsFixedLength();
            entity.Property(e => e.PortalIdBkup).IsFixedLength();
            entity.Property(e => e.ServiceLvl).IsFixedLength();
            entity.Property(e => e.ServiceLvlCode).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxDataTrans>(entity =>
        {
            entity.HasKey(e => e.ErxDataId).HasName("pkerx_data_trans");

            entity.Property(e => e.ErxDataId).ValueGeneratedNever();
            entity.Property(e => e.DbField).IsFixedLength();
            entity.Property(e => e.DbTable).IsFixedLength();
            entity.Property(e => e.ErxSeg).IsFixedLength();
            entity.Property(e => e.ErxSubTag).IsFixedLength();
            entity.Property(e => e.ErxTag).IsFixedLength();
            entity.Property(e => e.NewRecInd).IsFixedLength();
            entity.Property(e => e.SubTabInd).IsFixedLength();
        });

        modelBuilder.Entity<ErxDrugSeg>(entity =>
        {
            entity.HasKey(e => e.ErxDrugId).HasName("pkerx_drug_seg");

            entity.Property(e => e.ErxDrugId).ValueGeneratedNever();
            entity.Property(e => e.CodeAgncy).IsFixedLength();
            entity.Property(e => e.DaysSupp).IsFixedLength();
            entity.Property(e => e.DeaSchedule).IsFixedLength();
            entity.Property(e => e.Dosage).IsFixedLength();
            entity.Property(e => e.DrugDbCd).IsFixedLength();
            entity.Property(e => e.DrugDbSrc).IsFixedLength();
            entity.Property(e => e.DrugDesc).IsFixedLength();
            entity.Property(e => e.DrugDtPrd).IsFixedLength();
            entity.Property(e => e.DrugDtPrdQual).IsFixedLength();
            entity.Property(e => e.DrugDtQual).IsFixedLength();
            entity.Property(e => e.DrugStrength).IsFixedLength();
            entity.Property(e => e.DrugStrengthCode).IsFixedLength();
            entity.Property(e => e.ErxDrugSegTyp).IsFixedLength();
            entity.Property(e => e.FormCode).IsFixedLength();
            entity.Property(e => e.ItemDesc).IsFixedLength();
            entity.Property(e => e.ItemId).IsFixedLength();
            entity.Property(e => e.ItemNo).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
            entity.Property(e => e.ProdCd).IsFixedLength();
            entity.Property(e => e.ProdSubCode).IsFixedLength();
            entity.Property(e => e.Qty).IsFixedLength();
            entity.Property(e => e.QtyCode).IsFixedLength();
            entity.Property(e => e.QtyQual).IsFixedLength();
            entity.Property(e => e.RefNo).IsFixedLength();
            entity.Property(e => e.RefNoQual).IsFixedLength();
            entity.Property(e => e.RefillQty).IsFixedLength();
            entity.Property(e => e.RefillsUnitQual).IsFixedLength();
            entity.Property(e => e.RxNote).IsFixedLength();
        });

        modelBuilder.Entity<ErxDueSeg>(entity =>
        {
            entity.HasKey(e => e.ErxDueId).HasName("pkerx_due_seg");

            entity.Property(e => e.ErxDueId).ValueGeneratedNever();
            entity.Property(e => e.AckReason).IsFixedLength();
            entity.Property(e => e.ClinicSigCd).IsFixedLength();
            entity.Property(e => e.CoAgtId).IsFixedLength();
            entity.Property(e => e.CoAgtQual).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
            entity.Property(e => e.ProfSrvcCd).IsFixedLength();
            entity.Property(e => e.SrvcResultCd).IsFixedLength();
            entity.Property(e => e.SrvcRsnCd).IsFixedLength();
        });

        modelBuilder.Entity<ErxErrLog>(entity =>
        {
            entity.HasKey(e => e.ErxErrLogId).HasName("pkerx_err_log");

            entity.Property(e => e.ErxErrLogId).ValueGeneratedNever();
            entity.Property(e => e.AckInd).IsFixedLength();
            entity.Property(e => e.ExternalErrCd).IsFixedLength();
            entity.Property(e => e.InternalErrCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxIds>(entity =>
        {
            entity.HasKey(e => e.ErxIdId).HasName("pkerx_ids");

            entity.Property(e => e.ErxIdId).ValueGeneratedNever();
            entity.Property(e => e.ErxSeg).IsFixedLength();
            entity.Property(e => e.IdValue).IsFixedLength();
            entity.Property(e => e.IdValueCd).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
        });

        modelBuilder.Entity<ErxInOutXmlLog>(entity =>
        {
            entity.HasKey(e => e.ErxInOutXmlLogId).HasName("PKerx_in_out_xml_log");

            entity.Property(e => e.MsgId).IsFixedLength();
            entity.Property(e => e.PrescriberOrderNum).IsFixedLength();
            entity.Property(e => e.RelatesToMsgId).IsFixedLength();
            entity.Property(e => e.RxRefNum).IsFixedLength();
        });

        modelBuilder.Entity<ErxLog>(entity =>
        {
            entity.HasKey(e => new { e.ErxEvent, e.EventStartDt }).HasName("pkerx_log");

            entity.Property(e => e.ErxEvent).IsFixedLength();
            entity.Property(e => e.LastUpdatedInd).IsFixedLength();
        });

        modelBuilder.Entity<ErxObsSeg>(entity =>
        {
            entity.HasKey(e => e.ErxObsId).HasName("pkerx_obs_seg");

            entity.Property(e => e.ErxObsId).ValueGeneratedNever();
            entity.Property(e => e.MeasDataQual).IsFixedLength();
            entity.Property(e => e.MeasDimension).IsFixedLength();
            entity.Property(e => e.MeasSrcCd).IsFixedLength();
            entity.Property(e => e.MeasUnitCd).IsFixedLength();
            entity.Property(e => e.MeasValue).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
        });

        modelBuilder.Entity<ErxOutboundStatusVerifyError>(entity =>
        {
            entity.HasKey(e => e.ErxOutboundStatusVerifyErrorId).HasName("pkerx_outbound_status_verify_error");

            entity.ToTable("erx_outbound_status_verify_error", tb =>
                {
                    tb.HasTrigger("tD_erx_outbound_status_verify_error");
                    tb.HasTrigger("tU_erx_outbound_status_verify_error");
                });

            entity.Property(e => e.ErxOutboundStatusVerifyErrorId).ValueGeneratedNever();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.MessageType).IsFixedLength();
            entity.Property(e => e.PharmId).IsFixedLength();
            entity.Property(e => e.RcvdInd).IsFixedLength();
            entity.Property(e => e.RespToMessageType).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.SentInd).IsFixedLength();
            entity.Property(e => e.Spi).IsFixedLength();
            entity.Property(e => e.StatusVerifyErrorCd).IsFixedLength();
            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxOutboundStatusVerifyErrorMh>(entity =>
        {
            entity.HasKey(e => new { e.ErxOutboundStatusVerifyErrorId, e.RevisionNo }).HasName("pkerx_outbound_status_verify_error_mh");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.MessageType).IsFixedLength();
            entity.Property(e => e.PharmId).IsFixedLength();
            entity.Property(e => e.RcvdInd).IsFixedLength();
            entity.Property(e => e.RespToMessageType).IsFixedLength();
            entity.Property(e => e.SentInd).IsFixedLength();
            entity.Property(e => e.Spi).IsFixedLength();
            entity.Property(e => e.StatusVerifyErrorCd).IsFixedLength();
            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxPhone>(entity =>
        {
            entity.HasKey(e => e.ErxPhoneId).HasName("pkerx_phone");

            entity.Property(e => e.ErxPhoneId).ValueGeneratedNever();
            entity.Property(e => e.ErxSeg).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
            entity.Property(e => e.PhoneNo).IsFixedLength();
            entity.Property(e => e.PhoneNoCd).IsFixedLength();
        });

        modelBuilder.Entity<ErxPttSeg>(entity =>
        {
            entity.HasKey(e => e.ErxPttId).HasName("pkerx_ptt_seg");

            entity.Property(e => e.ErxPttId).ValueGeneratedNever();
            entity.Property(e => e.Addr1).IsFixedLength();
            entity.Property(e => e.Addr2).IsFixedLength();
            entity.Property(e => e.Addr2Cd).IsFixedLength();
            entity.Property(e => e.City).IsFixedLength();
            entity.Property(e => e.Country).IsFixedLength();
            entity.Property(e => e.Gender).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
            entity.Property(e => e.PtFirstName).IsFixedLength();
            entity.Property(e => e.PtIdCd).IsFixedLength();
            entity.Property(e => e.PtIdentifier).IsFixedLength();
            entity.Property(e => e.PtInit).IsFixedLength();
            entity.Property(e => e.PtLastName).IsFixedLength();
            entity.Property(e => e.PtPrefix).IsFixedLength();
            entity.Property(e => e.PtReltn).IsFixedLength();
            entity.Property(e => e.PtSuffix).IsFixedLength();
            entity.Property(e => e.State).IsFixedLength();
            entity.Property(e => e.ZipCd).IsFixedLength();
        });

        modelBuilder.Entity<ErxPvdSeg>(entity =>
        {
            entity.HasKey(e => e.ErxPvdId).HasName("pkerx_pvd_seg");

            entity.Property(e => e.ErxPvdId).ValueGeneratedNever();
            entity.Property(e => e.Addr1).IsFixedLength();
            entity.Property(e => e.Addr2).IsFixedLength();
            entity.Property(e => e.Addr2Cd).IsFixedLength();
            entity.Property(e => e.AgtFirstName).IsFixedLength();
            entity.Property(e => e.AgtInit).IsFixedLength();
            entity.Property(e => e.AgtLastName).IsFixedLength();
            entity.Property(e => e.AgtPrefix).IsFixedLength();
            entity.Property(e => e.AgtSuffix).IsFixedLength();
            entity.Property(e => e.City).IsFixedLength();
            entity.Property(e => e.ClinicName).IsFixedLength();
            entity.Property(e => e.Country).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
            entity.Property(e => e.ProvCd).IsFixedLength();
            entity.Property(e => e.ProvEmail).IsFixedLength();
            entity.Property(e => e.ProvFirstName).IsFixedLength();
            entity.Property(e => e.ProvInit).IsFixedLength();
            entity.Property(e => e.ProvLastName).IsFixedLength();
            entity.Property(e => e.ProvPrefix).IsFixedLength();
            entity.Property(e => e.ProvSpecCd).IsFixedLength();
            entity.Property(e => e.ProvSpecTypCd).IsFixedLength();
            entity.Property(e => e.ProvSuffix).IsFixedLength();
            entity.Property(e => e.State).IsFixedLength();
            entity.Property(e => e.ZipCd).IsFixedLength();
        });

        modelBuilder.Entity<ErxRefillDetail>(entity =>
        {
            entity.HasKey(e => e.ErxRefillDetailId).HasName("pkerx_refill_detail_id");

            entity.Property(e => e.ErxRefillDetailId).ValueGeneratedNever();
            entity.Property(e => e.Attribute).IsFixedLength();
            entity.Property(e => e.ProcInd).IsFixedLength();
            entity.Property(e => e.RefillSeg).IsFixedLength();
            entity.Property(e => e.RxRefNo).IsFixedLength();
        });

        modelBuilder.Entity<ErxRefillDrugCvg>(entity =>
        {
            entity.HasKey(e => e.ErxDrugCvgId).HasName("pkerx_refill_drug_cvg");

            entity.Property(e => e.ErxDrugCvgId).ValueGeneratedNever();
            entity.Property(e => e.DrugCvgStatusCd).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
        });

        modelBuilder.Entity<ErxRefillRqst>(entity =>
        {
            entity.HasKey(e => e.ErxRefillRqstId).HasName("pkerx_refill_rqst");

            entity.ToTable("erx_refill_rqst", tb =>
                {
                    tb.HasTrigger("tD_erx_refill_rqst");
                    tb.HasTrigger("tU_erx_refill_rqst");
                });

            entity.Property(e => e.ErxRefillRqstId).ValueGeneratedNever();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.DrugDesc).IsFixedLength();
            entity.Property(e => e.DrugDtPrd).IsFixedLength();
            entity.Property(e => e.DrugDtPrdQual).IsFixedLength();
            entity.Property(e => e.DrugDtQual).IsFixedLength();
            entity.Property(e => e.DrugStrength).IsFixedLength();
            entity.Property(e => e.EpcsSentCd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ObsNote).IsFixedLength();
            entity.Property(e => e.PharmId).IsFixedLength();
            entity.Property(e => e.PhysRevRqd).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.PrcInd).IsFixedLength();
            entity.Property(e => e.ProdCode).IsFixedLength();
            entity.Property(e => e.ProvFirstName).IsFixedLength();
            entity.Property(e => e.ProvId).IsFixedLength();
            entity.Property(e => e.ProvIdTyp).IsFixedLength();
            entity.Property(e => e.ProvLastName).IsFixedLength();
            entity.Property(e => e.ProvStkhId).IsFixedLength();
            entity.Property(e => e.PtFirstName).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.PtInit).IsFixedLength();
            entity.Property(e => e.PtKey).IsFixedLength();
            entity.Property(e => e.PtLastName).IsFixedLength();
            entity.Property(e => e.QtyDisp).IsFixedLength();
            entity.Property(e => e.RcvdInd).IsFixedLength();
            entity.Property(e => e.RefillRespDesc).IsFixedLength();
            entity.Property(e => e.RefillRespRsnCd).IsFixedLength();
            entity.Property(e => e.RefillRqstRespCd).IsFixedLength();
            entity.Property(e => e.RespPlacerOrderNo).IsFixedLength();
            entity.Property(e => e.RespProvStkhId).IsFixedLength();
            entity.Property(e => e.RespSvsrStkhId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.RqstRelatesToMsgId).IsFixedLength();
            entity.Property(e => e.RxRefNo).IsFixedLength();
            entity.Property(e => e.SentInd).IsFixedLength();
            entity.Property(e => e.Sig).IsFixedLength();
            entity.Property(e => e.SsMsgId).IsFixedLength();
            entity.Property(e => e.SvsrStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxRefillRqstMh>(entity =>
        {
            entity.HasKey(e => new { e.ErxRefillRqstId, e.RevisionNo }).HasName("pkerx_refill_rqst_mh");

            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.DrugDesc).IsFixedLength();
            entity.Property(e => e.DrugDtPrd).IsFixedLength();
            entity.Property(e => e.DrugDtPrdQual).IsFixedLength();
            entity.Property(e => e.DrugDtQual).IsFixedLength();
            entity.Property(e => e.DrugStrength).IsFixedLength();
            entity.Property(e => e.EpcsSentCd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ObsNote).IsFixedLength();
            entity.Property(e => e.PharmId).IsFixedLength();
            entity.Property(e => e.PhysRevRqd).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.PrcInd).IsFixedLength();
            entity.Property(e => e.ProdCode).IsFixedLength();
            entity.Property(e => e.ProvFirstName).IsFixedLength();
            entity.Property(e => e.ProvId).IsFixedLength();
            entity.Property(e => e.ProvIdTyp).IsFixedLength();
            entity.Property(e => e.ProvLastName).IsFixedLength();
            entity.Property(e => e.ProvStkhId).IsFixedLength();
            entity.Property(e => e.PtFirstName).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.PtInit).IsFixedLength();
            entity.Property(e => e.PtKey).IsFixedLength();
            entity.Property(e => e.PtLastName).IsFixedLength();
            entity.Property(e => e.QtyDisp).IsFixedLength();
            entity.Property(e => e.RcvdInd).IsFixedLength();
            entity.Property(e => e.RefillRespDesc).IsFixedLength();
            entity.Property(e => e.RefillRespRsnCd).IsFixedLength();
            entity.Property(e => e.RefillRqstRespCd).IsFixedLength();
            entity.Property(e => e.RespPlacerOrderNo).IsFixedLength();
            entity.Property(e => e.RespProvStkhId).IsFixedLength();
            entity.Property(e => e.RespSvsrStkhId).IsFixedLength();
            entity.Property(e => e.RqstRelatesToMsgId).IsFixedLength();
            entity.Property(e => e.RxRefNo).IsFixedLength();
            entity.Property(e => e.SentInd).IsFixedLength();
            entity.Property(e => e.Sig).IsFixedLength();
            entity.Property(e => e.SsMsgId).IsFixedLength();
            entity.Property(e => e.SvsrStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxRoutingErrLog>(entity =>
        {
            entity.Property(e => e.ErxRoutingErrLogId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxRxFill>(entity =>
        {
            entity.HasKey(e => e.ErxRxFillId).HasName("pkerx_rx_fill");

            entity.ToTable("erx_rx_fill", tb =>
                {
                    tb.HasTrigger("tD_erx_rx_fill");
                    tb.HasTrigger("tU_erx_rx_fill");
                });

            entity.Property(e => e.ErxRxFillId).ValueGeneratedNever();
            entity.Property(e => e.ErxMsgTyp).IsFixedLength();
            entity.Property(e => e.FillStatusCd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.MsgId).IsFixedLength();
            entity.Property(e => e.PharmId).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.ProvStkhId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RelatesToMsgId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.RxRefNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxRxFillMh>(entity =>
        {
            entity.HasKey(e => new { e.ErxRxFillId, e.RevisionNo }).HasName("pkerx_rx_fill_mh");

            entity.Property(e => e.ErxMsgTyp).IsFixedLength();
            entity.Property(e => e.FillStatusCd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.MsgId).IsFixedLength();
            entity.Property(e => e.PharmId).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.ProvStkhId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RelatesToMsgId).IsFixedLength();
            entity.Property(e => e.RxRefNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxThreadItem>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.ErxThreadItemId }).HasName("pkerx_thread_item");

            entity.ToTable("erx_thread_item", tb =>
                {
                    tb.HasTrigger("tD_erx_thread_item");
                    tb.HasTrigger("tU_erx_thread_item");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ErxMsgTyp).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ErxThreadItemMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.ErxThreadItemId, e.RevisionNo }).HasName("pkerx_thread_item_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ErxMsgTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<EstimatedDvh>(entity =>
        {
            entity.HasKey(e => e.EstimatedDvhser).HasName("XPKEstimatedDVH");

            entity.ToTable("EstimatedDVH", tb =>
                {
                    tb.HasTrigger("tI_EstimatedDVH");
                    tb.HasTrigger("tU_EstimatedDVH");
                });

            entity.Property(e => e.EstimatedDvhser).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.EstimatedDvh).HasConstraintName("FKPlanSetup_EstimatedDVH");

            entity.HasOne(d => d.StructureSerNavigation).WithMany(p => p.EstimatedDvh).HasConstraintName("FKStructure_EstimatedDVH");
        });

        modelBuilder.Entity<EthnicGroups>(entity =>
        {
            entity.HasKey(e => e.EthnicGroupId).HasName("pkethnic_groups");

            entity.Property(e => e.EthnicGroupId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.ArraHitechInd).IsFixedLength();
            entity.Property(e => e.DefaultInd).IsFixedLength();
            entity.Property(e => e.EthnicGroupCd).IsFixedLength();
            entity.Property(e => e.EthnicGroupDesc).IsFixedLength();
            entity.Property(e => e.SingleSelectInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.MappedEthnicGroup).WithMany(p => p.InverseMappedEthnicGroup).HasConstraintName("fk_mapped_ethnic_group_id");
        });

        modelBuilder.Entity<EventTyp>(entity =>
        {
            entity.HasKey(e => e.EventTyp1).HasName("pkevent_typ");

            entity.Property(e => e.EventTyp1).IsFixedLength();
            entity.Property(e => e.EventDesc).IsFixedLength();
            entity.Property(e => e.EventName).IsFixedLength();
            entity.Property(e => e.GnrcIntvInd).IsFixedLength();
            entity.Property(e => e.SchEventName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ExamAsmt>(entity =>
        {
            entity.HasKey(e => new { e.ExamCompId, e.ExamAsmtAttrId, e.ExamAsmtId, e.InstId, e.Userid }).HasName("pkexam_asmt");

            entity.ToTable("exam_asmt", tb => tb.HasTrigger("tU_exam_asmt"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ExamAsmtCd).IsFixedLength();
            entity.Property(e => e.ExamAsmtDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ExamAsmtAttr).WithMany(p => p.ExamAsmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_exam_asmt");
        });

        modelBuilder.Entity<ExamAsmtAttr>(entity =>
        {
            entity.HasKey(e => new { e.ExamCompId, e.ExamAsmtAttrId, e.InstId, e.Userid }).HasName("pkexam_asmt_attr");

            entity.ToTable("exam_asmt_attr", tb => tb.HasTrigger("tU_exam_asmt_attr"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AsmtValueTyp).IsFixedLength();
            entity.Property(e => e.DescPhrase).IsFixedLength();
            entity.Property(e => e.ExamCompAttr).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.UserExamComp).WithMany(p => p.ExamAsmtAttr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_exam_asmt_attr");
        });

        modelBuilder.Entity<ExamAsmtAttrCulture>(entity =>
        {
            entity.HasKey(e => new { e.ExamCompId, e.ExamAsmtAttrId, e.CultureCd }).HasName("pkexam_asmt_attr_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.LookupDesc).IsFixedLength();
            entity.Property(e => e.LookupDescPhrase).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ExamAsmtCulture>(entity =>
        {
            entity.HasKey(e => new { e.ExamCompId, e.ExamAsmtAttrId, e.ExamAsmtId, e.CultureCd }).HasName("pkexam_asmt_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.LookupDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ExamComp>(entity =>
        {
            entity.HasKey(e => e.ExamCompId).HasName("pkexam_comp");

            entity.Property(e => e.ExamCompId).ValueGeneratedNever();
            entity.Property(e => e.ExamCd).IsFixedLength();
            entity.Property(e => e.ExamCompDesc).IsFixedLength();
            entity.Property(e => e.NegDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ExamCompCulture>(entity =>
        {
            entity.HasKey(e => new { e.ExamCompId, e.CultureCd }).HasName("pkexam_comp_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.ExamCd).IsFixedLength();
            entity.Property(e => e.LookupDesc).IsFixedLength();
            entity.Property(e => e.LookupDescNeg).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ExamDfltDesc>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.InstId, e.TypOfTest, e.SystemComp }).HasName("pkexam_dflt_desc");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.SystemComp).IsFixedLength();
            entity.Property(e => e.NormalDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<ExamSystem>(entity =>
        {
            entity.HasKey(e => e.SystemTypId).HasName("pkexam_system");

            entity.Property(e => e.SystemTypId).ValueGeneratedNever();
            entity.Property(e => e.ExamCd).IsFixedLength();
            entity.Property(e => e.ExamSystemDesc).IsFixedLength();
            entity.Property(e => e.SexCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ExamSystemDfltCulture>(entity =>
        {
            entity.HasKey(e => new { e.SystemTypId, e.CultureCd }).HasName("pkexam_system_dflt_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.AbnormalIntro).IsFixedLength();
            entity.Property(e => e.NormalDesc).IsFixedLength();
            entity.Property(e => e.NormalIntro).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ExpDest>(entity =>
        {
            entity.HasKey(e => e.ExpDest1).HasName("pkexp_dest");

            entity.Property(e => e.ExpDest1).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ExpHxMast>(entity =>
        {
            entity.HasKey(e => e.SeqNo).HasName("pkexp_hx_mast");

            entity.Property(e => e.SeqNo).ValueGeneratedNever();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.DecryptionPw).IsFixedLength();
            entity.Property(e => e.DestInstInd).IsFixedLength();
            entity.Property(e => e.ExpDest).IsFixedLength();
            entity.Property(e => e.ExpFileName).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.NonaffiliatePw).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.ExpHxMast)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_exp_hx_mast");
        });

        modelBuilder.Entity<ExpHxPt>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.PtId }).HasName("pkexp_hx_pt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ExpTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.SeqNoNavigation).WithMany(p => p.ExpHxPt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_exp_hx_pt");
        });

        modelBuilder.Entity<ExpHxTp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.TpName, e.TpVersNo }).HasName("pkexp_hx_tp");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TpTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.SeqNoNavigation).WithMany(p => p.ExpHxTp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_exp_hx_tp");
        });

        modelBuilder.Entity<ExtDrugDb>(entity =>
        {
            entity.HasKey(e => e.ExtDrugDbId).HasName("pkext_drug_db");

            entity.Property(e => e.ExtDrugDbId).ValueGeneratedNever();
            entity.Property(e => e.ExtDrugDbAbbr).IsFixedLength();
            entity.Property(e => e.ExtDrugDbDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ExtDrugDbFdbDetail>(entity =>
        {
            entity.HasKey(e => e.ExtDrugDbId).HasName("pkext_drug_db_fdb_detail");

            entity.Property(e => e.ExtDrugDbId).ValueGeneratedNever();
            entity.Property(e => e.FdbPassword).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ExtDrugDbLog>(entity =>
        {
            entity.HasKey(e => e.ExtDrugDbLogId).HasName("pkext_drug_db_log");

            entity.Property(e => e.ExtDrugDbLogId).ValueGeneratedNever();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ExpiryInd).IsFixedLength();
            entity.Property(e => e.InitInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PrescriberUserInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();

            entity.HasOne(d => d.ExtDrugDb).WithMany(p => p.ExtDrugDbLog).HasConstraintName("fk4_ext_drug_db_log");

            entity.HasOne(d => d.Inst).WithMany(p => p.ExtDrugDbLog)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_ext_drug_db_log");

            entity.HasOne(d => d.UseridNavigation).WithMany(p => p.ExtDrugDbLogUseridNavigation).HasConstraintName("fk3_ext_drug_db_log");

            entity.HasOne(d => d.Userid1).WithMany(p => p.ExtDrugDbLogUserid1)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_ext_drug_db_log");
        });

        modelBuilder.Entity<ExternalBeam>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKExternalBeam");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ExternalBeam");
                    tb.HasTrigger("tI_ExternalBeam");
                    tb.HasTrigger("tU_ExternalBeam");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();
            entity.Property(e => e.CouchRepresentation).HasComment("Couch Representation on the User Interface. Defaults to IsocentricStdVar if null.\r\nSee Imaging SyRS for descriptions of different couch representations.\r\nDefined Terms are IEC61217, IsocentricStdVar.\r\nThe terms are extensible if support of a new representation is covered in system wide requirements.\r\nIsocentricStdVar means \"Isocentric Standard\", except from cases where application logic along the \r\nImaging SyRS defines a fallback to the legacy \"Isocentric Varian\". This is the case for older versions of OBI or PVA.\r\n");

            entity.HasOne(d => d.PfdefaultEnergySerNavigation).WithMany(p => p.ExternalBeam).HasConstraintName("FKEnergyMode_ExternalBeam");

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.ExternalBeam).HasConstraintName("FKRadiationDevice_ExternalBeam");
        });

        modelBuilder.Entity<ExternalField>(entity =>
        {
            entity.HasKey(e => e.RadiationSer).HasName("XPKExternalField");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ExternalField");
                    tb.HasTrigger("tD_ExternalField_PatientEditingLog");
                    tb.HasTrigger("tD_ExternalField_VaBusinessLogic");
                    tb.HasTrigger("tI_ExternalField");
                    tb.HasTrigger("tI_ExternalField_PatientEditingLog");
                    tb.HasTrigger("tI_ExternalField_VaBusinessLogic");
                    tb.HasTrigger("tU_ExternalField");
                    tb.HasTrigger("tU_ExternalField_PatientEditingLog");
                    tb.HasTrigger("tU_ExternalField_VaBusinessLogic");
                });

            entity.Property(e => e.RadiationSer).ValueGeneratedNever();

            entity.HasOne(d => d.BaselinePortalDoseSerNavigation).WithMany(p => p.ExternalField).HasConstraintName("FKImage_ExternalField");

            entity.HasOne(d => d.RadiationSerNavigation).WithOne(p => p.ExternalField).HasConstraintName("FKExternalFieldCommon_ExternalField");

            entity.HasOne(d => d.TrackingSerNavigation).WithMany(p => p.ExternalField).HasConstraintName("FKTracking_ExternalField");
        });

        modelBuilder.Entity<ExternalFieldCommon>(entity =>
        {
            entity.HasKey(e => e.RadiationSer).HasName("XPKExternalFieldCommon");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ExternalFieldCommon");
                    tb.HasTrigger("tD_ExternalFieldCommon_PatientEditingLog");
                    tb.HasTrigger("tD_ExternalFieldCommon_VaBusinessLogic");
                    tb.HasTrigger("tI_ExternalFieldCommon");
                    tb.HasTrigger("tI_ExternalFieldCommon_PatientEditingLog");
                    tb.HasTrigger("tI_ExternalFieldCommon_VaBusinessLogic");
                    tb.HasTrigger("tU_ExternalFieldCommon");
                    tb.HasTrigger("tU_ExternalFieldCommon_PatientEditingLog");
                    tb.HasTrigger("tU_ExternalFieldCommon_VaBusinessLogic");
                });

            entity.Property(e => e.RadiationSer).ValueGeneratedNever();

            entity.HasOne(d => d.EnergyModeSerNavigation).WithMany(p => p.ExternalFieldCommon).HasConstraintName("FKEnergyMode_ExternalFieldCommon");

            entity.HasOne(d => d.RadiationSerNavigation).WithOne(p => p.ExternalFieldCommon).HasConstraintName("FKRadiation_ExternalFieldCommon");

            entity.HasOne(d => d.TechniqueSerNavigation).WithMany(p => p.ExternalFieldCommon).HasConstraintName("FKTechnique_ExternalFieldCommon");

            entity.HasOne(d => d.ToleranceSerNavigation).WithMany(p => p.ExternalFieldCommon).HasConstraintName("FKTolerance_ExternalFieldCommon");
        });

        modelBuilder.Entity<ExternalFieldCommonHstry>(entity =>
        {
            entity.HasKey(e => e.RadiationHstrySer)
                .HasName("XPKExternalFieldCommonHstry")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ExternalFieldCommonHstry");
                    tb.HasTrigger("tD_ExternalFieldCommonHstry_PatientEditingLog");
                    tb.HasTrigger("tI_ExternalFieldCommonHstry");
                    tb.HasTrigger("tI_ExternalFieldCommonHstry_PatientEditingLog");
                    tb.HasTrigger("tU_ExternalFieldCommonHstry");
                    tb.HasTrigger("tU_ExternalFieldCommonHstry_PatientEditingLog");
                    tb.HasTrigger("tU_ExternalFieldCommonHstry_VaBusinessLogic");
                });

            entity.Property(e => e.RadiationHstrySer).ValueGeneratedNever();
            entity.Property(e => e.Pfflag).IsFixedLength();
            entity.Property(e => e.Piflag).IsFixedLength();

            entity.HasOne(d => d.RadiationHstrySerNavigation).WithOne(p => p.ExternalFieldCommonHstry).HasConstraintName("FKRadiationHstry_ExternalFieldCommonHstry");

            entity.HasOne(d => d.ToleranceSerNavigation).WithMany(p => p.ExternalFieldCommonHstry).HasConstraintName("FKTolerance_ExternalFieldCommonHstry");
        });

        modelBuilder.Entity<ExternalFieldHstry>(entity =>
        {
            entity.HasKey(e => e.RadiationHstrySer)
                .HasName("XPKExternalFieldHstry")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ExternalFieldHstry_PatientEditingLog");
                    tb.HasTrigger("tI_ExternalFieldHstry");
                    tb.HasTrigger("tI_ExternalFieldHstry_PatientEditingLog");
                    tb.HasTrigger("tU_ExternalFieldHstry");
                    tb.HasTrigger("tU_ExternalFieldHstry_PatientEditingLog");
                    tb.HasTrigger("tU_ExternalFieldHstry_VaBusinessLogic");
                });

            entity.Property(e => e.RadiationHstrySer).ValueGeneratedNever();

            entity.HasOne(d => d.RadiationHstrySerNavigation).WithOne(p => p.ExternalFieldHstry)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKExternalFieldCommonHstry_ExternalFieldHstry");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.ExternalFieldHstry).HasConstraintName("FKExternalBeam_ExternalFieldHstry");
        });

        modelBuilder.Entity<ExternalIntegration>(entity =>
        {
            entity.HasKey(e => e.ExternalIntegrationSer).HasName("XPKExternalIntegration");

            entity.Property(e => e.ExternalIntegrationSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<Fac>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacId }).HasName("pkfac");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.FacAddress1).IsFixedLength();
            entity.Property(e => e.FacAddress2).IsFixedLength();
            entity.Property(e => e.FacAddress3).IsFixedLength();
            entity.Property(e => e.FacCity).IsFixedLength();
            entity.Property(e => e.FacCounty).IsFixedLength();
            entity.Property(e => e.FacName).IsFixedLength();
            entity.Property(e => e.FacPcZip).IsFixedLength();
            entity.Property(e => e.FacPrvState).IsFixedLength();
            entity.Property(e => e.FacTel).IsFixedLength();
            entity.Property(e => e.FacTelExt).IsFixedLength();
            entity.Property(e => e.Hl7Flag).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Country).WithMany(p => p.Fac).HasConstraintName("fk1_fac");

            entity.HasOne(d => d.FacPcZipFmt).WithMany(p => p.FacFacPcZipFmt).HasConstraintName("fk4_fac");

            entity.HasOne(d => d.FacTelFmt).WithMany(p => p.FacFacTelFmt).HasConstraintName("fk5_fac");

            entity.HasOne(d => d.FacTypNavigation).WithMany(p => p.Fac).HasConstraintName("fk2_fac");

            entity.HasOne(d => d.Inst).WithMany(p => p.Fac)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_fac");
        });

        modelBuilder.Entity<FacCalibration>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacId, e.FacCompId, e.EffDate, e.Sex, e.AgeStart }).HasName("pkfac_calibration");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.Sex).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();

            entity.HasOne(d => d.FacComp).WithMany(p => p.FacCalibration)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_fac_calibration");
        });

        modelBuilder.Entity<FacComp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacId, e.FacCompId }).HasName("pkfac_comp");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AppendResultInd).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.ConfiguredInd).IsFixedLength();
            entity.Property(e => e.FacCompName).IsFixedLength();
            entity.Property(e => e.FacTypOfTest).IsFixedLength();
            entity.Property(e => e.ImageInd).IsFixedLength();
            entity.Property(e => e.IntfMergeCmtInd).IsFixedLength();
            entity.Property(e => e.IntfOrdInd).IsFixedLength();
            entity.Property(e => e.IntfResultPrcsInd).IsFixedLength();
            entity.Property(e => e.MultiResultInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
        });

        modelBuilder.Entity<FacCompMap>(entity =>
        {
            entity.HasKey(e => e.FacCompSeq).HasName("pkfac_comp_map");

            entity.Property(e => e.FacCompSeq).ValueGeneratedNever();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.MappingCd).IsFixedLength();
            entity.Property(e => e.MappingTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();

            entity.HasOne(d => d.FacComp).WithMany(p => p.FacCompMap)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_fac_comp_map");
        });

        modelBuilder.Entity<FacCompVal>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacId, e.FacCompId, e.FacCompValId }).HasName("pkfac_comp_val");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.FacCompVal1).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();

            entity.HasOne(d => d.FacComp).WithMany(p => p.FacCompVal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_fac_comp_val");
        });

        modelBuilder.Entity<FacGroup>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacId, e.FacGroupId }).HasName("pkfac_group");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.BillableInd).IsFixedLength();
            entity.Property(e => e.ConfiguredInd).IsFixedLength();
            entity.Property(e => e.FacGroupName).IsFixedLength();
            entity.Property(e => e.GroupInd).IsFixedLength();
            entity.Property(e => e.IntfOrdInd).IsFixedLength();
            entity.Property(e => e.IntfResultPrcsInd).IsFixedLength();
            entity.Property(e => e.OrderReasonReqInd).IsFixedLength();
            entity.Property(e => e.ReportGrpInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FacGroupBill>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacId, e.FacGroupId, e.FacGroupBillId }).HasName("pkfac_group_bill");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.FacGroup).WithMany(p => p.FacGroupBill)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_fac_group_bill");
        });

        modelBuilder.Entity<FacGroupDxReq>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacId, e.FacGroupId, e.FacGroupDxReqGroupId }).HasName("pkfac_group_dx_req");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FacGroupDxReqGroup>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacId, e.FacGroupId, e.FacGroupDxReqGroupId, e.FacGroupDxReqCompId }).HasName("pkfac_group_dx_req_group");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.FromIcdCd).IsFixedLength();
            entity.Property(e => e.ToIcdCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FacGroupMap>(entity =>
        {
            entity.HasKey(e => e.FacGrpMapSeq).HasName("pkfac_group_map");

            entity.Property(e => e.FacGrpMapSeq).ValueGeneratedNever();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.MappingCd).IsFixedLength();
            entity.Property(e => e.MappingTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.FacGroup).WithMany(p => p.FacGroupMap)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_fac_group_map");
        });

        modelBuilder.Entity<FacGroupReason>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacId, e.FacGroupId, e.FacGroupReasonId }).HasName("pkfac_group_reason");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.OrderReasonDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FacRqstn>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacId, e.FacRqstnNo }).HasName("pkfac_rqstn");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.FacRqstnNo).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.BillableInd).IsFixedLength();
            entity.Property(e => e.ElctrncTransfer).IsFixedLength();
            entity.Property(e => e.FacRqstnDesc).IsFixedLength();
            entity.Property(e => e.FixedFontInd).IsFixedLength();
            entity.Property(e => e.GnrcRqstnInd).IsFixedLength();
            entity.Property(e => e.IncludeSpcmn).IsFixedLength();
            entity.Property(e => e.PrintRqstnFlag).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VitalsInd).IsFixedLength();

            entity.HasOne(d => d.Fac).WithMany(p => p.FacRqstn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_fac_rqstn");
        });

        modelBuilder.Entity<FacRqstnCat>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacId, e.FacRqstnNo, e.FacRqstnCatNo }).HasName("pkfac_rqstn_cat");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.FacRqstnNo).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.FacRqstnCatDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.FacRqstn).WithMany(p => p.FacRqstnCat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_fac_rqstn_cat");
        });

        modelBuilder.Entity<FacTyp>(entity =>
        {
            entity.HasKey(e => e.FacTyp1).HasName("pkfac_typ");

            entity.Property(e => e.FacTyp1).ValueGeneratedNever();
            entity.Property(e => e.FacDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<FacUnavl>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.UnavlId, e.TransLogTstamp }).HasName("pkfac_unavl");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UnavlCmt).IsFixedLength();
        });

        modelBuilder.Entity<FacUomMap>(entity =>
        {
            entity.HasKey(e => e.FacUomMapId).HasName("pkfac_uom_map");

            entity.Property(e => e.FacUomMapId).ValueGeneratedNever();
            entity.Property(e => e.FacUomDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.UomNavigation).WithMany(p => p.FacUomMap)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_fac_uom_map");
        });

        modelBuilder.Entity<FaxProduct>(entity =>
        {
            entity.HasKey(e => e.FaxProductId).HasName("pkfax_product");

            entity.Property(e => e.FaxProductId).ValueGeneratedNever();
            entity.Property(e => e.FaxProduct1).IsFixedLength();
            entity.Property(e => e.FaxProductVendor).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FbmLtr>(entity =>
        {
            entity.HasKey(e => e.FbmLtrId).HasName("pkfbm_ltr");

            entity.Property(e => e.FbmLtrId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.PtNotificationInd).IsFixedLength();
            entity.Property(e => e.RcptCd).IsFixedLength();
            entity.Property(e => e.TemplateInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FbmPgm>(entity =>
        {
            entity.HasKey(e => e.FbmPgmId).HasName("pkfbm_pgm");

            entity.Property(e => e.FbmPgmId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FbmPgmSch>(entity =>
        {
            entity.HasKey(e => new { e.FbmPgmId, e.FbmPgmSchId }).HasName("pkfbm_pgm_sch");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FbmPgmTyp>(entity =>
        {
            entity.HasKey(e => e.FbmPgmTyp1).HasName("pkfbm_pgm_typ");

            entity.Property(e => e.FbmPgmTyp1).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FbmPtFuTyp>(entity =>
        {
            entity.HasKey(e => e.FbmPtFuTyp1).HasName("pkfbm_pt_fu_typ");

            entity.Property(e => e.FbmPtFuTyp1).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FbmPtHandlingTyp>(entity =>
        {
            entity.HasKey(e => e.FbmPtHandlingTyp1).HasName("pkfbm_pt_handling_typ");

            entity.Property(e => e.FbmPtHandlingTyp1).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FbmPtRespTyp>(entity =>
        {
            entity.HasKey(e => e.FbmPtRespTyp1).HasName("pkfbm_pt_resp_typ");

            entity.Property(e => e.FbmPtRespTyp1).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FcnAreaTyp>(entity =>
        {
            entity.HasKey(e => e.FcnAreaTyp1).HasName("pkfcn_area_typ");

            entity.Property(e => e.FcnAreaTyp1).ValueGeneratedNever();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.FcnAreaTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<FcnCls>(entity =>
        {
            entity.HasKey(e => e.FcnCls1).HasName("pkfcn_cls");

            entity.Property(e => e.FcnCls1).ValueGeneratedNever();
            entity.Property(e => e.FcnClsDesc).IsFixedLength();
            entity.Property(e => e.FormulaDspInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<FcnComp>(entity =>
        {
            entity.HasKey(e => new { e.FcnTyp, e.CompName }).HasName("pkfcn_comp");

            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.CompNameNavigation).WithMany(p => p.FcnComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_fcn_comp");
        });

        modelBuilder.Entity<FcnCompTyp>(entity =>
        {
            entity.HasKey(e => e.CompName).HasName("pkfcn_comp_typ");

            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.CompAlias1).IsFixedLength();
            entity.Property(e => e.CompAlias2).IsFixedLength();
            entity.Property(e => e.EditInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<FcnDetail>(entity =>
        {
            entity.HasKey(e => e.FcnId).HasName("pkfcn_detail");

            entity.Property(e => e.FcnId).ValueGeneratedNever();
            entity.Property(e => e.FcnDesc).IsFixedLength();
            entity.Property(e => e.FcnDetailName).IsFixedLength();
            entity.Property(e => e.SexCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.FcnTypNavigation).WithMany(p => p.FcnDetail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_fcn_detail");
        });

        modelBuilder.Entity<FcnTyp>(entity =>
        {
            entity.HasKey(e => e.FcnTyp1).HasName("pkfcn_typ");

            entity.Property(e => e.FcnTyp1).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.FcnComp).IsFixedLength();
            entity.Property(e => e.FcnDesc).IsFixedLength();
            entity.Property(e => e.FcnName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<FdaProduct>(entity =>
        {
            entity.HasKey(e => new { e.ApplNo, e.ProductNo, e.ProductMktStatus }).HasName("pkFDA_product");

            entity.Property(e => e.ApplNo).IsFixedLength();
            entity.Property(e => e.ProductNo).IsFixedLength();
            entity.Property(e => e.ReferenceDrug).IsFixedLength();
        });

        modelBuilder.Entity<FdbRegNdc>(entity =>
        {
            entity.HasKey(e => new { e.FdbNdcId, e.RegionCode, e.LanguageId }).HasName("pkFDB_reg_ndc");

            entity.Property(e => e.DeaClassCd).IsFixedLength();
            entity.Property(e => e.FdbAgentId).IsFixedLength();
            entity.Property(e => e.NdcCd).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
        });

        modelBuilder.Entity<FdbRegRxnorm>(entity =>
        {
            entity.HasKey(e => new { e.FdbRxnormId, e.RegionCode, e.LanguageId }).HasName("pkFDB_reg_rxnorm");

            entity.Property(e => e.FdbAgentId).IsFixedLength();
        });

        modelBuilder.Entity<FdbRegStrengths>(entity =>
        {
            entity.HasKey(e => new { e.IStrengthId, e.RegionCode, e.LanguageId }).HasName("pkFDB_reg_strengths");
        });

        modelBuilder.Entity<FdbRxnorm>(entity =>
        {
            entity.HasKey(e => e.FdbRxnormId).HasName("pkFDB_rxnorm");

            entity.Property(e => e.FdbRxnormId).ValueGeneratedNever();
            entity.Property(e => e.FdbAgentId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FieldAddOn>(entity =>
        {
            entity.HasKey(e => new { e.AddOnSer, e.RadiationSer }).HasName("XPKFieldAddOn");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_FieldAddOn_PatientEditingLog");
                    tb.HasTrigger("tI_FieldAddOn");
                    tb.HasTrigger("tI_FieldAddOn_PatientEditingLog");
                    tb.HasTrigger("tI_FieldAddOn_VaBusinessLogic");
                    tb.HasTrigger("tU_FieldAddOn");
                    tb.HasTrigger("tU_FieldAddOn_PatientEditingLog");
                    tb.HasTrigger("tU_FieldAddOn_VaBusinessLogic");
                });

            
                
                

            entity.HasOne(d => d.AddOnSerNavigation).WithMany(p => p.FieldAddOn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKAddOn_FieldAddOn");

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.FieldAddOn).HasConstraintName("FKExternalFieldCommon_FieldAddOn");

            entity.HasOne(d => d.SlotSerNavigation).WithMany(p => p.FieldAddOn).HasConstraintName("FKSlot_FieldAddOn");
        });

        modelBuilder.Entity<FieldPhoto>(entity =>
        {
            entity.HasKey(e => new { e.PhotoSer, e.RadiationSer }).HasName("XPKFieldPhoto");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_FieldPhoto");
                    tb.HasTrigger("tI_FieldPhoto_VaBusinessLogic");
                    tb.HasTrigger("tU_FieldPhoto");
                    tb.HasTrigger("tU_FieldPhoto_VaBusinessLogic");
                });

            
                
                

            entity.HasOne(d => d.PhotoSerNavigation).WithMany(p => p.FieldPhoto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPhoto_FieldPhoto");

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.FieldPhoto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRadiation_FieldPhoto");
        });

        modelBuilder.Entity<FieldProton>(entity =>
        {
            entity.HasKey(e => e.RadiationSer).HasName("XPKFieldProton");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_FieldProton");
                    tb.HasTrigger("tD_FieldProton_PatientEditingLog");
                    tb.HasTrigger("tD_FieldProton_VaBusinessLogic");
                    tb.HasTrigger("tI_FieldProton");
                    tb.HasTrigger("tI_FieldProton_PatientEditingLog");
                    tb.HasTrigger("tI_FieldProton_VaBusinessLogic");
                    tb.HasTrigger("tU_FieldProton");
                    tb.HasTrigger("tU_FieldProton_PatientEditingLog");
                    tb.HasTrigger("tU_FieldProton_VaBusinessLogic");
                });

            entity.Property(e => e.RadiationSer).ValueGeneratedNever();

            entity.HasOne(d => d.PrimaryRadiationSerNavigation).WithMany(p => p.InversePrimaryRadiationSerNavigation).HasConstraintName("FKFieldProton_FieldProton");

            entity.HasOne(d => d.RadiationSerNavigation).WithOne(p => p.FieldProton).HasConstraintName("FKExternalField_FieldProton");
        });

        modelBuilder.Entity<FieldSpecificTargetParameters>(entity =>
        {
            entity.HasKey(e => e.FieldSpecificTargetParametersSer).HasName("XPKFieldSpecificTargetParameters");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_FieldSpecificTargetParamete");
                    tb.HasTrigger("tI_FieldSpecificTargetParameters_VaBusinessLogic");
                    tb.HasTrigger("tU_FieldSpecificTargetParamete");
                    tb.HasTrigger("tU_FieldSpecificTargetParameters_VaBusinessLogic");
                });

            entity.Property(e => e.FieldSpecificTargetParametersSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.BaseStructureSerNavigation).WithMany(p => p.FieldSpecificTargetParametersBaseStructureSerNavigation).HasConstraintName("FKBaseStructure_FieldSpecificTargetParameters");

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.FieldSpecificTargetParameters)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKPlanSetup_FieldSpecificTargetParameters");

            entity.HasOne(d => d.StructureSerNavigation).WithMany(p => p.FieldSpecificTargetParametersStructureSerNavigation)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKStructure_FieldSpecificTargetParameters");
        });

        modelBuilder.Entity<FieldStructure>(entity =>
        {
            entity.HasKey(e => e.FieldStructureSer).HasName("XPKFieldStructure");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_FieldStructure");
                    tb.HasTrigger("tD_FieldStructure_VaBusinessLogic");
                    tb.HasTrigger("tI_FieldStructure");
                    tb.HasTrigger("tI_FieldStructure_VaBusinessLogic");
                    tb.HasTrigger("tU_FieldStructure");
                    tb.HasTrigger("tU_FieldStructure_VaBusinessLogic");
                });

            entity.Property(e => e.FieldStructureSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.BlockSerNavigation).WithMany(p => p.FieldStructure).HasConstraintName("FKBlock_FieldStructure");

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.FieldStructure)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKExternalFieldCommon_FieldStructure");

            entity.HasOne(d => d.StructureSerNavigation).WithMany(p => p.FieldStructure)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKStructure_FieldStructure");
        });

        modelBuilder.Entity<FieldVariation>(entity =>
        {
            entity.HasKey(e => e.FieldVariationSer).HasName("XPKFieldVariation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_FieldVariation");
                    tb.HasTrigger("tI_FieldVariation");
                    tb.HasTrigger("tU_FieldVariation");
                });

            entity.Property(e => e.FieldVariationSer).ValueGeneratedNever();
            entity.Property(e => e.FieldVariationParameters).HasComment("Contextual details relating to this field variation. May for example contain a key-value type data structure encoded as a string. \r\nThe data contained in a row is described in \"FieldVariationParameters Data Description\" document.");
            
                
                

            entity.HasOne(d => d.PlanVariationSerNavigation).WithMany(p => p.FieldVariation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPlanVariation_FieldVariation");

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.FieldVariation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRadiation_FieldVariation");
        });

        modelBuilder.Entity<FileLocation>(entity =>
        {
            entity.HasKey(e => e.FileLocationSer).HasName("XPKFileLocation");

            entity.Property(e => e.FileLocationSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<Financial>(entity =>
        {
            entity.HasKey(e => e.PtId).HasName("pkfinancial");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprForBilling).IsFixedLength();
            entity.Property(e => e.FinClsTypInstId).IsFixedLength();
            entity.Property(e => e.GuarInd).IsFixedLength();
            entity.Property(e => e.MedicadeNo).IsFixedLength();
            entity.Property(e => e.MedicareNo).IsFixedLength();
            entity.Property(e => e.PrecertReqInd).IsFixedLength();
            entity.Property(e => e.SelfPayInd).IsFixedLength();
            entity.Property(e => e.ThresholdAlertInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PmtSystem).WithMany(p => p.Financial).HasConstraintName("fk2_financial");

            entity.HasOne(d => d.Pt).WithOne(p => p.Financial)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_financial");
        });

        modelBuilder.Entity<FinancialCls>(entity =>
        {
            entity.HasKey(e => e.FinancialClsId).HasName("pkfinancial_cls");

            entity.Property(e => e.FinancialClsId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BaseTypNavigation).WithMany(p => p.FinancialCls)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_financial_cls");
        });

        modelBuilder.Entity<FinancialIns>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.FinancialInsId }).HasName("pkfinancial_ins");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.CertificateNo).IsFixedLength();
            entity.Property(e => e.County).IsFixedLength();
            entity.Property(e => e.CurrentEntryInd).IsFixedLength();
            entity.Property(e => e.HmoAuthNo).IsFixedLength();
            entity.Property(e => e.HmoInd).IsFixedLength();
            entity.Property(e => e.InsGroupNo).IsFixedLength();
            entity.Property(e => e.InsdAddress1).IsFixedLength();
            entity.Property(e => e.InsdAddress2).IsFixedLength();
            entity.Property(e => e.InsdAddress3).IsFixedLength();
            entity.Property(e => e.InsdCity).IsFixedLength();
            entity.Property(e => e.InsdFirstName).IsFixedLength();
            entity.Property(e => e.InsdIdNo).IsFixedLength();
            entity.Property(e => e.InsdInitial).IsFixedLength();
            entity.Property(e => e.InsdLastName).IsFixedLength();
            entity.Property(e => e.InsdPcZip).IsFixedLength();
            entity.Property(e => e.InsdPhone).IsFixedLength();
            entity.Property(e => e.InsdPrvState).IsFixedLength();
            entity.Property(e => e.InsdSexCd).IsFixedLength();
            entity.Property(e => e.InsdSinSsn).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PolicyHolder).IsFixedLength();
            entity.Property(e => e.PolicyNo).IsFixedLength();
            entity.Property(e => e.PrecertReqInd).IsFixedLength();
            entity.Property(e => e.PrimaryInd).IsFixedLength();
            entity.Property(e => e.SameAddrInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.InsdPhoneFmt).WithMany(p => p.FinancialIns).HasConstraintName("fk3_financial_ins");

            entity.HasOne(d => d.PlcyTyp).WithMany(p => p.FinancialIns).HasConstraintName("fk2_financial_ins");

            entity.HasOne(d => d.InsCo).WithMany(p => p.FinancialIns).HasConstraintName("fk1_financial_ins");
        });

        modelBuilder.Entity<FlatPatientDiagnosisSite>(entity =>
        {
            entity.HasIndex(e => e.Id, "XPKFlatPatientDiagnosisSite").IsClustered();

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<FmtClsTyp>(entity =>
        {
            entity.HasKey(e => e.FmtClsTyp1).HasName("pkfmt_cls_typ");

            entity.Property(e => e.FmtClsTyp1).ValueGeneratedNever();
            entity.Property(e => e.FmtClsDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<FmtField>(entity =>
        {
            entity.HasKey(e => e.FmtFieldId).HasName("pkfmt_field");

            entity.Property(e => e.FmtFieldId).ValueGeneratedNever();
            entity.Property(e => e.FmtFieldListName).IsFixedLength();
            entity.Property(e => e.FmtFieldName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.FmtClsTypNavigation).WithMany(p => p.FmtField).HasConstraintName("fk1_fmt_field");

            entity.HasOne(d => d.FmtString).WithMany(p => p.FmtField)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_fmt_field");

            entity.HasOne(d => d.CountryField).WithMany(p => p.FmtField).HasConstraintName("fk2_fmt_field");
        });

        modelBuilder.Entity<FmtString>(entity =>
        {
            entity.HasKey(e => e.FmtStringId).HasName("pkfmt_string");

            entity.Property(e => e.FmtStringId).ValueGeneratedNever();
            entity.Property(e => e.FmtStringDesc).IsFixedLength();
            entity.Property(e => e.FmtStringValue).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<FocusStatusTyp>(entity =>
        {
            entity.HasKey(e => e.FocusStatusTyp1).HasName("pkfocus_status_typ");

            entity.Property(e => e.FocusStatusTyp1).ValueGeneratedNever();
            entity.Property(e => e.FocusStatusDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<FormTyp>(entity =>
        {
            entity.HasKey(e => e.FormTyp1).HasName("pkform_typ");

            entity.Property(e => e.FormTyp1).ValueGeneratedNever();
            entity.Property(e => e.FormDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<FsCustView>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.PtId, e.FsFcnId, e.CompName }).HasName("pkfs_cust_view");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.FsDataTyp).IsFixedLength();
            entity.Property(e => e.TestCompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
        });

        modelBuilder.Entity<FsCustViewProvider>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.FsCustViewId }).HasName("pkfs_cust_view_provider");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.CustViewDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<FsCustViewProviderComp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.FsCustViewId, e.FsDataTyp, e.CompName }).HasName("pkfs_cust_view_provider_comp");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.FsDataTyp).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TestCompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
        });

        modelBuilder.Entity<FsFcnTyp>(entity =>
        {
            entity.HasKey(e => e.FsFcnId).HasName("pkfs_fcn_typ");

            entity.Property(e => e.FsFcnId).ValueGeneratedNever();
            entity.Property(e => e.FsFcnDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<GenderIdentity>(entity =>
        {
            entity.HasKey(e => e.GenderIdentityId).HasName("PK__gender_i__185E39E763616436");

            entity.Property(e => e.GenderIdentityId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.DefaultInd).IsFixedLength();
            entity.Property(e => e.FreeTextInd).IsFixedLength();
            entity.Property(e => e.GenderIdentityCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<GetActivityDetails14days>(entity =>
        {
            entity.ToView("GetActivityDetails_14Days", "DWH");
        });

        modelBuilder.Entity<GetActivityDetailsDosimetry>(entity =>
        {
            entity.ToView("GetActivityDetails_Dosimetry", "DWH");

            entity.Property(e => e.DxSite).IsFixedLength();
        });

        modelBuilder.Entity<GetActivityTransaction14days>(entity =>
        {
            entity.ToView("GetActivityTransaction_14Days", "DWH");
        });

        modelBuilder.Entity<GetActivityTransactionDosimetry>(entity =>
        {
            entity.ToView("GetActivityTransaction_Dosimetry", "DWH");
        });

        modelBuilder.Entity<GetPtPrimaryDateRankedDxSite>(entity =>
        {
            entity.ToView("GetPtPrimaryDateRankedDxSite", "DWH");

            entity.Property(e => e.DxSite).IsFixedLength();
        });

        modelBuilder.Entity<GetTablenames>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<GnrcGrp>(entity =>
        {
            entity.HasKey(e => e.GnrcGrpId).HasName("pkgnrc_grp");

            entity.Property(e => e.GnrcGrpId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.GnrcGrpDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<GnrcNote>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.GnrcNoteId }).HasName("pkgnrc_note");

            entity.ToTable("gnrc_note", tb => tb.HasTrigger("tU_gnrc_note"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.CrInd).IsFixedLength();
            entity.Property(e => e.GnrcNoteShortDesc).IsFixedLength();
            entity.Property(e => e.GnrcNoteTxt).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.GnrcNoteTypNavigation).WithMany(p => p.GnrcNote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_gnrc_note");

            entity.HasOne(d => d.Inst).WithMany(p => p.GnrcNote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_gnrc_note");
        });

        modelBuilder.Entity<GnrcNoteTyp>(entity =>
        {
            entity.HasKey(e => e.GnrcNoteTyp1).HasName("pkgnrc_note_typ");

            entity.Property(e => e.GnrcNoteTyp1).ValueGeneratedNever();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.GnrcNoteCol).IsFixedLength();
            entity.Property(e => e.GnrcNoteDesc).IsFixedLength();
            entity.Property(e => e.GnrcNoteTbl).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<GradingCriteria>(entity =>
        {
            entity.HasKey(e => new { e.GsAuthor, e.EffDate, e.TrTyp, e.TrCompName, e.TrGrade }).HasName("pkgrading_criteria");

            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TrCompName).IsFixedLength();
            entity.Property(e => e.ApprFlag).IsFixedLength();
            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.TrGradingDesc).IsFixedLength();
            entity.Property(e => e.TrGradingEnterDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TrComp).WithMany(p => p.GradingCriteria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_grading_criteria");
        });

        modelBuilder.Entity<GradingCriteriaCulture>(entity =>
        {
            entity.HasKey(e => new { e.GradingCriteriaId, e.CultureCd }).HasName("pkgrading_criteria_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<GradingSchemes>(entity =>
        {
            entity.HasKey(e => new { e.GsAuthor, e.EffDate }).HasName("pkgrading_schemes");

            entity.Property(e => e.GsDesc).IsFixedLength();
            entity.Property(e => e.GsTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.GsAuthorNavigation).WithMany(p => p.GradingSchemesGsAuthorNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_grading_schemes");

            entity.HasOne(d => d.OriginalGsAuthorNavigation).WithMany(p => p.GradingSchemesOriginalGsAuthorNavigation).HasConstraintName("fk1_grading_schemes");
        });

        modelBuilder.Entity<GraphicAnnotation>(entity =>
        {
            entity.HasKey(e => e.GraphicAnnotationSer).HasName("XPKGraphicAnnotation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_GraphicAnnotation");
                    tb.HasTrigger("tU_GraphicAnnotation");
                });

            entity.Property(e => e.GraphicAnnotationSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.GraphicAnnotationTypeSerNavigation).WithMany(p => p.GraphicAnnotation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKGraphicAnnotationType_GraphicAnnotation");

            entity.HasOne(d => d.ImageSerNavigation).WithMany(p => p.GraphicAnnotation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKImage_GraphicAnnotation");

            entity.HasOne(d => d.MaterialSerNavigation).WithMany(p => p.GraphicAnnotation).HasConstraintName("FKMaterial_GraphicAnnotation");
        });

        modelBuilder.Entity<GraphicAnnotationType>(entity =>
        {
            entity.HasKey(e => e.GraphicAnnotationTypeSer).HasName("XPKGraphicAnnotationType");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_GraphicAnnotationType");
                    tb.HasTrigger("tI_GraphicAnnotationType");
                    tb.HasTrigger("tU_GraphicAnnotationType");
                });

            entity.Property(e => e.GraphicAnnotationTypeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.MaterialSerNavigation).WithMany(p => p.GraphicAnnotationType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKMaterial_GraphicAnnotationType");
        });

        modelBuilder.Entity<GroupResource>(entity =>
        {
            entity.HasKey(e => e.GroupResourceSer).HasName("XPKGroupResource");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_GroupResource");
                    tb.HasTrigger("tU_GroupResource");
                });

            entity.Property(e => e.GroupResourceSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ResourceGroupSerNavigation).WithMany(p => p.GroupResource)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKResourceGroup_GroupResource");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.GroupResource).HasConstraintName("FKResource_GroupResource");
        });

        modelBuilder.Entity<GsTrSubComp>(entity =>
        {
            entity.HasKey(e => new { e.GsAuthor, e.EffDate, e.TrTyp, e.TrCompName, e.TrSubCompName }).HasName("pkgs_tr_sub_comp");

            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TrCompName).IsFixedLength();
            entity.Property(e => e.TrSubCompName).IsFixedLength();
            entity.Property(e => e.TrSubCompGroup).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TrComp).WithMany(p => p.GsTrSubComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_gs_tr_sub_comp");
        });

        modelBuilder.Entity<GsTrSubCompCulture>(entity =>
        {
            entity.HasKey(e => new { e.TrSubCompId, e.CultureCd }).HasName("pkgs_tr_sub_comp_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TrSubCompName).IsFixedLength();
            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<HcpBill>(entity =>
        {
            entity.HasKey(e => new { e.HcpInstId, e.HcpId, e.BillCd, e.BillCdTypId, e.BillInstanceId }).HasName("pkhcp_bill");

            entity.Property(e => e.HcpInstId).IsFixedLength();
            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.HcpName).WithMany(p => p.HcpBill)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hcp_bill");

            entity.HasOne(d => d.BillCdInstance).WithMany(p => p.HcpBill)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_hcp_bill");
        });

        modelBuilder.Entity<HcpName>(entity =>
        {
            entity.HasKey(e => new { e.HcpInstId, e.HcpId }).HasName("pkhcp_name");

            entity.Property(e => e.HcpInstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.HcpName1).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpperHcpName).IsFixedLength();

            entity.HasOne(d => d.HcpTypNavigation).WithMany(p => p.HcpName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hcp_name");
        });

        modelBuilder.Entity<HcpRx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.HcpRxId }).HasName("pkhcp_rx");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.DispByInstId).IsFixedLength();
            entity.Property(e => e.OrdByInstId).IsFixedLength();
            entity.Property(e => e.RefillInd).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtVisit).WithMany(p => p.HcpRx)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hcp_rx");
        });

        modelBuilder.Entity<HcpRxProd>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.HcpRxId, e.ItemNo }).HasName("pkhcp_rx_prod");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.HcpInstId).IsFixedLength();
            entity.Property(e => e.HcpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpperHcpName).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.RxTypNavigation).WithMany(p => p.HcpRxProd).HasConstraintName("fk2_hcp_rx_prod");

            entity.HasOne(d => d.HcpNameNavigation).WithMany(p => p.HcpRxProd).HasConstraintName("fk3_hcp_rx_prod");

            entity.HasOne(d => d.HcpRx).WithMany(p => p.HcpRxProd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hcp_rx_prod");
        });

        modelBuilder.Entity<HcpTyp>(entity =>
        {
            entity.HasKey(e => e.HcpTyp1).HasName("pkhcp_typ");

            entity.Property(e => e.HcpTyp1).ValueGeneratedNever();
            entity.Property(e => e.HcpTypDesc).IsFixedLength();
            entity.Property(e => e.ServiceInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<HelpIndex>(entity =>
        {
            entity.HasKey(e => new { e.AppCd, e.WindowLabel, e.MapId }).HasName("pkhelp_index");

            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.WindowLabel).IsFixedLength();
            entity.Property(e => e.HelpTopic).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<HelpKwrd>(entity =>
        {
            entity.HasKey(e => new { e.AppCd, e.WindowLabel }).HasName("pkhelp_kwrd");

            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.WindowLabel).IsFixedLength();
            entity.Property(e => e.HlpKwrd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.HelpKwrd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_help_kwrd");
        });

        modelBuilder.Entity<HelpUsage>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.DtFirstAccess, e.InstId, e.AppCd }).HasName("pkhelp_usage");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.WindowLabel).IsFixedLength();
        });

        modelBuilder.Entity<HistologyCode>(entity =>
        {
            entity.ToView("HistologyCode");
        });

        modelBuilder.Entity<Hl7AppTyp>(entity =>
        {
            entity.HasKey(e => new { e.AppCd, e.AppTyp }).HasName("pkhl7_app_typ");

            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AppTyp).IsFixedLength();
            entity.Property(e => e.AppTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.Hl7AppTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_app_typ");
        });

        modelBuilder.Entity<Hl7Comp>(entity =>
        {
            entity.HasKey(e => e.CompId).HasName("pkhl7_comp");

            entity.Property(e => e.CompId).IsFixedLength();
            entity.Property(e => e.CompDataTyp).IsFixedLength();
            entity.Property(e => e.CompDesc).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.DataFormat).IsFixedLength();
            entity.Property(e => e.DataTyp).IsFixedLength();
            entity.Property(e => e.DefTyp).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.SubCompDataTyp).IsFixedLength();
            entity.Property(e => e.SubCompDesc).IsFixedLength();
            entity.Property(e => e.SubCompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.CompDataTypNavigation).WithMany(p => p.Hl7CompCompDataTypNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_hl7_comp");

            entity.HasOne(d => d.DataTypNavigation).WithMany(p => p.Hl7CompDataTypNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_hl7_comp");

            entity.HasOne(d => d.DefTypNavigation).WithMany(p => p.Hl7Comp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_comp");

            entity.HasOne(d => d.SubCompDataTypNavigation).WithMany(p => p.Hl7CompSubCompDataTypNavigation).HasConstraintName("fk4_hl7_comp");
        });

        modelBuilder.Entity<Hl7CondDetail>(entity =>
        {
            entity.HasKey(e => new { e.FieldCompXrefId, e.Hl7CondHeaderId, e.CondOrder }).HasName("pkhl7_cond_detail");

            entity.Property(e => e.FieldCompXrefId).IsFixedLength();
            entity.Property(e => e.Hl7CondHeaderId).IsFixedLength();
            entity.Property(e => e.CloseBracket).IsFixedLength();
            entity.Property(e => e.CmprFieldCompXrefId).IsFixedLength();
            entity.Property(e => e.CmprMappedInd).IsFixedLength();
            entity.Property(e => e.CmprOperator).IsFixedLength();
            entity.Property(e => e.CmprSegFieldXrefId).IsFixedLength();
            entity.Property(e => e.CmprValCd).IsFixedLength();
            entity.Property(e => e.CondFieldCompXrefId).IsFixedLength();
            entity.Property(e => e.CondMappedInd).IsFixedLength();
            entity.Property(e => e.CondSegFieldXrefId).IsFixedLength();
            entity.Property(e => e.CondValCd).IsFixedLength();
            entity.Property(e => e.LogicalOperator).IsFixedLength();
            entity.Property(e => e.OpenBracket).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidationColumnName).IsFixedLength();

            entity.HasOne(d => d.CmprFieldCompXref).WithMany(p => p.Hl7CondDetailCmprFieldCompXref).HasConstraintName("fk1_hl7_cond_detail");

            entity.HasOne(d => d.CmprSegFieldXref).WithMany(p => p.Hl7CondDetailCmprSegFieldXref).HasConstraintName("fk2_hl7_cond_detail");

            entity.HasOne(d => d.CondFieldCompXref).WithMany(p => p.Hl7CondDetailCondFieldCompXref).HasConstraintName("fk3_hl7_cond_detail");

            entity.HasOne(d => d.CondSegFieldXref).WithMany(p => p.Hl7CondDetailCondSegFieldXref).HasConstraintName("fk4_hl7_cond_detail");

            entity.HasOne(d => d.Hl7CondHeader).WithMany(p => p.Hl7CondDetail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk5_hl7_cond_detail");
        });

        modelBuilder.Entity<Hl7CondHeader>(entity =>
        {
            entity.HasKey(e => new { e.FieldCompXrefId, e.Hl7CondHeaderId }).HasName("pkhl7_cond_header");

            entity.Property(e => e.FieldCompXrefId).IsFixedLength();
            entity.Property(e => e.Hl7CondHeaderId).IsFixedLength();
            entity.Property(e => e.CondType).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.FalseFieldCompXrefId).IsFixedLength();
            entity.Property(e => e.FalseMappedInd).IsFixedLength();
            entity.Property(e => e.FalseSegFieldXrefId).IsFixedLength();
            entity.Property(e => e.FalseValCd).IsFixedLength();
            entity.Property(e => e.GlobalInd).IsFixedLength();
            entity.Property(e => e.InbndInd).IsFixedLength();
            entity.Property(e => e.MsgEvntSegFieldXrefId).IsFixedLength();
            entity.Property(e => e.OutbndInd).IsFixedLength();
            entity.Property(e => e.PreCondInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TrueFieldCompXrefId).IsFixedLength();
            entity.Property(e => e.TrueMappedInd).IsFixedLength();
            entity.Property(e => e.TrueSegFieldXrefId).IsFixedLength();
            entity.Property(e => e.TrueValCd).IsFixedLength();
            entity.Property(e => e.ValidationInstId).IsFixedLength();
            entity.Property(e => e.ValidationRefId).IsFixedLength();

            entity.HasOne(d => d.FalseFieldCompXref).WithMany(p => p.Hl7CondHeaderFalseFieldCompXref).HasConstraintName("fk4_hl7_cond_header");

            entity.HasOne(d => d.FalseSegFieldXref).WithMany(p => p.Hl7CondHeaderFalseSegFieldXref).HasConstraintName("fk5_hl7_cond_header");

            entity.HasOne(d => d.MsgEvntSegFieldXref).WithMany(p => p.Hl7CondHeader)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_cond_header");

            entity.HasOne(d => d.TrueFieldCompXref).WithMany(p => p.Hl7CondHeaderTrueFieldCompXref).HasConstraintName("fk2_hl7_cond_header");

            entity.HasOne(d => d.TrueSegFieldXref).WithMany(p => p.Hl7CondHeaderTrueSegFieldXref).HasConstraintName("fk3_hl7_cond_header");
        });

        modelBuilder.Entity<Hl7CondHeaderAppMsg>(entity =>
        {
            entity.HasKey(e => new { e.Hl7CondHeaderId, e.AppMsgNo }).HasName("pkhl7_cond_header_app_msg");

            entity.Property(e => e.Hl7CondHeaderId).IsFixedLength();
            entity.Property(e => e.AppMsgNo).IsFixedLength();
            entity.Property(e => e.FieldCompXrefId).IsFixedLength();
            entity.Property(e => e.FieldCompXrefId1).IsFixedLength();
            entity.Property(e => e.FieldCompXrefId2).IsFixedLength();
            entity.Property(e => e.FieldCompXrefId3).IsFixedLength();
            entity.Property(e => e.FieldCompXrefId4).IsFixedLength();
            entity.Property(e => e.FieldCompXrefId5).IsFixedLength();
            entity.Property(e => e.MsgParameter1).IsFixedLength();
            entity.Property(e => e.MsgParameter2).IsFixedLength();
            entity.Property(e => e.MsgParameter3).IsFixedLength();
            entity.Property(e => e.MsgParameter4).IsFixedLength();
            entity.Property(e => e.MsgParameter5).IsFixedLength();
            entity.Property(e => e.SegFieldXrefId1).IsFixedLength();
            entity.Property(e => e.SegFieldXrefId2).IsFixedLength();
            entity.Property(e => e.SegFieldXrefId3).IsFixedLength();
            entity.Property(e => e.SegFieldXrefId4).IsFixedLength();
            entity.Property(e => e.SegFieldXrefId5).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValCd1).IsFixedLength();
            entity.Property(e => e.ValCd2).IsFixedLength();
            entity.Property(e => e.ValCd3).IsFixedLength();
            entity.Property(e => e.ValCd4).IsFixedLength();
            entity.Property(e => e.ValCd5).IsFixedLength();

            entity.HasOne(d => d.FieldCompXrefId1Navigation).WithMany(p => p.Hl7CondHeaderAppMsgFieldCompXrefId1Navigation).HasConstraintName("fk2_hl7_cond_header_app_msg");

            entity.HasOne(d => d.FieldCompXrefId2Navigation).WithMany(p => p.Hl7CondHeaderAppMsgFieldCompXrefId2Navigation).HasConstraintName("fk4_hl7_cond_header_app_msg");

            entity.HasOne(d => d.FieldCompXrefId3Navigation).WithMany(p => p.Hl7CondHeaderAppMsgFieldCompXrefId3Navigation).HasConstraintName("fk6_hl7_cond_header_app_msg");

            entity.HasOne(d => d.FieldCompXrefId4Navigation).WithMany(p => p.Hl7CondHeaderAppMsgFieldCompXrefId4Navigation).HasConstraintName("fk8_hl7_cond_header_app_msg");

            entity.HasOne(d => d.FieldCompXrefId5Navigation).WithMany(p => p.Hl7CondHeaderAppMsgFieldCompXrefId5Navigation).HasConstraintName("fk10_hl7_cond_header_app_msg");

            entity.HasOne(d => d.SegFieldXrefId1Navigation).WithMany(p => p.Hl7CondHeaderAppMsgSegFieldXrefId1Navigation).HasConstraintName("fk3_hl7_cond_header_app_msg");

            entity.HasOne(d => d.SegFieldXrefId2Navigation).WithMany(p => p.Hl7CondHeaderAppMsgSegFieldXrefId2Navigation).HasConstraintName("fk5_hl7_cond_header_app_msg");

            entity.HasOne(d => d.SegFieldXrefId3Navigation).WithMany(p => p.Hl7CondHeaderAppMsgSegFieldXrefId3Navigation).HasConstraintName("fk7_hl7_cond_header_app_msg");

            entity.HasOne(d => d.SegFieldXrefId4Navigation).WithMany(p => p.Hl7CondHeaderAppMsgSegFieldXrefId4Navigation).HasConstraintName("fk9_hl7_cond_header_app_msg");

            entity.HasOne(d => d.SegFieldXrefId5Navigation).WithMany(p => p.Hl7CondHeaderAppMsgSegFieldXrefId5Navigation).HasConstraintName("fk11_hl7_cond_header_app_msg");

            entity.HasOne(d => d.Hl7CondHeader).WithMany(p => p.Hl7CondHeaderAppMsg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_cond_header_app_msg");
        });

        modelBuilder.Entity<Hl7DataTyp>(entity =>
        {
            entity.HasKey(e => e.DataTyp).HasName("pkhl7_data_typ");

            entity.Property(e => e.DataTyp).IsFixedLength();
            entity.Property(e => e.DataTypDesc).IsFixedLength();
            entity.Property(e => e.DataTypName).IsFixedLength();
            entity.Property(e => e.DefTyp).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.MultiCompInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DefTypNavigation).WithMany(p => p.Hl7DataTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_data_typ");
        });

        modelBuilder.Entity<Hl7DefTyp>(entity =>
        {
            entity.HasKey(e => e.DefTyp).HasName("pkhl7_def_typ");

            entity.Property(e => e.DefTyp).IsFixedLength();
            entity.Property(e => e.DefTypDesc).IsFixedLength();
            entity.Property(e => e.DefTypName).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Hl7Encoding>(entity =>
        {
            entity.HasKey(e => e.CodePage).HasName("pkhl7_encoding");

            entity.Property(e => e.CodePage).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Hl7EvntTyp>(entity =>
        {
            entity.HasKey(e => e.EvntTypId).HasName("pkhl7_evnt_typ");

            entity.Property(e => e.EvntTypId).IsFixedLength();
            entity.Property(e => e.DefTyp).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.EvntTyp).IsFixedLength();
            entity.Property(e => e.EvntTypDesc).IsFixedLength();
            entity.Property(e => e.EvntTypName).IsFixedLength();
            entity.Property(e => e.FlipInd).IsFixedLength();
            entity.Property(e => e.InbndInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.OutbndInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VersNo).IsFixedLength();

            entity.HasOne(d => d.Hl7Vers).WithMany(p => p.Hl7EvntTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_evnt_typ");
        });

        modelBuilder.Entity<Hl7Field>(entity =>
        {
            entity.HasKey(e => e.FieldId).HasName("pkhl7_field");

            entity.Property(e => e.FieldId).IsFixedLength();
            entity.Property(e => e.AddInd).IsFixedLength();
            entity.Property(e => e.DefTyp).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.FieldDataTyp).IsFixedLength();
            entity.Property(e => e.FieldDesc).IsFixedLength();
            entity.Property(e => e.FieldName).IsFixedLength();
            entity.Property(e => e.Hl7MapInd).IsFixedLength();
            entity.Property(e => e.InbndPrcsCd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ItemNo).IsFixedLength();
            entity.Property(e => e.MapMthdCd).IsFixedLength();
            entity.Property(e => e.NullInd).IsFixedLength();
            entity.Property(e => e.OutbndPrcsCd).IsFixedLength();
            entity.Property(e => e.ProfReltnInd).IsFixedLength();
            entity.Property(e => e.PtPrcsCd).IsFixedLength();
            entity.Property(e => e.RuleCd).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.StkhPrcsCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VersNo).IsFixedLength();

            entity.HasOne(d => d.FieldDataTypNavigation).WithMany(p => p.Hl7Field)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_field");

            entity.HasOne(d => d.Hl7Vers).WithMany(p => p.Hl7Field)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_hl7_field");
        });

        modelBuilder.Entity<Hl7FieldCompXref>(entity =>
        {
            entity.HasKey(e => e.FieldCompXrefId).HasName("pkhl7_field_comp_xref");

            entity.Property(e => e.FieldCompXrefId).IsFixedLength();
            entity.Property(e => e.CompId).IsFixedLength();
            entity.Property(e => e.DataTyp).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.FieldCompName).IsFixedLength();
            entity.Property(e => e.FieldId).IsFixedLength();
            entity.Property(e => e.FieldSubCompName).IsFixedLength();
            entity.Property(e => e.InbndPrcsCd).IsFixedLength();
            entity.Property(e => e.OutbndPrcsCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Comp).WithMany(p => p.Hl7FieldCompXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_hl7_field_comp_xref");

            entity.HasOne(d => d.Field).WithMany(p => p.Hl7FieldCompXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_field_comp_xref");
        });

        modelBuilder.Entity<Hl7FinClsTyp>(entity =>
        {
            entity.HasKey(e => new { e.Hl7FinClsTypInstId, e.Hl7FinClsTyp1 }).HasName("pkhl7_fin_cls_typ");

            entity.Property(e => e.Hl7FinClsTypInstId).IsFixedLength();
            entity.Property(e => e.Hl7FinClsTypAbbr).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<Hl7HospServiceTyp>(entity =>
        {
            entity.HasKey(e => new { e.Hl7HospServiceTypInstId, e.Hl7HospServiceTyp1 }).HasName("pkhl7_hosp_service_typ");

            entity.Property(e => e.Hl7HospServiceTypInstId).IsFixedLength();
            entity.Property(e => e.Hl7HospServiceTypAbbr).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<Hl7In>(entity =>
        {
            entity.HasKey(e => e.Hl7InSeqNo).HasName("pkhl7_in");

            entity.Property(e => e.Hl7InSeqNo).ValueGeneratedNever();
            entity.Property(e => e.Hl7BatchId).IsFixedLength();
            entity.Property(e => e.Hl7MsgCntlId).IsFixedLength();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.MsgEvntTyp).IsFixedLength();
            entity.Property(e => e.MsgStageCd).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
            entity.Property(e => e.OvridePtAddlMatchInd).IsFixedLength();
            entity.Property(e => e.PatientSelectReleasedInd).IsFixedLength();
            entity.Property(e => e.ProcessInd).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ResolvedInd).IsFixedLength();
            entity.Property(e => e.SendingApp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpdatePtId).IsFixedLength();
            entity.Property(e => e.UpperDisplayPtFirstName).IsFixedLength();
            entity.Property(e => e.UpperDisplayPtLastName).IsFixedLength();
        });

        modelBuilder.Entity<Hl7InXml>(entity =>
        {
            entity.HasKey(e => e.Hl7InSeqNo).HasName("pkhl7_in_xml");

            entity.Property(e => e.Hl7InSeqNo).ValueGeneratedNever();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.ProcessInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Hl7Link>(entity =>
        {
            entity.HasKey(e => e.Hl7LinkId).HasName("pkhl7_link");

            entity.Property(e => e.Hl7LinkId).IsFixedLength();
            entity.Property(e => e.DestRecordDirection).IsFixedLength();
            entity.Property(e => e.LinkTyp).IsFixedLength();
            entity.Property(e => e.SrcRecordDirection).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Hl7MsgAppTypXref>(entity =>
        {
            entity.HasKey(e => e.MsgAppTypXrefId).HasName("pkhl7_msg_app_typ_xref");

            entity.Property(e => e.MsgAppTypXrefId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AppTyp).IsFixedLength();
            entity.Property(e => e.MsgTypId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.MsgTyp).WithMany(p => p.Hl7MsgAppTypXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_msg_app_typ_xref");
        });

        modelBuilder.Entity<Hl7MsgEvntSegFieldXref>(entity =>
        {
            entity.HasKey(e => e.MsgEvntSegFieldXrefId).HasName("pkhl7_msg_evnt_seg_field_xref");

            entity.Property(e => e.MsgEvntSegFieldXrefId).IsFixedLength();
            entity.Property(e => e.BusinessRuleInd).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.DocDesc).IsFixedLength();
            entity.Property(e => e.InbndPrcsCd).IsFixedLength();
            entity.Property(e => e.MsgEvntSegXrefId).IsFixedLength();
            entity.Property(e => e.OutbndPrcsCd).IsFixedLength();
            entity.Property(e => e.OvrideInd).IsFixedLength();
            entity.Property(e => e.SegFieldXrefId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidationInd).IsFixedLength();

            entity.HasOne(d => d.MsgEvntSegXref).WithMany(p => p.Hl7MsgEvntSegFieldXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1hl7_msg_evnt_seg_field_xref");

            entity.HasOne(d => d.SegFieldXref).WithMany(p => p.Hl7MsgEvntSegFieldXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2hl7_msg_evnt_seg_field_xref");
        });

        modelBuilder.Entity<Hl7MsgEvntSegXref>(entity =>
        {
            entity.HasKey(e => e.MsgEvntSegXrefId).HasName("pkhl7_msg_evnt_seg_xref");

            entity.Property(e => e.MsgEvntSegXrefId).IsFixedLength();
            entity.Property(e => e.DefaultInd).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.GrpChildInd).IsFixedLength();
            entity.Property(e => e.GrpInd).IsFixedLength();
            entity.Property(e => e.MsgEvntXrefId).IsFixedLength();
            entity.Property(e => e.MsgTypId).IsFixedLength();
            entity.Property(e => e.NteAssocInd).IsFixedLength();
            entity.Property(e => e.ParentMsgSegXrefId).IsFixedLength();
            entity.Property(e => e.RepeatableInd).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.SegTypId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.MsgEvntXref).WithMany(p => p.Hl7MsgEvntSegXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_msg_evnt_seg_xref");

            entity.HasOne(d => d.MsgTyp).WithMany(p => p.Hl7MsgEvntSegXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_hl7_msg_evnt_seg_xref");

            entity.HasOne(d => d.SegTyp).WithMany(p => p.Hl7MsgEvntSegXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_hl7_msg_evnt_seg_xref");
        });

        modelBuilder.Entity<Hl7MsgEvntXref>(entity =>
        {
            entity.HasKey(e => e.MsgEvntXrefId).HasName("pkhl7_msg_evnt_xref");

            entity.Property(e => e.MsgEvntXrefId).IsFixedLength();
            entity.Property(e => e.DefaultInd).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.EvntTypId).IsFixedLength();
            entity.Property(e => e.MsgTypId).IsFixedLength();
            entity.Property(e => e.SupportedInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.EvntTyp).WithMany(p => p.Hl7MsgEvntXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_hl7_msg_evnt_xref");

            entity.HasOne(d => d.MsgTyp).WithMany(p => p.Hl7MsgEvntXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_msg_evnt_xref");
        });

        modelBuilder.Entity<Hl7MsgTyp>(entity =>
        {
            entity.HasKey(e => e.MsgTypId).HasName("pkhl7_msg_typ");

            entity.Property(e => e.MsgTypId).IsFixedLength();
            entity.Property(e => e.DefTyp).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.InbndInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.MasterFileTyp).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
            entity.Property(e => e.MsgTypDesc).IsFixedLength();
            entity.Property(e => e.MsgTypName).IsFixedLength();
            entity.Property(e => e.MsgTypStatusCd).IsFixedLength();
            entity.Property(e => e.OrderTyp).IsFixedLength();
            entity.Property(e => e.OutbndInd).IsFixedLength();
            entity.Property(e => e.SignOutInstid).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VersNo).IsFixedLength();

            entity.HasOne(d => d.Hl7Vers).WithMany(p => p.Hl7MsgTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_msg_typ");
        });

        modelBuilder.Entity<Hl7MsgTypAuditHist>(entity =>
        {
            entity.HasKey(e => e.AuditHistId).HasName("pk_hl7_msg_typ_audit_hist");

            entity.Property(e => e.AuditHistId).IsFixedLength();
            entity.Property(e => e.AppSrNo).IsFixedLength();
            entity.Property(e => e.AppVersNo).IsFixedLength();
            entity.Property(e => e.AuthorName).IsFixedLength();
            entity.Property(e => e.MsgTypId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.MsgTyp).WithMany(p => p.Hl7MsgTypAuditHist)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_msg_typ_audit_hist");
        });

        modelBuilder.Entity<Hl7Out>(entity =>
        {
            entity.HasKey(e => e.Hl7OutSeqNo).HasName("pkhl7_out");

            entity.Property(e => e.Hl7OutSeqNo).ValueGeneratedNever();
            entity.Property(e => e.FormatTyp).IsFixedLength();
            entity.Property(e => e.Hl7BatchId).IsFixedLength();
            entity.Property(e => e.Hl7MsgCntlId).IsFixedLength();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfCommId).IsFixedLength();
            entity.Property(e => e.MsgEvntTyp).IsFixedLength();
            entity.Property(e => e.MsgStageCd).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
            entity.Property(e => e.PatientSelectReleasedInd).IsFixedLength();
            entity.Property(e => e.ProcessInd).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ResolvedInd).IsFixedLength();
            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpperDisplayPtFirstName).IsFixedLength();
            entity.Property(e => e.UpperDisplayPtLastName).IsFixedLength();
        });

        modelBuilder.Entity<Hl7OutXml>(entity =>
        {
            entity.HasKey(e => e.Hl7OutSeqNo).HasName("pkhl7_out_xml");

            entity.Property(e => e.Hl7OutSeqNo).ValueGeneratedNever();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.ProcessInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Hl7PtClsTyp>(entity =>
        {
            entity.HasKey(e => new { e.Hl7PtClsTypInstId, e.Hl7PtClsTyp1 }).HasName("pkhl7_pt_cls_typ");

            entity.Property(e => e.Hl7PtClsTypInstId).IsFixedLength();
            entity.Property(e => e.Hl7PtClsTypAbbr).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<Hl7PtStatusTyp>(entity =>
        {
            entity.HasKey(e => new { e.Hl7PtStatusTypInstId, e.Hl7PtStatusTyp1 }).HasName("pkhl7_pt_status_typ");

            entity.Property(e => e.Hl7PtStatusTypInstId).IsFixedLength();
            entity.Property(e => e.Hl7PtStatusTypAbbr).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<Hl7PtTyp>(entity =>
        {
            entity.HasKey(e => new { e.Hl7PtTypInstId, e.Hl7PtTyp1 }).HasName("pkhl7_pt_typ");

            entity.Property(e => e.Hl7PtTypInstId).IsFixedLength();
            entity.Property(e => e.Hl7PtTypAbbr).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<Hl7SegFieldXref>(entity =>
        {
            entity.HasKey(e => e.SegFieldXrefId).HasName("pkhl7_seg_field_xref");

            entity.Property(e => e.SegFieldXrefId).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.DocDesc).IsFixedLength();
            entity.Property(e => e.FieldId).IsFixedLength();
            entity.Property(e => e.InbndPrcsCd).IsFixedLength();
            entity.Property(e => e.OutbndPrcsCd).IsFixedLength();
            entity.Property(e => e.RepeatableInd).IsFixedLength();
            entity.Property(e => e.SegTypId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Field).WithMany(p => p.Hl7SegFieldXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_hl7_seg_field_xref");

            entity.HasOne(d => d.SegTyp).WithMany(p => p.Hl7SegFieldXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_seg_field_xref");
        });

        modelBuilder.Entity<Hl7SegTyp>(entity =>
        {
            entity.HasKey(e => e.SegTypId).HasName("pkhl7_seg_typ");

            entity.Property(e => e.SegTypId).IsFixedLength();
            entity.Property(e => e.DefTyp).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.GrpInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.SegTyp).IsFixedLength();
            entity.Property(e => e.SegTypDesc).IsFixedLength();
            entity.Property(e => e.SegTypName).IsFixedLength();
            entity.Property(e => e.SnapshotInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VersNo).IsFixedLength();

            entity.HasOne(d => d.Hl7Vers).WithMany(p => p.Hl7SegTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_seg_typ");
        });

        modelBuilder.Entity<Hl7Seq>(entity =>
        {
            entity.HasKey(e => new { e.Hl7SeqInstId, e.Hl7SeqTyp }).HasName("pkhl7_seq");

            entity.Property(e => e.Hl7SeqInstId).IsFixedLength();
            entity.Property(e => e.Hl7SeqTyp).IsFixedLength();
        });

        modelBuilder.Entity<Hl7Vers>(entity =>
        {
            entity.HasKey(e => new { e.DefTyp, e.VersNo }).HasName("pkhl7_vers");

            entity.Property(e => e.DefTyp).IsFixedLength();
            entity.Property(e => e.VersNo).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VersDesc).IsFixedLength();

            entity.HasOne(d => d.DefTypNavigation).WithMany(p => p.Hl7Vers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hl7_vers");
        });

        modelBuilder.Entity<Hospital>(entity =>
        {
            entity.HasKey(e => e.HospitalSer).HasName("XPKHospital");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Hospital");
                    tb.HasTrigger("tI_Hospital");
                    tb.HasTrigger("tU_Hospital");
                });

            entity.Property(e => e.HospitalSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.AddressSerNavigation).WithMany(p => p.Hospital)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKAddress_Hospital");
        });

        modelBuilder.Entity<HstGradeTyp>(entity =>
        {
            entity.HasKey(e => e.HstGradeTyp1).HasName("pkhst_grade_typ");

            entity.Property(e => e.HstGradeTyp1).ValueGeneratedNever();
            entity.Property(e => e.DiffDesc).IsFixedLength();
            entity.Property(e => e.HstGradeDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<HxHdr>(entity =>
        {
            entity.HasKey(e => e.HdrTyp).HasName("pkhx_hdr");

            entity.Property(e => e.HdrTyp).ValueGeneratedNever();
            entity.Property(e => e.HdrDesc).IsFixedLength();
            entity.Property(e => e.Sex).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<HxQuestion>(entity =>
        {
            entity.HasKey(e => new { e.HdrTyp, e.QuestionNo }).HasName("pkhx_question");

            entity.Property(e => e.Question).IsFixedLength();
            entity.Property(e => e.QuestionEnd).IsFixedLength();
            entity.Property(e => e.QuestionRadio).IsFixedLength();
            entity.Property(e => e.QuestionStart).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.HdrTypNavigation).WithMany(p => p.HxQuestion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_hx_question");
        });

        modelBuilder.Entity<HydraFluid>(entity =>
        {
            entity.HasKey(e => e.HydraFluidId).HasName("pkhydra_fluid");

            entity.Property(e => e.HydraFluidId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IcdDx>(entity =>
        {
            entity.HasKey(e => new { e.ClsSchemeId, e.IcdCd }).HasName("pkicd_dx");

            entity.ToTable("icd_dx", tb =>
                {
                    tb.HasTrigger("tI_icd_dx");
                    tb.HasTrigger("tU_icd_dx");
                });

            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.AgeCd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.Cat).IsFixedLength();
            entity.Property(e => e.ClinicalDesc).IsFixedLength();
            entity.Property(e => e.CustomCdInd).IsFixedLength();
            entity.Property(e => e.FullTitle).IsFixedLength();
            entity.Property(e => e.ListACd).IsFixedLength();
            entity.Property(e => e.MajorDxCat).IsFixedLength();
            entity.Property(e => e.MandatoryInd).IsFixedLength();
            entity.Property(e => e.MnfstnCd).IsFixedLength();
            entity.Property(e => e.ReltdMnfstnDesc).IsFixedLength();
            entity.Property(e => e.ReportableInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.Sex).IsFixedLength();
            entity.Property(e => e.ShortTitle).IsFixedLength();
            entity.Property(e => e.Subdivided).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IcdDxCulture>(entity =>
        {
            entity.HasKey(e => new { e.ClsSchemeId, e.IcdCd, e.CultureCd }).HasName("pkicd_dx_culture");

            entity.ToTable("icd_dx_culture", tb => tb.HasTrigger("tU_icd_dx_culture"));

            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ClinicalDesc).IsFixedLength();
            entity.Property(e => e.FullTitle).IsFixedLength();
            entity.Property(e => e.IncludeDetail).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.ShortTitle).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IcdGroup>(entity =>
        {
            entity.HasKey(e => e.IcdGroupId).HasName("pkicd_group");

            entity.Property(e => e.IcdGroupId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd)
                .HasDefaultValue("Y")
                .IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IcdProcedure>(entity =>
        {
            entity.HasKey(e => new { e.ClsSchemeId, e.IcdCd }).HasName("pkicd_procedure");

            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.AgeCd).IsFixedLength();
            entity.Property(e => e.Cat).IsFixedLength();
            entity.Property(e => e.FullTitle).IsFixedLength();
            entity.Property(e => e.ListBCd).IsFixedLength();
            entity.Property(e => e.MedicareCd).IsFixedLength();
            entity.Property(e => e.OperatingRoom).IsFixedLength();
            entity.Property(e => e.ProcedureCls).IsFixedLength();
            entity.Property(e => e.Sex).IsFixedLength();
            entity.Property(e => e.ShortTitle).IsFixedLength();
            entity.Property(e => e.Subdivided).IsFixedLength();
        });

        modelBuilder.Entity<IcdoMorphCd>(entity =>
        {
            entity.HasKey(e => new { e.ClsSchemeId, e.MorphCd, e.BehaviorCd, e.MorphCdSeq }).HasName("pkicdo_morph_cd");

            entity.ToTable("icdo_morph_cd", tb => tb.HasTrigger("tI_icdo_morph_cd"));

            entity.Property(e => e.MorphCd).IsFixedLength();
            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.MorphDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.BehaviorCdNavigation).WithMany(p => p.IcdoMorphCd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_icdo_morph_cd");

            entity.HasOne(d => d.IcdoMorphTypNavigation).WithMany(p => p.IcdoMorphCd).HasConstraintName("fk2_icdo_morph_cd");
        });

        modelBuilder.Entity<IcdoMorphCdCulture>(entity =>
        {
            entity.HasKey(e => new { e.ClsSchemeId, e.MorphCd, e.BehaviorCd, e.MorphCdSeq, e.CultureCd }).HasName("pkicdo_morph_cd_culture");

            entity.Property(e => e.MorphCd).IsFixedLength();
            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.MorphDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IcdoMorphSite>(entity =>
        {
            entity.HasKey(e => new { e.MorphCd, e.BehaviorCd, e.MorphCdSeq, e.SiteApplic }).HasName("pkicdo_morph_site");

            entity.Property(e => e.MorphCd).IsFixedLength();
            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.SiteApplic).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<IcdoMorphTyp>(entity =>
        {
            entity.HasKey(e => e.IcdoMorphTyp1).HasName("pkicdo_morph_typ");

            entity.Property(e => e.IcdoMorphTyp1).ValueGeneratedNever();
            entity.Property(e => e.IcdoMorphDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<IcdoMorphTypCulture>(entity =>
        {
            entity.ToView("icdo_morph_typ_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
        });

        modelBuilder.Entity<IcdoSiteCd>(entity =>
        {
            entity.HasKey(e => new { e.ClsSchemeId, e.IcdoSiteCd1, e.IcdoSiteSeq }).HasName("pkicdo_site_cd");

            entity.Property(e => e.IcdoSiteCd1).IsFixedLength();
            entity.Property(e => e.IcdoDesc).IsFixedLength();
            entity.Property(e => e.IcdoSiteTyp).IsFixedLength();
            entity.Property(e => e.SynInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.IcdoSiteTypNavigation).WithMany(p => p.IcdoSiteCd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_icdo_site_cd");
        });

        modelBuilder.Entity<IcdoSiteCdCulture>(entity =>
        {
            entity.HasKey(e => new { e.ClsSchemeId, e.IcdoSiteCd, e.IcdoSiteSeq, e.CultureCd }).HasName("pkicdo_site_cd_culture");

            entity.Property(e => e.IcdoSiteCd).IsFixedLength();
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.IcdoDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IcdoSiteTyp>(entity =>
        {
            entity.HasKey(e => e.IcdoSiteTyp1).HasName("pkicdo_site_typ");

            entity.Property(e => e.IcdoSiteTyp1).IsFixedLength();
            entity.Property(e => e.DiagFile).IsFixedLength();
            entity.Property(e => e.IcdoSiteDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<IdTypCd>(entity =>
        {
            entity.HasKey(e => e.IdTyp).HasName("pkid_typ_cd");

            entity.Property(e => e.IdTyp).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypDesc).IsFixedLength();
        });

        modelBuilder.Entity<IdealWt>(entity =>
        {
            entity.HasKey(e => e.CmHt).HasName("pkideal_wt");

            entity.Property(e => e.CmHt).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TypOfTest, e.CompName, e.ImageId }).HasName("pkimage");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.Image1).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ImageTypNavigation).WithMany(p => p.Image)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_image");

            entity.HasOne(d => d.Test).WithMany(p => p.Image)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_image");
        });

        modelBuilder.Entity<Image1>(entity =>
        {
            entity.HasKey(e => e.ImageSer).HasName("XPKImage");

            entity.ToTable("Image", tb =>
                {
                    tb.HasTrigger("tD_Image");
                    tb.HasTrigger("tI_Image");
                    tb.HasTrigger("tU_Image");
                    tb.HasTrigger("tU_Image_VaBusinessLogic");
                });

            entity.Property(e => e.ImageSer).ValueGeneratedNever();
            entity.Property(e => e.DisplayTransformation).IsFixedLength();
            
                
                
            entity.Property(e => e.Transformation).IsFixedLength();
            entity.Property(e => e.UserOrigin).IsFixedLength();
            entity.Property(e => e.VolumeTransformation).IsFixedLength();

            entity.HasOne(d => d.DefaultProcessingSerNavigation).WithMany(p => p.Image1DefaultProcessingSerNavigation).HasConstraintName("FKProcessing_Image");

            entity.HasOne(d => d.GeometricParentSerNavigation).WithMany(p => p.InverseGeometricParentSerNavigation).HasConstraintName("FKImage_Image");

            entity.HasOne(d => d.Image4DserNavigation).WithMany(p => p.Image1).HasConstraintName("FKImage4D_Image");

            entity.HasOne(d => d.OtherProcessingSerNavigation).WithMany(p => p.Image1OtherProcessingSerNavigation).HasConstraintName("FKProcessing_ImageOtherProcessingSer");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.Image1).HasConstraintName("FKPatient_Image");

            entity.HasOne(d => d.SeriesSerNavigation).WithMany(p => p.Image1)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSeries_Image");
        });

        modelBuilder.Entity<Image4D>(entity =>
        {
            entity.HasKey(e => e.Image4Dser).HasName("XPKImage4D");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Image4D");
                    tb.HasTrigger("tI_Image4D");
                    tb.HasTrigger("tU_Image4D");
                });

            entity.Property(e => e.Image4Dser).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.Image4D)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_Image4D");
        });

        modelBuilder.Entity<ImageMatchResult>(entity =>
        {
            entity.HasKey(e => new { e.ImageSer, e.MatchResultSer }).HasName("XPKImageMatchResult");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ImageMatchResult");
                    tb.HasTrigger("tU_ImageMatchResult");
                });

            
                
                

            entity.HasOne(d => d.ImageSerNavigation).WithMany(p => p.ImageMatchResult)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKImage_ImageMatchResult");

            entity.HasOne(d => d.MatchResultSerNavigation).WithMany(p => p.ImageMatchResult)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKMatchResult_ImageMatchResult");
        });

        modelBuilder.Entity<ImageRelatedInstance>(entity =>
        {
            entity.Property(e => e.ImageRelatedInstanceSer).ValueGeneratedNever();

            entity.HasOne(d => d.DicomcodeValueSerNavigation).WithMany(p => p.ImageRelatedInstance).HasConstraintName("FK_ImageRelatedInstance_DICOMCodeValue");

            entity.HasOne(d => d.SliceSerNavigation).WithMany(p => p.ImageRelatedInstance).HasConstraintName("FK_ImageRelatedInstance_Slice");

            entity.HasOne(d => d.SopclassSerNavigation).WithMany(p => p.ImageRelatedInstance).HasConstraintName("FK_ImageRelatedInstance_SOPClass");
        });

        modelBuilder.Entity<ImageSlice>(entity =>
        {
            entity.HasKey(e => new { e.ImageSer, e.SliceSer }).HasName("XPKImageSlice");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ImageSlice");
                    tb.HasTrigger("tU_ImageSlice");
                });

            
                
                

            entity.HasOne(d => d.ImageSerNavigation).WithMany(p => p.ImageSlice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKImage_ImageSlice");

            entity.HasOne(d => d.SliceSerNavigation).WithMany(p => p.ImageSlice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSlice_ImageSlice");
        });

        modelBuilder.Entity<ImageTyp>(entity =>
        {
            entity.HasKey(e => e.ImageTyp1).HasName("pkimage_typ");

            entity.Property(e => e.ImageTyp1).ValueGeneratedNever();
            entity.Property(e => e.ImageDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ImagingDevice>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKImagingDevice");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ImagingDevice");
                    tb.HasTrigger("tI_ImagingDevice");
                    tb.HasTrigger("tU_ImagingDevice");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.ImagingDevice).HasConstraintName("FKMachine_ImagingDevice");
        });

        modelBuilder.Entity<ImgDcmnt>(entity =>
        {
            entity.HasKey(e => e.ImgDcmntId).HasName("pkimg_dcmnt");

            entity.Property(e => e.ImgDcmntId).IsFixedLength();
            entity.Property(e => e.DelInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<ImgFileTyp>(entity =>
        {
            entity.HasKey(e => e.FileTyp).HasName("pkimg_file_typ");

            entity.Property(e => e.FileTyp).ValueGeneratedNever();
            entity.Property(e => e.FileDesc).IsFixedLength();
            entity.Property(e => e.FileExt).IsFixedLength();
            entity.Property(e => e.ShowUserInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ImgPage>(entity =>
        {
            entity.HasKey(e => e.ImgId).HasName("pkimg_page");

            entity.Property(e => e.ImgId).IsFixedLength();
            entity.Property(e => e.AnnotationInd).IsFixedLength();
            entity.Property(e => e.ImgDcmntId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.ImgDcmnt).WithMany(p => p.ImgPage).HasConstraintName("fk2_img_page");
        });

        modelBuilder.Entity<ImgPageBatch>(entity =>
        {
            entity.HasKey(e => e.ImgBatchId).HasName("pkimg_page_batch");

            entity.Property(e => e.ImgBatchId).IsFixedLength();
            entity.Property(e => e.FirstInBatch).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.MasterBatchId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ImgPaperCfg>(entity =>
        {
            entity.HasKey(e => e.PaperCfgId).HasName("pkimg_paper_cfg");

            entity.Property(e => e.PaperCfgId).IsFixedLength();
            entity.Property(e => e.DfltInd).IsFixedLength();
            entity.Property(e => e.DuplexInd).IsFixedLength();
            entity.Property(e => e.FormDesc).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PaperDflt).WithMany(p => p.ImgPaperCfg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_img_paper_cfg");

            entity.HasOne(d => d.ScanMode).WithMany(p => p.ImgPaperCfg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_img_paper_cfg");
        });

        modelBuilder.Entity<ImgPaperDflt>(entity =>
        {
            entity.HasKey(e => e.PaperDfltId).HasName("pkimg_paper_dflt");

            entity.Property(e => e.PaperDfltId).ValueGeneratedNever();
            entity.Property(e => e.DuplexInd).IsFixedLength();
            entity.Property(e => e.PaperDesc).IsFixedLength();
            entity.Property(e => e.ShowUserInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ImgScanMode>(entity =>
        {
            entity.HasKey(e => e.ScanModeId).HasName("pkimg_scan_mode");

            entity.Property(e => e.ScanModeId).ValueGeneratedNever();
            entity.Property(e => e.DfltInd).IsFixedLength();
            entity.Property(e => e.ScanDesc).IsFixedLength();
            entity.Property(e => e.ScanNote).IsFixedLength();
            entity.Property(e => e.ShowUserInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.FileTypNavigation).WithMany(p => p.ImgScanMode).HasConstraintName("fk1_img_scan_mode");
        });

        modelBuilder.Entity<ImmunAdmnRoute>(entity =>
        {
            entity.HasKey(e => e.ImmunAdmnRouteId).HasName("pkimmun_admn_route");

            entity.Property(e => e.ImmunAdmnRouteId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AdmnRoute).WithMany(p => p.ImmunAdmnRoute)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_immun_admn_route");
        });

        modelBuilder.Entity<ImmunRegStatus>(entity =>
        {
            entity.HasKey(e => e.ImmunRegStatusId).HasName("pkimmun_reg_status");

            entity.Property(e => e.ImmunRegStatusId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BaseTypNavigation).WithMany(p => p.ImmunRegStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_immun_reg_status");
        });

        modelBuilder.Entity<Immunity>(entity =>
        {
            entity.HasKey(e => e.ImmunityId).HasName("pkimmunity");

            entity.Property(e => e.ImmunityId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BaseTypNavigation).WithMany(p => p.Immunity)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_immunity");
        });

        modelBuilder.Entity<ImpHxMast>(entity =>
        {
            entity.HasKey(e => e.SeqNo).HasName("pkimp_hx_mast");

            entity.Property(e => e.SeqNo).ValueGeneratedNever();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.FileCreateBy).IsFixedLength();
            entity.Property(e => e.ImpFileName).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.ImpHxMast)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_imp_hx_mast");
        });

        modelBuilder.Entity<ImpHxPt>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.PtId }).HasName("pkimp_hx_pt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ImpTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.SeqNoNavigation).WithMany(p => p.ImpHxPt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_imp_hx_pt");
        });

        modelBuilder.Entity<ImpHxTp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.TpExpName, e.TpExpVersNo }).HasName("pkimp_hx_tp");

            entity.Property(e => e.TpExpName).IsFixedLength();
            entity.Property(e => e.TpExpVersNo).IsFixedLength();
            entity.Property(e => e.TpAmendedFlag).IsFixedLength();
            entity.Property(e => e.TpNewName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.SeqNoNavigation).WithMany(p => p.ImpHxTp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_imp_hx_tp");
        });

        modelBuilder.Entity<ImpexpApp>(entity =>
        {
            entity.HasKey(e => new { e.TableName, e.ImpexpAppCd }).HasName("pkimpexp_app");

            entity.Property(e => e.TableName).IsFixedLength();
            entity.Property(e => e.ImpexpAppCd).IsFixedLength();
            entity.Property(e => e.ImpexpAppCmt).IsFixedLength();
            entity.Property(e => e.SyncTbl).IsFixedLength();

            entity.HasOne(d => d.ImpexpAppCdNavigation).WithMany(p => p.ImpexpApp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_impexp_app");

            entity.HasOne(d => d.TableNameNavigation).WithMany(p => p.ImpexpApp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_impexp_app");
        });

        modelBuilder.Entity<ImpexpAppTyp>(entity =>
        {
            entity.HasKey(e => e.ImpexpAppCd).HasName("pkimpexp_app_typ");

            entity.Property(e => e.ImpexpAppCd).IsFixedLength();
            entity.Property(e => e.AppCdDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ImpexpColumns>(entity =>
        {
            entity.HasKey(e => new { e.TableName, e.ColumnName }).HasName("pkimpexp_columns");

            entity.Property(e => e.TableName).IsFixedLength();
            entity.Property(e => e.ColumnName).IsFixedLength();
            entity.Property(e => e.AllowColToTrf).IsFixedLength();
            entity.Property(e => e.ColumnAuditDescInd).IsFixedLength();
            entity.Property(e => e.ColumnAuditDspValue).IsFixedLength();
            entity.Property(e => e.ColumnAuditValueInd).IsFixedLength();
            entity.Property(e => e.ColumnPkeyInd).IsFixedLength();
            entity.Property(e => e.ColumnTyp).IsFixedLength();
            entity.Property(e => e.DataElmntName).IsFixedLength();
            entity.Property(e => e.IsEmptyChkFlag).IsFixedLength();
            entity.Property(e => e.MergeIdInd).IsFixedLength();
            entity.Property(e => e.NotNullInd).IsFixedLength();
            entity.Property(e => e.ScrubRule).IsFixedLength();
            entity.Property(e => e.SeqTyp).IsFixedLength();
            entity.Property(e => e.UowKeyInd).IsFixedLength();

            entity.HasOne(d => d.ScrubRuleNavigation).WithMany(p => p.ImpexpColumns).HasConstraintName("fk2_impexp_columns");

            entity.HasOne(d => d.TableNameNavigation).WithMany(p => p.ImpexpColumns)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_impexp_columns");
        });

        modelBuilder.Entity<ImpexpTables>(entity =>
        {
            entity.HasKey(e => e.TableName).HasName("pkimpexp_tables");

            entity.Property(e => e.TableName).IsFixedLength();
            entity.Property(e => e.AuditInd).IsFixedLength();
            entity.Property(e => e.AuditIndvRowsInd).IsFixedLength();
            entity.Property(e => e.AuditTable).IsFixedLength();
            entity.Property(e => e.DistinctInd).IsFixedLength();
            entity.Property(e => e.ImpexpAppCd).IsFixedLength();
            entity.Property(e => e.ImpexpCmt).IsFixedLength();
            entity.Property(e => e.TstampFlag).IsFixedLength();
            entity.Property(e => e.UpdateFlag).IsFixedLength();
        });

        modelBuilder.Entity<ImpexpThru>(entity =>
        {
            entity.HasKey(e => e.DumbKey).HasName("pkimpexp_thru");

            entity.Property(e => e.DumbKey).ValueGeneratedNever();
            entity.Property(e => e.ImpexpAppCd).IsFixedLength();
            entity.Property(e => e.TableName).IsFixedLength();
            entity.Property(e => e.ThruTable).IsFixedLength();

            entity.HasOne(d => d.ThruTableNavigation).WithMany(p => p.ImpexpThru)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_impexp_thru");

            entity.HasOne(d => d.ImpexpApp).WithMany(p => p.ImpexpThru)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_impexp_thru");
        });

        modelBuilder.Entity<ImplantableDevice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_implatable_device_id");

            entity.ToTable("implantable_device", tb => tb.HasTrigger("tU_implantable_device"));

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntry).IsFixedLength();
        });

        modelBuilder.Entity<ImplantableDeviceMh>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.RevisionNo }).HasName("pk_implatable_device_mh_id");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntry).IsFixedLength();
        });

        modelBuilder.Entity<ImportExportColumn>(entity =>
        {
            entity.HasKey(e => new { e.TableName, e.ColumnName }).HasName("XPKImportExportColumn");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ImportExportColumn");
                    tb.HasTrigger("tI_ImportExportColumn");
                    tb.HasTrigger("tU_ImportExportColumn");
                });

            entity.HasOne(d => d.TableNameNavigation).WithMany(p => p.ImportExportColumn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKImportExportTable_ImportExportColumn");
        });

        modelBuilder.Entity<ImportExportReference>(entity =>
        {
            entity.HasKey(e => new { e.ReferencedTable, e.ReferencedColumn, e.ReferencingTable, e.ReferencingColumn }).HasName("XPKImportExportReference");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ImportExportReference");
                    tb.HasTrigger("tU_ImportExportReference");
                });

            entity.HasOne(d => d.ImportExportColumn).WithMany(p => p.ImportExportReferenceImportExportColumn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKImportExportColumn_ImportExportReference");

            entity.HasOne(d => d.ImportExportColumnNavigation).WithMany(p => p.ImportExportReferenceImportExportColumnNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKImportExportColumn_ImportExportReference1");
        });

        modelBuilder.Entity<ImportExportTable>(entity =>
        {
            entity.HasKey(e => e.TableName).HasName("XPKImportExportTable");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ImportExportTable");
                    tb.HasTrigger("tU_ImportExportTable");
                });
        });

        modelBuilder.Entity<InSightiveConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("XPK_InSightiveConfiguration_ID");
        });

        modelBuilder.Entity<InSightiveSimplifiedActivitiesConfigurationTb>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("XPKInSightive_SimplifiedActivitesConfiguration_TB");

            entity.Property(e => e.IsNewStartActivity).HasDefaultValue(false);

            entity.HasOne(d => d.CtrActivityCategorySerNavigation).WithMany(p => p.InSightiveSimplifiedActivitiesConfigurationTb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKctrActivityCategorySer");

            entity.HasOne(d => d.CtrActivitySerNavigation).WithMany(p => p.InSightiveSimplifiedActivitiesConfigurationTb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKctrActivitySer");

            entity.HasOne(d => d.CtrStatusLookupTableSerNavigation).WithMany(p => p.InSightiveSimplifiedActivitiesConfigurationTb).HasConstraintName("FKctrStatusLookupTableSer");

            entity.HasOne(d => d.Group).WithMany(p => p.InSightiveSimplifiedActivitiesConfigurationTb).HasConstraintName("FKActivitesGroupID");
        });

        modelBuilder.Entity<InSightiveSimplifiedDxSiteConfigurationTb>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("XPKInSightive_SimplifiedDxSiteConfiguration_TB");

            entity.HasOne(d => d.Group).WithMany(p => p.InSightiveSimplifiedDxSiteConfigurationTb).HasConstraintName("FKDxSiteGroupID");
        });

        modelBuilder.Entity<InSightiveSimplifiedGroupConfigurationTb>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("XPKInSightive_SimplifiedGroupConfiguration_TB");
        });

        modelBuilder.Entity<InSightiveSimplifiedHospDeptConfigurationTb>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("XPKInSightive_SimplifiedHospDeptConfiguration_TB");

            entity.HasOne(d => d.CtrDepartmentSerNavigation).WithMany(p => p.InSightiveSimplifiedHospDeptConfigurationTb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKctrDepartmentSer");

            entity.HasOne(d => d.CtrHospitalSerNavigation).WithMany(p => p.InSightiveSimplifiedHospDeptConfigurationTb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKctrHospitalSer");

            entity.HasOne(d => d.Group).WithMany(p => p.InSightiveSimplifiedHospDeptConfigurationTb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKHospDeptGroupID");
        });

        modelBuilder.Entity<InSightiveSimplifiedPrimaryOncoConfigurationTb>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("XPKInSightive_SimplifiedPrimaryOncoConfiguration_TB");

            entity.HasOne(d => d.CtrResourceSerNavigation).WithMany(p => p.InSightiveSimplifiedPrimaryOncoConfigurationTb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKctrRecourseSer");

            entity.HasOne(d => d.Group).WithMany(p => p.InSightiveSimplifiedPrimaryOncoConfigurationTb).HasConstraintName("FKPrimaryOncoGroupID");
        });

        modelBuilder.Entity<InVivoDosimetry>(entity =>
        {
            entity.HasKey(e => e.InVivoDosimetrySer).HasName("XPKInVivoDosimetry");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_InVivoDosimetry");
                    tb.HasTrigger("tU_InVivoDosimetry");
                });

            entity.Property(e => e.InVivoDosimetrySer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.InVivoDosimetry)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_InVivoDosimetry");
        });

        modelBuilder.Entity<InfectionCtrlTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.InfectionCtrlTypId }).HasName("pkinfection_ctrl_typ");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.InfectionCtrlName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InfusionDetails>(entity =>
        {
            entity.HasKey(e => new { e.AgtName, e.DosageForm, e.DoseLevel, e.InfusionTyp }).HasName("pkinfusion_details");

            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InfusionTypNavigation).WithMany(p => p.InfusionDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_infusion_details");

            entity.HasOne(d => d.AgtDosage).WithMany(p => p.InfusionDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_infusion_details");
        });

        modelBuilder.Entity<InfusionTyp>(entity =>
        {
            entity.HasKey(e => e.InfusionTyp1).HasName("pkinfusion_typ");

            entity.Property(e => e.InfusionTyp1).ValueGeneratedNever();
            entity.Property(e => e.InfusionDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<IniParms>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.SectName, e.ParmName }).HasName("pkini_parms");

            entity.ToTable("ini_parms", tb => tb.HasTrigger("tU_ini_parms"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.DataTyp).IsFixedLength();
            entity.Property(e => e.EncInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InitialCtdetails>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<InitialCtdetails1>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<InsCo>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.InsCoId }).HasName("pkins_co");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.Address1).IsFixedLength();
            entity.Property(e => e.Address2).IsFixedLength();
            entity.Property(e => e.Address3).IsFixedLength();
            entity.Property(e => e.City).IsFixedLength();
            entity.Property(e => e.County).IsFixedLength();
            entity.Property(e => e.InsCoName).IsFixedLength();
            entity.Property(e => e.IntfInsCoId).IsFixedLength();
            entity.Property(e => e.PcZip).IsFixedLength();
            entity.Property(e => e.Phone).IsFixedLength();
            entity.Property(e => e.PrvState).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpperInsCoName)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PcZipFmt).WithMany(p => p.InsCoPcZipFmt).HasConstraintName("fk3_ins_co");

            entity.HasOne(d => d.PhoneFmt).WithMany(p => p.InsCoPhoneFmt).HasConstraintName("fk4_ins_co");

            entity.HasOne(d => d.PrvStateNavigation).WithMany(p => p.InsCo).HasConstraintName("fk1_ins_co");

            entity.HasOne(d => d.InsCoParent).WithMany(p => p.InsCo).HasConstraintName("fk2_ins_co");
        });

        modelBuilder.Entity<InsCoGrp>(entity =>
        {
            entity.HasKey(e => e.InsCoGrpId).HasName("pkins_co_grp");

            entity.Property(e => e.InsCoGrpId).ValueGeneratedNever();
            entity.Property(e => e.InsCoGrpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InsCoParent>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.InsCoParentId }).HasName("pkins_co_parent");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.Address1).IsFixedLength();
            entity.Property(e => e.Address2).IsFixedLength();
            entity.Property(e => e.Address3).IsFixedLength();
            entity.Property(e => e.City).IsFixedLength();
            entity.Property(e => e.County).IsFixedLength();
            entity.Property(e => e.IndepInd).IsFixedLength();
            entity.Property(e => e.InsCoParentDesc).IsFixedLength();
            entity.Property(e => e.PcZip).IsFixedLength();
            entity.Property(e => e.PhoneNo).IsFixedLength();
            entity.Property(e => e.PrvState).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.Country).WithMany(p => p.InsCoParent).HasConstraintName("fk1_ins_co_parent");

            entity.HasOne(d => d.PcZipFmt).WithMany(p => p.InsCoParentPcZipFmt).HasConstraintName("fk3_ins_co_parent");

            entity.HasOne(d => d.PhoneNoFmt).WithMany(p => p.InsCoParentPhoneNoFmt).HasConstraintName("fk4_ins_co_parent");

            entity.HasOne(d => d.PrvStateNavigation).WithMany(p => p.InsCoParent).HasConstraintName("fk2_ins_co_parent");
        });

        modelBuilder.Entity<InsPrecertAlertWindow>(entity =>
        {
            entity.HasKey(e => new { e.InsPrecertTyp, e.WindowName }).HasName("pkins_precert_alert_window");

            entity.Property(e => e.WindowName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InsPrecertTypNavigation).WithMany(p => p.InsPrecertAlertWindow)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_ins_precert_alert_window");
        });

        modelBuilder.Entity<InsPrecertBillCd>(entity =>
        {
            entity.HasKey(e => new { e.BillCd, e.BillCdTypId }).HasName("pkins_precert_bill_cd");

            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InsPrecertTypNavigation).WithMany(p => p.InsPrecertBillCd).HasConstraintName("fk2_ins_precert_bill_cd");

            entity.HasOne(d => d.BillCdNavigation).WithOne(p => p.InsPrecertBillCd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_ins_precert_bill_cd");
        });

        modelBuilder.Entity<InsPrecertTyp>(entity =>
        {
            entity.HasKey(e => e.InsPrecertTyp1).HasName("pkins_precert_typ");

            entity.Property(e => e.InsPrecertTyp1).ValueGeneratedNever();
            entity.Property(e => e.InsPrecertDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InsRqstn>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.InsCoParentId, e.FacInstId, e.FacId, e.FacRqstnNo }).HasName("pkins_rqstn");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.FacInstId).IsFixedLength();
            entity.Property(e => e.FacRqstnNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InsCoParent).WithMany(p => p.InsRqstn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_ins_rqstn");

            entity.HasOne(d => d.FacRqstn).WithMany(p => p.InsRqstn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_ins_rqstn");
        });

        modelBuilder.Entity<Inst>(entity =>
        {
            entity.HasKey(e => e.InstId).HasName("pkinst");

            entity.ToTable("inst", tb => tb.HasTrigger("tU_inst"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.AgtFormularyInstId).IsFixedLength();
            entity.Property(e => e.AuditDelInd).IsFixedLength();
            entity.Property(e => e.AuditInd).IsFixedLength();
            entity.Property(e => e.AuditReasonInd).IsFixedLength();
            entity.Property(e => e.AuthorPrintEnabled).IsFixedLength();
            entity.Property(e => e.AutoEmailEnabled).IsFixedLength();
            entity.Property(e => e.AutoFaxEnabled).IsFixedLength();
            entity.Property(e => e.BillParentInd).IsFixedLength();
            entity.Property(e => e.BillUnsolHl7Ind).IsFixedLength();
            entity.Property(e => e.BillVoidInd).IsFixedLength();
            entity.Property(e => e.DcmntHdrEnabled).IsFixedLength();
            entity.Property(e => e.DcmntQueEnabled).IsFixedLength();
            entity.Property(e => e.FileServerPassword).IsFixedLength();
            entity.Property(e => e.Hl7BillingActive).IsFixedLength();
            entity.Property(e => e.InptInd).IsFixedLength();
            entity.Property(e => e.InstAddress1).IsFixedLength();
            entity.Property(e => e.InstAddress2).IsFixedLength();
            entity.Property(e => e.InstAddress3).IsFixedLength();
            entity.Property(e => e.InstCity).IsFixedLength();
            entity.Property(e => e.InstCounty).IsFixedLength();
            entity.Property(e => e.InstDateFmt).IsFixedLength();
            entity.Property(e => e.InstEmailAnonymousInd)
                .HasDefaultValue("Y")
                .IsFixedLength();
            entity.Property(e => e.InstEmailSslInd)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.InstFax).IsFixedLength();
            entity.Property(e => e.InstName).IsFixedLength();
            entity.Property(e => e.InstPcZip).IsFixedLength();
            entity.Property(e => e.InstPrvState).IsFixedLength();
            entity.Property(e => e.InstRxDfmt).IsFixedLength();
            entity.Property(e => e.InstRxIFmt1).IsFixedLength();
            entity.Property(e => e.InstRxIfmt).IsFixedLength();
            entity.Property(e => e.InstTel).IsFixedLength();
            entity.Property(e => e.InstTelExt).IsFixedLength();
            entity.Property(e => e.InstTestDfmt).IsFixedLength();
            entity.Property(e => e.InstTestIFmt1).IsFixedLength();
            entity.Property(e => e.InstTestIfmt).IsFixedLength();
            entity.Property(e => e.ParentInstId).IsFixedLength();
            entity.Property(e => e.PhysicalSiteInd).IsFixedLength();
            entity.Property(e => e.ProgressNoteInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.SubjResultAsTxtInd).IsFixedLength();
            entity.Property(e => e.TrackInptHistInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TrfDomainName).IsFixedLength();
            entity.Property(e => e.TrfNwLoginId).IsFixedLength();
            entity.Property(e => e.TrfNwPassword).IsFixedLength();
            entity.Property(e => e.TrfRasPhnbkId).IsFixedLength();
            entity.Property(e => e.TrfRemoteConnect).IsFixedLength();
            entity.Property(e => e.TrfTrnsprtMthd).IsFixedLength();

            entity.HasOne(d => d.InstFaxFmt).WithMany(p => p.InstInstFaxFmt).HasConstraintName("fk5_inst");

            entity.HasOne(d => d.InstPcZipFmt).WithMany(p => p.InstInstPcZipFmt).HasConstraintName("fk3_inst");

            entity.HasOne(d => d.InstTelFmt).WithMany(p => p.InstInstTelFmt).HasConstraintName("fk4_inst");

            entity.HasOne(d => d.InstTypNavigation).WithMany(p => p.Inst).HasConstraintName("fk1_inst");

            entity.HasOne(d => d.PrvState).WithMany(p => p.Inst).HasConstraintName("fk2_inst");
        });

        modelBuilder.Entity<InstAgendaCatTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.CatNameTyp }).HasName("pkinst_agenda_cat_typ");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.InstCatDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.CatNameTypNavigation).WithMany(p => p.InstAgendaCatTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_agenda_cat_typ");

            entity.HasOne(d => d.InstTaskAreaTypNavigation).WithMany(p => p.InstAgendaCatTyp).HasConstraintName("fk2_inst_agenda_cat_typ");
        });

        modelBuilder.Entity<InstAgentRstr>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AgtName, e.AdmnRouteId }).HasName("pkinst_agent_rstr");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.WarningTyp).IsFixedLength();
        });

        modelBuilder.Entity<InstAgtCat>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AgtCatId }).HasName("pkinst_agt_cat");

            entity.ToTable("inst_agt_cat", tb => tb.HasTrigger("tU_inst_agt_cat"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AgtCatDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstAgtCatAgt>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AgtCatId, e.UpperAgtName }).HasName("pkinst_agt_cat_agt");

            entity.ToTable("inst_agt_cat_agt", tb => tb.HasTrigger("tU_inst_agt_cat_agt"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.UpperAgtName).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InstAgtCat).WithMany(p => p.InstAgtCatAgt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_agt_cat_agt");
        });

        modelBuilder.Entity<InstAuthEvent>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AuthEventTyp }).HasName("pkinst_auth_event");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AuthEventTypDesc).IsFixedLength();
            entity.Property(e => e.EsigPrefCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstBaseTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.BaseTypId }).HasName("pkinst_base_typ");

            entity.ToTable("inst_base_typ", tb => tb.HasTrigger("tU_inst_base_typ"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.BaseDesc).IsFixedLength();
            entity.Property(e => e.CatDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstBillCdInfo>(entity =>
        {
            entity.HasKey(e => new { e.BillSysInstId, e.BillSysId, e.InstId, e.BillCdTyp, e.BillCd }).HasName("pkinst_bill_cd_info");

            entity.Property(e => e.BillSysInstId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillSystem).WithMany(p => p.InstBillCdInfo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_bill_cd_info");
        });

        modelBuilder.Entity<InstBillEventTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.EventCdTypId }).HasName("pkinst_bill_event_typ");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstBsaFormula>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.EffDate }).HasName("pkinst_bsa_formula");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.CurrEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstCareBed>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.CareUnitId, e.BedId }).HasName("pkinst_care_bed");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.BedDesc).IsFixedLength();
            entity.Property(e => e.MedicareInd).IsFixedLength();
            entity.Property(e => e.RoomDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InstCareUnit).WithMany(p => p.InstCareBed)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_care_bed");
        });

        modelBuilder.Entity<InstCareUnit>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.CareUnitId }).HasName("pkinst_care_unit");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.CareUnit).IsFixedLength();
            entity.Property(e => e.CareUnitDesc).IsFixedLength();
            entity.Property(e => e.Printer).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Inst).WithMany(p => p.InstCareUnit)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_care_unit");
        });

        modelBuilder.Entity<InstDept>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.DeptId }).HasName("pkinst_dept");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.DeptName).IsFixedLength();
            entity.Property(e => e.DeptTel).IsFixedLength();
            entity.Property(e => e.DeptTelExt).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DeptTelFmt).WithMany(p => p.InstDept).HasConstraintName("fk2_inst_dept");

            entity.HasOne(d => d.Inst).WithMany(p => p.InstDept)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_dept");
        });

        modelBuilder.Entity<InstDoseMgmt>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.CompName }).HasName("pkinst_dose_mgmt");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Inst).WithMany(p => p.InstDoseMgmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_dose_mgmt");

            entity.HasOne(d => d.ValueUpdateTypNavigation).WithMany(p => p.InstDoseMgmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_inst_dose_mgmt");
        });

        modelBuilder.Entity<InstDxCode>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.ClsSchemeId, e.DxCd, e.ExamCompId }).HasName("pkinst_dx_code");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.DxCd).IsFixedLength();
            entity.Property(e => e.DxCdDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ClsScheme).WithMany(p => p.InstDxCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_inst_dx_code");

            entity.HasOne(d => d.ExamComp).WithMany(p => p.InstDxCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_inst_dx_code");

            entity.HasOne(d => d.Inst).WithMany(p => p.InstDxCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_dx_code");
        });

        modelBuilder.Entity<InstEventTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.EventTyp }).HasName("pkinst_event_typ");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.InstEventName).IsFixedLength();
            entity.Property(e => e.PrintableInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstExamSystem>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.SystemTypId }).HasName("pkinst_exam_system");

            entity.ToTable("inst_exam_system", tb => tb.HasTrigger("tU_inst_exam_system"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.ExamCd).IsFixedLength();
            entity.Property(e => e.InstExamSystemDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.SystemTyp).WithMany(p => p.InstExamSystem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_exam_system");
        });

        modelBuilder.Entity<InstExtDrugDb>(entity =>
        {
            entity.HasKey(e => e.InstId).HasName("pkinst_ext_drug_db");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ExtDrugDb).WithMany(p => p.InstExtDrugDb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_inst_ext_drug_db");

            entity.HasOne(d => d.Inst).WithOne(p => p.InstExtDrugDb)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_ext_drug_db");
        });

        modelBuilder.Entity<InstFcn>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.EffDate, e.FcnTyp }).HasName("pkinst_fcn");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Inst).WithMany(p => p.InstFcn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_fcn");
        });

        modelBuilder.Entity<InstFsFcnSort>(entity =>
        {
            entity.HasKey(e => new { e.FsFcnId, e.InstId }).HasName("pkinst_fs_fcn_sort");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.FsCatDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstHxComp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.HxCompId }).HasName("pkinst_hx_comp");

            entity.ToTable("inst_hx_comp", tb => tb.HasTrigger("tU_inst_hx_comp"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.DxCd).IsFixedLength();
            entity.Property(e => e.FamHxInd).IsFixedLength();
            entity.Property(e => e.HxCompDesc).IsFixedLength();
            entity.Property(e => e.MedCd).IsFixedLength();
            entity.Property(e => e.MedHxInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstHxCompCat>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.HxCompCatId }).HasName("pkinst_hx_comp_cat");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.HxCompCatDesc).IsFixedLength();
            entity.Property(e => e.MedCd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstHxCompCatComp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.HxCompCatId, e.HxCompId }).HasName("pkinst_hx_comp_cat_comp");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InstHxCompCat).WithMany(p => p.InstHxCompCatComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_inst_hx_comp_cat_comp");

            entity.HasOne(d => d.InstHxComp).WithMany(p => p.InstHxCompCatComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_hx_comp_cat_comp");
        });

        modelBuilder.Entity<InstHydraRoundMthd>(entity =>
        {
            entity.HasKey(e => e.InstId).HasName("pkinst_hydra_round_mthd");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstLab>(entity =>
        {
            entity.HasKey(e => e.InstId).HasName("pkinst_lab");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AscActiveInd).IsFixedLength();
            entity.Property(e => e.DfltPrmyFacParm)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.DfltShowTestsParm).IsFixedLength();
            entity.Property(e => e.DfltSortOrderParm).IsFixedLength();
            entity.Property(e => e.DfltVisitTypParm).IsFixedLength();
            entity.Property(e => e.DspPtKeyInstId).IsFixedLength();
            entity.Property(e => e.EndVal).IsFixedLength();
            entity.Property(e => e.NextSeq).IsFixedLength();
            entity.Property(e => e.PrcsModeInd).IsFixedLength();
            entity.Property(e => e.PrmyLabInstId).IsFixedLength();
            entity.Property(e => e.ResetIntrvl).IsFixedLength();
            entity.Property(e => e.StartVal).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Inst).WithOne(p => p.InstLab)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_lab");
        });

        modelBuilder.Entity<InstLoc>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.LocId }).HasName("pkinst_loc");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.IntfLocMapName).IsFixedLength();
            entity.Property(e => e.LocCloseTime).IsFixedLength();
            entity.Property(e => e.LocDesc).IsFixedLength();
            entity.Property(e => e.LocOpenTime).IsFixedLength();
            entity.Property(e => e.LocTel).IsFixedLength();
            entity.Property(e => e.LocTelExt).IsFixedLength();
            entity.Property(e => e.OutbndSchInd).IsFixedLength();
            entity.Property(e => e.OverbookCd).IsFixedLength();
            entity.Property(e => e.PrimaryInd).IsFixedLength();
            entity.Property(e => e.PrintableInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UnavlCmt).IsFixedLength();

            entity.HasOne(d => d.LocTelFmt).WithMany(p => p.InstLoc).HasConstraintName("fk1_inst_loc");
        });

        modelBuilder.Entity<InstLocBldg>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.BldgId }).HasName("pkinst_loc_bldg");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.BldgName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Inst).WithMany(p => p.InstLocBldg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_loc_bldg");
        });

        modelBuilder.Entity<InstLocFloor>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.BldgId, e.FloorId }).HasName("pkinst_loc_floor");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.FloorName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InstLocBldg).WithMany(p => p.InstLocFloor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_loc_floor");
        });

        modelBuilder.Entity<InstLocGroup>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.LocGroupId }).HasName("pkinst_loc_group");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.LocGroupName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstLocRoom>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.RoomId, e.BldgId, e.FloorId }).HasName("pkinst_loc_room");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.RoomName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InstLocFloor).WithMany(p => p.InstLocRoom)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_loc_room");
        });

        modelBuilder.Entity<InstNoteGroup>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.InstNoteGroupId }).HasName("pkinst_note_group");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.FavoriteInd).IsFixedLength();
            entity.Property(e => e.InstNoteGroupName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstNoteGroupTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.InstNoteGroupId, e.NoteTyp }).HasName("pkinst_note_group_typ");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<InstNoteTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.NoteTyp }).HasName("pkinst_note_typ");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.FavoriteInd).IsFixedLength();
            entity.Property(e => e.FsDisplayInd).IsFixedLength();
            entity.Property(e => e.PrintHeaderInd).IsFixedLength();
            entity.Property(e => e.PrintMarginInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.NoteTypNavigation).WithMany(p => p.InstNoteTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_note_typ");
        });

        modelBuilder.Entity<InstOperation>(entity =>
        {
            entity.HasKey(e => e.InstId).HasName("pkinst_operation");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.InstName).IsFixedLength();
            entity.Property(e => e.ParentInd).IsFixedLength();
            entity.Property(e => e.SpecialtyCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstPlcyTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.PlcyTypId }).HasName("pkinst_plcy_typ");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PlcyTyp).WithMany(p => p.InstPlcyTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_plcy_typ");
        });

        modelBuilder.Entity<InstPo>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.InstPoId }).HasName("pkinst_po");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.FavPoInd).IsFixedLength();
            entity.Property(e => e.InstPoArraInd).IsFixedLength();
            entity.Property(e => e.InstPoDetailInd).IsFixedLength();
            entity.Property(e => e.PoCat).IsFixedLength();
            entity.Property(e => e.PoDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstPoDetail>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.InstPoDetailId, e.InstPoId }).HasName("pkinst_po_detail");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.FavPoDetailInd).IsFixedLength();
            entity.Property(e => e.PoDetailDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InstPo).WithMany(p => p.InstPoDetail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_po_detail");
        });

        modelBuilder.Entity<InstPoSheet>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.InstPoSheetId, e.InstPoId }).HasName("pkinst_po_sheet");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.InstPoSheetDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InstPo).WithMany(p => p.InstPoSheet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_po_sheet");
        });

        modelBuilder.Entity<InstProvider>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.UserInstId, e.Userid }).HasName("pkinst_provider");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.AgtFormularyGroupInstId).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UnavlCmt).IsFixedLength();

            entity.HasOne(d => d.AgtFormularyGroup).WithMany(p => p.InstProvider).HasConstraintName("fk1_inst_provider");
        });

        modelBuilder.Entity<InstPtKeyCd>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.PtKeyCd }).HasName("pkinst_pt_key_cd");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.DisplayOnlyInd).IsFixedLength();
            entity.Property(e => e.EndVal).IsFixedLength();
            entity.Property(e => e.FormatMask).IsFixedLength();
            entity.Property(e => e.HeaderInd).IsFixedLength();
            entity.Property(e => e.InstPtKeyDesc).IsFixedLength();
            entity.Property(e => e.IntfIdTag).IsFixedLength();
            entity.Property(e => e.IntfUseInd).IsFixedLength();
            entity.Property(e => e.MrPtAccessExternalInd).IsFixedLength();
            entity.Property(e => e.NextSeq).IsFixedLength();
            entity.Property(e => e.OptxPrimaryInd).IsFixedLength();
            entity.Property(e => e.PtKeyUniqueInd).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.ScanInd).IsFixedLength();
            entity.Property(e => e.StartVal).IsFixedLength();
            entity.Property(e => e.SysGnrtInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UniqueHistInd).IsFixedLength();
            entity.Property(e => e.VisibleInd).IsFixedLength();
            entity.Property(e => e.VptmgrId1Ind).IsFixedLength();
            entity.Property(e => e.VptmgrId2Ind).IsFixedLength();
            entity.Property(e => e.VptmgrInd).IsFixedLength();

            entity.HasOne(d => d.PtKeyCdNavigation).WithMany(p => p.InstPtKeyCd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_pt_key_cd");
        });

        modelBuilder.Entity<InstRouteRstr>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AdmnRouteId }).HasName("pkinst_route_rstr");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstRxReport>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.RxReportId }).HasName("pkinst_rx_report");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.RxTypNavigation).WithMany(p => p.InstRxReport)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_rx_report");
        });

        modelBuilder.Entity<InstSchEventTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.InstSchEventTyp1 }).HasName("pkinst_sch_event_typ");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.InstSchEventDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.EventTypNavigation).WithMany(p => p.InstSchEventTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_sch_event_typ");
        });

        modelBuilder.Entity<InstScheme>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.EffDate, e.SchemeTyp }).HasName("pkinst_scheme");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Inst).WithMany(p => p.InstScheme)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_scheme");

            entity.HasOne(d => d.SchemeTypNavigation).WithMany(p => p.InstScheme)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_inst_scheme");
        });

        modelBuilder.Entity<InstSeq>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.SeqTyp }).HasName("pkinst_seq");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.SeqTyp).IsFixedLength();
            entity.Property(e => e.Filler1).IsFixedLength();
            entity.Property(e => e.Filler2).IsFixedLength();
            entity.Property(e => e.Filler3).IsFixedLength();
            entity.Property(e => e.Filler4).IsFixedLength();
            entity.Property(e => e.Filler5).IsFixedLength();
        });

        modelBuilder.Entity<InstShift>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.ShiftId }).HasName("pkinst_shift");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ShiftCd).IsFixedLength();
            entity.Property(e => e.ShiftDesc).IsFixedLength();
            entity.Property(e => e.ShiftEnd).IsFixedLength();
            entity.Property(e => e.ShiftStart).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Inst).WithMany(p => p.InstShift)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_shift");
        });

        modelBuilder.Entity<InstStkhErx>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.StkhId }).HasName("pkinst_stkh_erx");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.EpcsStatusCd).IsFixedLength();
            entity.Property(e => e.ErrCd).IsFixedLength();
            entity.Property(e => e.ErxStatusCd).IsFixedLength();
            entity.Property(e => e.ServiceLvl).IsFixedLength();
            entity.Property(e => e.ServiceLvlCode).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstTaskAreaTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TaskAreaTyp }).HasName("pkinst_task_area_typ");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.InstTaskAreaDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TaskAreaTypNavigation).WithMany(p => p.InstTaskAreaTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_task_area_typ");
        });

        modelBuilder.Entity<InstTestComp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TypOfTest, e.CompName }).HasName("pkinst_test_comp");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.FavoriteInd).IsFixedLength();
            entity.Property(e => e.FsActiveInd).IsFixedLength();
            entity.Property(e => e.InstCompAbbr).IsFixedLength();
            entity.Property(e => e.InstCompName).IsFixedLength();
            entity.Property(e => e.InstTypOfTest).IsFixedLength();
            entity.Property(e => e.RqstnInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TestComp).WithMany(p => p.InstTestComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_test_comp");
        });

        modelBuilder.Entity<InstTestCompCalibration>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TypOfTest, e.CompName }).HasName("pkinst_test_comp_calibration");

            entity.ToTable("inst_test_comp_calibration", tb => tb.HasTrigger("tU_inst_test_comp_calibration"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.CustomInd).IsFixedLength();
            entity.Property(e => e.FavoriteInd).IsFixedLength();
            entity.Property(e => e.InstCompName).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstTestCompGroup>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.InstTestCompGroupId }).HasName("pkinst_test_comp_group");

            entity.ToTable("inst_test_comp_group", tb => tb.HasTrigger("tU_inst_test_comp_group"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.FavoriteInd).IsFixedLength();
            entity.Property(e => e.InstTestGroupName).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstTestGroup>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TypOfTest, e.TestGroupName }).HasName("pkinst_test_group");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.TestGroupName).IsFixedLength();
            entity.Property(e => e.InstGroupName).IsFixedLength();
            entity.Property(e => e.RqstnInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TestGroup).WithMany(p => p.InstTestGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_inst_test_group");
        });

        modelBuilder.Entity<InstTpDetail>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TpName, e.TpDetailTyp }).HasName("pkinst_tp_detail");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<InstTpKeyCd>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TpKeyCd }).HasName("pkinst_tp_key_cd");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.EndVal).IsFixedLength();
            entity.Property(e => e.FormatMask).IsFixedLength();
            entity.Property(e => e.HeaderInd).IsFixedLength();
            entity.Property(e => e.InstTpKeyDesc).IsFixedLength();
            entity.Property(e => e.IntfIdTag).IsFixedLength();
            entity.Property(e => e.IntfUseInd).IsFixedLength();
            entity.Property(e => e.NextSeq).IsFixedLength();
            entity.Property(e => e.OptxPrimaryInd).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.StartVal).IsFixedLength();
            entity.Property(e => e.SysGnrtInd).IsFixedLength();
            entity.Property(e => e.TpKeyFormat).IsFixedLength();
            entity.Property(e => e.TpKeyUniqueInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UniqueHistInd).IsFixedLength();
            entity.Property(e => e.VisibleInd).IsFixedLength();
        });

        modelBuilder.Entity<InstTrComp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.InstTrCompId }).HasName("pkinst_tr_comp");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PtEnterInd).IsFixedLength();
            entity.Property(e => e.TrCompName).IsFixedLength();
            entity.Property(e => e.TrSubCompName).IsFixedLength();
            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstTumGrp>(entity =>
        {
            entity.HasKey(e => e.TumGrpId).HasName("pkinst_tum_grp");

            entity.Property(e => e.TumGrpId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TumGrpDesc).IsFixedLength();
        });

        modelBuilder.Entity<InstTxDecRsn>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TxDecRsnId }).HasName("pkinst_tx_dec_rsn");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.DecRsnDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstTyp>(entity =>
        {
            entity.HasKey(e => e.InstTyp1).HasName("pkinst_typ");

            entity.Property(e => e.InstTyp1).ValueGeneratedNever();
            entity.Property(e => e.InstDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<InstTypOfTest>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.InstTypOfTest1 }).HasName("pkinst_typ_of_test");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.InstTypOfTest1).IsFixedLength();
            entity.Property(e => e.FsDisplayInd).IsFixedLength();
            entity.Property(e => e.SumDisplayInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<InstVisitReasonTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.VisitReasonId }).HasName("pkinst_visit_reason_typ");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.MappingCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
            entity.Property(e => e.VisitReasonDesc).IsFixedLength();
        });

        modelBuilder.Entity<InstVisitTaskTemplate>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.DisciplineTyp, e.VisitReasonId, e.CatNameTyp }).HasName("pkinst_visit_task_template");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<Instr>(entity =>
        {
            entity.HasKey(e => new { e.AgtName, e.DosageForm, e.DoseLevel, e.InstrTyp }).HasName("pkinstr");

            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InstrTypNavigation).WithMany(p => p.Instr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_instr");

            entity.HasOne(d => d.AgtDosage).WithMany(p => p.Instr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_instr");
        });

        modelBuilder.Entity<InstrTyp>(entity =>
        {
            entity.HasKey(e => e.InstrTyp1).HasName("pkinstr_typ");

            entity.Property(e => e.InstrTyp1).ValueGeneratedNever();
            entity.Property(e => e.InstrDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfAppParm>(entity =>
        {
            entity.HasKey(e => e.IntfAppParmId).HasName("pkintf_app_parm");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.AdmnInstId).IsFixedLength();
            entity.Property(e => e.AllowNameChangeInd).IsFixedLength();
            entity.Property(e => e.ApprForBillingFlag).IsFixedLength();
            entity.Property(e => e.AssignMsgsInd).IsFixedLength();
            entity.Property(e => e.CreateBillVisitEventInd).IsFixedLength();
            entity.Property(e => e.CreatePtCmtInd).IsFixedLength();
            entity.Property(e => e.CreateTrgrInd).IsFixedLength();
            entity.Property(e => e.CustIntfInd).IsFixedLength();
            entity.Property(e => e.CustNameId).IsFixedLength();
            entity.Property(e => e.DefTyp).IsFixedLength();
            entity.Property(e => e.DfltInstId).IsFixedLength();
            entity.Property(e => e.DiagnosisInternalInd).IsFixedLength();
            entity.Property(e => e.DiagnosisMode).IsFixedLength();
            entity.Property(e => e.DirectionInd).IsFixedLength();
            entity.Property(e => e.ErrIn1Ind).IsFixedLength();
            entity.Property(e => e.GenFormatPonInd).IsFixedLength();
            entity.Property(e => e.GenOpenChartVisitInd).IsFixedLength();
            entity.Property(e => e.GrantAllInstAccessInd).IsFixedLength();
            entity.Property(e => e.HitechFilterInd)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.Hl7BatchBhsInd).IsFixedLength();
            entity.Property(e => e.Hl7BatchFhsInd).IsFixedLength();
            entity.Property(e => e.Hl7BatchInd).IsFixedLength();
            entity.Property(e => e.Hl7Encoding).HasDefaultValue(1200);
            entity.Property(e => e.ImpComplInd).IsFixedLength();
            entity.Property(e => e.InsdIdNoMatchInd).IsFixedLength();
            entity.Property(e => e.InstIdMthd).IsFixedLength();
            entity.Property(e => e.IntfAppParmIdNoTrgr).IsFixedLength();
            entity.Property(e => e.IntfCommId).IsFixedLength();
            entity.Property(e => e.IntfEngineId).IsFixedLength();
            entity.Property(e => e.LinkedIntfAppParmId).IsFixedLength();
            entity.Property(e => e.MfnProcessCd).IsFixedLength();
            entity.Property(e => e.MsgCompSeparator).IsFixedLength();
            entity.Property(e => e.MsgEscapeCharacter).IsFixedLength();
            entity.Property(e => e.MsgFieldSeparator).IsFixedLength();
            entity.Property(e => e.MsgRepetitionSeparator).IsFixedLength();
            entity.Property(e => e.MsgSubcompSeparator).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
            entity.Property(e => e.MsgTypDesc).IsFixedLength();
            entity.Property(e => e.MsgTypId).IsFixedLength();
            entity.Property(e => e.MsgTypName).IsFixedLength();
            entity.Property(e => e.OrderTyp).IsFixedLength();
            entity.Property(e => e.OutAcceptAck).IsFixedLength();
            entity.Property(e => e.OutAppAck).IsFixedLength();
            entity.Property(e => e.OvridePrcs).IsFixedLength();
            entity.Property(e => e.OwnerInstId).IsFixedLength();
            entity.Property(e => e.PatientSelectInd).IsFixedLength();
            entity.Property(e => e.PonEndVal).IsFixedLength();
            entity.Property(e => e.PonNextSeq).IsFixedLength();
            entity.Property(e => e.PonPerTestInd).IsFixedLength();
            entity.Property(e => e.PonStartVal).IsFixedLength();
            entity.Property(e => e.PopulateInstCareBedInd).IsFixedLength();
            entity.Property(e => e.PrcsAttempt).HasDefaultValue(3);
            entity.Property(e => e.PrcsCcsTrgrsInd)
                .HasDefaultValue("Y")
                .IsFixedLength();
            entity.Property(e => e.PrcsStatInd).IsFixedLength();
            entity.Property(e => e.PrvStateAbrvInd).IsFixedLength();
            entity.Property(e => e.PtAddlMatchCd).IsFixedLength();
            entity.Property(e => e.PtAddlMatchIgnoreBlankInd).IsFixedLength();
            entity.Property(e => e.PtAddlMatchIgnoreChar).IsFixedLength();
            entity.Property(e => e.RadOrderNo).IsFixedLength();
            entity.Property(e => e.ReceivingApp).IsFixedLength();
            entity.Property(e => e.ReceivingFac).IsFixedLength();
            entity.Property(e => e.SchInd).IsFixedLength();
            entity.Property(e => e.SchPrcsTyp).IsFixedLength();
            entity.Property(e => e.SchRes).IsFixedLength();
            entity.Property(e => e.SendApprOnlyInd).IsFixedLength();
            entity.Property(e => e.SendEmailWithPhoneInd).IsFixedLength();
            entity.Property(e => e.SendIntfCreatedInd).IsFixedLength();
            entity.Property(e => e.SendOrderDaysInd).IsFixedLength();
            entity.Property(e => e.SendPhysOnlyInd).IsFixedLength();
            entity.Property(e => e.SendRtfInd).IsFixedLength();
            entity.Property(e => e.SendingApp).IsFixedLength();
            entity.Property(e => e.SendingFac).IsFixedLength();
            entity.Property(e => e.ShowMergeCmtInd).IsFixedLength();
            entity.Property(e => e.StageMsgInd).IsFixedLength();
            entity.Property(e => e.SuppressTrgrInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TransltnInd).IsFixedLength();
            entity.Property(e => e.UnfmtAddressInd).IsFixedLength();
            entity.Property(e => e.UpdateAccessInd).IsFixedLength();
            entity.Property(e => e.VarisAutoAddInd).IsFixedLength();
            entity.Property(e => e.VarisAutoUpdateInd).IsFixedLength();
            entity.Property(e => e.VarisIn1MatchTyp).IsFixedLength();
            entity.Property(e => e.VarisInd).IsFixedLength();
            entity.Property(e => e.VarisNk1MatchTyp).IsFixedLength();
            entity.Property(e => e.VersNo).IsFixedLength();
            entity.Property(e => e.Wordcap).IsFixedLength();
        });

        modelBuilder.Entity<IntfAppParmComp>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfAppParmCompId }).HasName("pkintf_app_parm_comp");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmCompId).IsFixedLength();
            entity.Property(e => e.AInstId).IsFixedLength();
            entity.Property(e => e.ARefId).IsFixedLength();
            entity.Property(e => e.BInstId).IsFixedLength();
            entity.Property(e => e.BRefId).IsFixedLength();
            entity.Property(e => e.CaseInd).IsFixedLength();
            entity.Property(e => e.CompDataTyp).IsFixedLength();
            entity.Property(e => e.CompDesc).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.CustomInd).IsFixedLength();
            entity.Property(e => e.DataFormat).IsFixedLength();
            entity.Property(e => e.DataTyp).IsFixedLength();
            entity.Property(e => e.DefTyp).IsFixedLength();
            entity.Property(e => e.FieldCompXrefId).IsFixedLength();
            entity.Property(e => e.InbndPrcsCd).IsFixedLength();
            entity.Property(e => e.IntfAppParmCondHeaderId).IsFixedLength();
            entity.Property(e => e.IntfAppParmFieldId).IsFixedLength();
            entity.Property(e => e.MapActiveInd).IsFixedLength();
            entity.Property(e => e.MapDfltVal).IsFixedLength();
            entity.Property(e => e.OutbndPrcsCd).IsFixedLength();
            entity.Property(e => e.OvrideInd).IsFixedLength();
            entity.Property(e => e.PrcsCd).IsFixedLength();
            entity.Property(e => e.PrepostInd).IsFixedLength();
            entity.Property(e => e.SubCompDataTyp).IsFixedLength();
            entity.Property(e => e.SubCompDesc).IsFixedLength();
            entity.Property(e => e.SubCompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfAppParm).WithMany(p => p.IntfAppParmComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_app_parm_comp");

            entity.HasOne(d => d.IntfAppParmField).WithMany(p => p.IntfAppParmComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_intf_app_parm_comp");
        });

        modelBuilder.Entity<IntfAppParmCond>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfAppParmCondHeaderId }).HasName("pkintf_app_parm_cond");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmCondHeaderId).IsFixedLength();
            entity.Property(e => e.CondInd).IsFixedLength();
            entity.Property(e => e.CondPrcsCd).IsFixedLength();
            entity.Property(e => e.DocDesc).IsFixedLength();
            entity.Property(e => e.FilterInd).IsFixedLength();
            entity.Property(e => e.GlobalInd).IsFixedLength();
            entity.Property(e => e.PrcsInd).IsFixedLength();
            entity.Property(e => e.PreCondInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TransltnInd).IsFixedLength();
        });

        modelBuilder.Entity<IntfAppParmCondDetail>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfAppParmCondHeaderId, e.CondOrder }).HasName("pkintf_app_parm_cond_detail");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmCondHeaderId).IsFixedLength();
            entity.Property(e => e.CloseBracket).IsFixedLength();
            entity.Property(e => e.CmprFieldCompXrefId).IsFixedLength();
            entity.Property(e => e.CmprMappedInd).IsFixedLength();
            entity.Property(e => e.CmprOperator).IsFixedLength();
            entity.Property(e => e.CmprSegFieldXrefId).IsFixedLength();
            entity.Property(e => e.CmprValCd).IsFixedLength();
            entity.Property(e => e.CondFieldCompXrefId).IsFixedLength();
            entity.Property(e => e.CondMappedInd).IsFixedLength();
            entity.Property(e => e.CondSegFieldXrefId).IsFixedLength();
            entity.Property(e => e.CondValCd).IsFixedLength();
            entity.Property(e => e.LogicalOperator).IsFixedLength();
            entity.Property(e => e.OpenBracket).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.CmprFieldCompXref).WithMany(p => p.IntfAppParmCondDetailCmprFieldCompXref).HasConstraintName("fk2_intf_app_parm_cond_detail");

            entity.HasOne(d => d.CmprSegFieldXref).WithMany(p => p.IntfAppParmCondDetailCmprSegFieldXref).HasConstraintName("fk4_intf_app_parm_cond_detail");

            entity.HasOne(d => d.CondFieldCompXref).WithMany(p => p.IntfAppParmCondDetailCondFieldCompXref).HasConstraintName("fk3_intf_app_parm_cond_detail");

            entity.HasOne(d => d.CondSegFieldXref).WithMany(p => p.IntfAppParmCondDetailCondSegFieldXref).HasConstraintName("fk5_intf_app_parm_cond_detail");

            entity.HasOne(d => d.IntfAppParmCondHeader).WithMany(p => p.IntfAppParmCondDetail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_app_parm_cond_detail");
        });

        modelBuilder.Entity<IntfAppParmCondExpr>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfAppParmCondHeaderId, e.ExpressionTyp }).HasName("pkintf_app_parm_cond_expr");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmCondHeaderId).IsFixedLength();
            entity.Property(e => e.ExpressionTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfAppParmCond).WithMany(p => p.IntfAppParmCondExpr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_app_parm_cond_expr");
        });

        modelBuilder.Entity<IntfAppParmCondHeader>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfAppParmCondHeaderId }).HasName("pkintf_app_parm_cond_header");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmCondHeaderId).IsFixedLength();
            entity.Property(e => e.CondInd).IsFixedLength();
            entity.Property(e => e.DocDesc).IsFixedLength();
            entity.Property(e => e.FalseFieldCompXrefId).IsFixedLength();
            entity.Property(e => e.FalseMappedInd).IsFixedLength();
            entity.Property(e => e.FalseSegFieldXrefId).IsFixedLength();
            entity.Property(e => e.FalseValCd).IsFixedLength();
            entity.Property(e => e.GlobalInd).IsFixedLength();
            entity.Property(e => e.Hl7CondHeaderId).IsFixedLength();
            entity.Property(e => e.IntfAppParmCompId).IsFixedLength();
            entity.Property(e => e.OvrideFieldCompXrefId).IsFixedLength();
            entity.Property(e => e.OvrideMappedInd).IsFixedLength();
            entity.Property(e => e.OvrideSegFieldXrefId).IsFixedLength();
            entity.Property(e => e.OvrideValCd).IsFixedLength();
            entity.Property(e => e.PrcsInd).IsFixedLength();
            entity.Property(e => e.PreCondInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TrueFieldCompXrefId).IsFixedLength();
            entity.Property(e => e.TrueMappedInd).IsFixedLength();
            entity.Property(e => e.TrueSegFieldXrefId).IsFixedLength();
            entity.Property(e => e.TrueValCd).IsFixedLength();
        });

        modelBuilder.Entity<IntfAppParmEvnt>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfAppParmEvntId }).HasName("pkintf_app_parm_evnt");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmEvntId).IsFixedLength();
            entity.Property(e => e.CustomInd).IsFixedLength();
            entity.Property(e => e.DocDesc).IsFixedLength();
            entity.Property(e => e.EvntTyp).IsFixedLength();
            entity.Property(e => e.EvntTypDesc).IsFixedLength();
            entity.Property(e => e.EvntTypName).IsFixedLength();
            entity.Property(e => e.FlipCondCd).IsFixedLength();
            entity.Property(e => e.FlipEvntTypId).IsFixedLength();
            entity.Property(e => e.FlipInd).IsFixedLength();
            entity.Property(e => e.FlipIntfAppParmEvntId).IsFixedLength();
            entity.Property(e => e.IgnoreAddlPtKeyMatchInd).IsFixedLength();
            entity.Property(e => e.IntfAppParmCondHeaderId).IsFixedLength();
            entity.Property(e => e.LogInvalidPtIdPrcsInd).IsFixedLength();
            entity.Property(e => e.LogMissingPtIdPrcsInd).IsFixedLength();
            entity.Property(e => e.MsgEvntXrefId).IsFixedLength();
            entity.Property(e => e.PrcsTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfAppParm).WithMany(p => p.IntfAppParmEvnt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_app_parm_evnt");
        });

        modelBuilder.Entity<IntfAppParmExtended>(entity =>
        {
            entity.HasKey(e => e.IntfAppParmId).HasName("pkintf_app_parm_extended");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.AcctProviderInd).IsFixedLength();
            entity.Property(e => e.AscInd).IsFixedLength();
            entity.Property(e => e.AutoApproveAbnormalsInd).IsFixedLength();
            entity.Property(e => e.AutoApproveCriticalsInd).IsFixedLength();
            entity.Property(e => e.AutoApproveInd).IsFixedLength();
            entity.Property(e => e.BillCapitatedZeroInd).IsFixedLength();
            entity.Property(e => e.BillChargeStatusInd).IsFixedLength();
            entity.Property(e => e.BillLastDayOpenInd).IsFixedLength();
            entity.Property(e => e.BillPrcsMthd).IsFixedLength();
            entity.Property(e => e.BillSysInstId).IsFixedLength();
            entity.Property(e => e.BkupExtName).IsFixedLength();
            entity.Property(e => e.BkupInd).IsFixedLength();
            entity.Property(e => e.BkupPath).IsFixedLength();
            entity.Property(e => e.DcmntFilePath).IsFixedLength();
            entity.Property(e => e.DfltUnsolTestProviderInd).IsFixedLength();
            entity.Property(e => e.ErrPath).IsFixedLength();
            entity.Property(e => e.FacInstId).IsFixedLength();
            entity.Property(e => e.FileNoEndVal).IsFixedLength();
            entity.Property(e => e.FileNoExtName).IsFixedLength();
            entity.Property(e => e.FileNoGenInd).IsFixedLength();
            entity.Property(e => e.FileNoNextSeq).IsFixedLength();
            entity.Property(e => e.FileNoStartVal).IsFixedLength();
            entity.Property(e => e.FilePath).IsFixedLength();
            entity.Property(e => e.GenFacRecInd).IsFixedLength();
            entity.Property(e => e.GenResultAlertsInd).IsFixedLength();
            entity.Property(e => e.Hl7RptDirectory).IsFixedLength();
            entity.Property(e => e.Hl7RptInd)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.LabAnalyzerInd).IsFixedLength();
            entity.Property(e => e.LabAnalyzerSendCompInd).IsFixedLength();
            entity.Property(e => e.MatchExtrnlPon).IsFixedLength();
            entity.Property(e => e.PharmOrderApprInd).IsFixedLength();
            entity.Property(e => e.PharmOrderDispInd).IsFixedLength();
            entity.Property(e => e.PharmOrderSendInd).IsFixedLength();
            entity.Property(e => e.PrcsWithNoResultsInd).IsFixedLength();
            entity.Property(e => e.PrimeInd).IsFixedLength();
            entity.Property(e => e.ReadOnlyInd).IsFixedLength();
            entity.Property(e => e.RmotDrvInd).IsFixedLength();
            entity.Property(e => e.RxDiscNewInd).IsFixedLength();
            entity.Property(e => e.SendTestDxInd).IsFixedLength();
            entity.Property(e => e.SniPidSegNo).IsFixedLength();
            entity.Property(e => e.SpecRule).IsFixedLength();
            entity.Property(e => e.StoreUomDescInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UnsolPrcsMthd).IsFixedLength();

            entity.HasOne(d => d.IntfAppParm).WithOne(p => p.IntfAppParmExtended)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_app_parm_extended");
        });

        modelBuilder.Entity<IntfAppParmFacId>(entity =>
        {
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.FacInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfAppParm).WithMany(p => p.IntfAppParmFacId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_intf_app_parm_fac_id_Tointf_app_parm");
        });

        modelBuilder.Entity<IntfAppParmField>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfAppParmFieldId }).HasName("pkintf_app_parm_field");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmFieldId).IsFixedLength();
            entity.Property(e => e.AddInd).IsFixedLength();
            entity.Property(e => e.CustomInd).IsFixedLength();
            entity.Property(e => e.DefTyp).IsFixedLength();
            entity.Property(e => e.DfltStkhId).IsFixedLength();
            entity.Property(e => e.FieldDataTyp).IsFixedLength();
            entity.Property(e => e.FieldDesc).IsFixedLength();
            entity.Property(e => e.FieldName).IsFixedLength();
            entity.Property(e => e.Hl7MappedInd).IsFixedLength();
            entity.Property(e => e.InbndPrcsCd).IsFixedLength();
            entity.Property(e => e.IntfAppParmSegId).IsFixedLength();
            entity.Property(e => e.IntfFieldCdMapSendCd).IsFixedLength();
            entity.Property(e => e.IntfPtKeyMapInd).IsFixedLength();
            entity.Property(e => e.IntfStkhKeyMapInd).IsFixedLength();
            entity.Property(e => e.ItemNo).IsFixedLength();
            entity.Property(e => e.MapMthdCd).IsFixedLength();
            entity.Property(e => e.MsgEvntSegFieldXrefId).IsFixedLength();
            entity.Property(e => e.NullInd).IsFixedLength();
            entity.Property(e => e.OutbndPrcsCd).IsFixedLength();
            entity.Property(e => e.OvrideInd).IsFixedLength();
            entity.Property(e => e.PrcsCd).IsFixedLength();
            entity.Property(e => e.ProfReltnInd).IsFixedLength();
            entity.Property(e => e.PtPrcsCd).IsFixedLength();
            entity.Property(e => e.RepeatableInd).IsFixedLength();
            entity.Property(e => e.SegFieldXrefDesc).IsFixedLength();
            entity.Property(e => e.SegFieldXrefId).IsFixedLength();
            entity.Property(e => e.StkhAddInd).IsFixedLength();
            entity.Property(e => e.StkhBitmapInd).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.StkhPrcsCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfAppParm).WithMany(p => p.IntfAppParmField)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_app_parm_field");

            entity.HasOne(d => d.IntfAppParmSeg).WithMany(p => p.IntfAppParmField)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_intf_app_parm_field");
        });

        modelBuilder.Entity<IntfAppParmFwd>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfAppParmFwdId }).HasName("pkintf_app_parm_fwd");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmFwdId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfAppParmFwdNavigation).WithMany(p => p.IntfAppParmFwdIntfAppParmFwdNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_intf_app_parm_fwd");

            entity.HasOne(d => d.IntfAppParm).WithMany(p => p.IntfAppParmFwdIntfAppParm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_app_parm_fwd");
        });

        modelBuilder.Entity<IntfAppParmSeg>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfAppParmSegId }).HasName("pkintf_app_parm_seg");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmSegId).IsFixedLength();
            entity.Property(e => e.AutoGenInd).IsFixedLength();
            entity.Property(e => e.DefTyp).IsFixedLength();
            entity.Property(e => e.GenerateInd).IsFixedLength();
            entity.Property(e => e.GrpChildInd).IsFixedLength();
            entity.Property(e => e.GrpInd).IsFixedLength();
            entity.Property(e => e.HeaderInd).IsFixedLength();
            entity.Property(e => e.InboundPrcsInd).IsFixedLength();
            entity.Property(e => e.IntfAppParmCondHeaderId).IsFixedLength();
            entity.Property(e => e.IntfAppParmEvntId).IsFixedLength();
            entity.Property(e => e.MsgEvntSegXrefId).IsFixedLength();
            entity.Property(e => e.NteAssocInd).IsFixedLength();
            entity.Property(e => e.ParentIntfAppParmSegId).IsFixedLength();
            entity.Property(e => e.PrcsInd).IsFixedLength();
            entity.Property(e => e.PrcsMthdTyp).IsFixedLength();
            entity.Property(e => e.PrcsNteInd).IsFixedLength();
            entity.Property(e => e.PredefinedInd).IsFixedLength();
            entity.Property(e => e.RejectMsgInd).IsFixedLength();
            entity.Property(e => e.RejectSegInd).IsFixedLength();
            entity.Property(e => e.RepeatableInd).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.SegTyp).IsFixedLength();
            entity.Property(e => e.SegTypDesc).IsFixedLength();
            entity.Property(e => e.SegTypId).IsFixedLength();
            entity.Property(e => e.SegTypName).IsFixedLength();
            entity.Property(e => e.SnapshotInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.WriteSegInd).IsFixedLength();

            entity.HasOne(d => d.IntfAppParm).WithMany(p => p.IntfAppParmSeg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_app_parm_seg");

            entity.HasOne(d => d.IntfAppParmEvnt).WithMany(p => p.IntfAppParmSeg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_intf_app_parm_seg");
        });

        modelBuilder.Entity<IntfAppParmTrgr>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfTrgrSeqNo }).HasName("pkintf_app_parm_trgr");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.ProcessInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfAppParm).WithMany(p => p.IntfAppParmTrgr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_intf_app_parm_trgr");

            entity.HasOne(d => d.IntfTrgrSeqNoNavigation).WithMany(p => p.IntfAppParmTrgr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_app_parm_trgr");
        });

        modelBuilder.Entity<IntfAppParmTrnsltn>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfAppParmTransltnId }).HasName("pkintf_app_parm_trnsltn");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmTransltnId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TransltnTyp).IsFixedLength();

            entity.HasOne(d => d.IntfAppParm).WithMany(p => p.IntfAppParmTrnsltn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_app_parm_trnsltn");
        });

        modelBuilder.Entity<IntfAppParmTrnsltnFld>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfAppParmTransltnId, e.IntfAppParmTransltnRcrdId, e.IntfAppParmTransltnFldId }).HasName("pkintf_app_parm_trnsltn_fld");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmTransltnId).IsFixedLength();
            entity.Property(e => e.IntfAppParmTransltnRcrdId).IsFixedLength();
            entity.Property(e => e.IntfAppParmTransltnFldId).IsFixedLength();
            entity.Property(e => e.IntfAppParmCompId).IsFixedLength();
            entity.Property(e => e.IntfAppParmFieldId).IsFixedLength();
            entity.Property(e => e.IntfAppParmSegId).IsFixedLength();
            entity.Property(e => e.ProcessInd).IsFixedLength();
            entity.Property(e => e.RepeatingInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypCd).IsFixedLength();

            entity.HasOne(d => d.IntfAppParmComp).WithMany(p => p.IntfAppParmTrnsltnFld)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3intf_app_parm_trnsltn_fld");

            entity.HasOne(d => d.IntfAppParmField).WithMany(p => p.IntfAppParmTrnsltnFld)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2intf_app_parm_trnsltn_fld");

            entity.HasOne(d => d.IntfAppParmTrnsltnRecrd).WithMany(p => p.IntfAppParmTrnsltnFld)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1intf_app_parm_trnsltn_fld");
        });

        modelBuilder.Entity<IntfAppParmTrnsltnRecrd>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfAppParmTransltnId, e.IntfAppParmTransltnRcrdId }).HasName("pkintf_app_parm_trnsltn_recrd");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmTransltnId).IsFixedLength();
            entity.Property(e => e.IntfAppParmTransltnRcrdId).IsFixedLength();
            entity.Property(e => e.IntfAppParmEvntId).IsFixedLength();
            entity.Property(e => e.IntfAppParmSegId).IsFixedLength();
            entity.Property(e => e.RepeatingInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfAppParmSeg).WithMany(p => p.IntfAppParmTrnsltnRecrd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2intf_app_parm_trnsltn_recrd");

            entity.HasOne(d => d.IntfAppParmTrnsltn).WithMany(p => p.IntfAppParmTrnsltnRecrd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1intf_app_parm_trnsltn_recrd");
        });

        modelBuilder.Entity<IntfAppParmTrnsltnXml>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfAppParmTransltnId }).HasName("pkintf_app_parm_trnsltn_xml");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmTransltnId).IsFixedLength();
            entity.Property(e => e.IntfAppParmEvntId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.XmlDefnTyp).IsFixedLength();

            entity.HasOne(d => d.IntfAppParmEvnt).WithMany(p => p.IntfAppParmTrnsltnXml).HasConstraintName("fk2intf_app_parm_trnsltn_xml");

            entity.HasOne(d => d.IntfAppParmTrnsltn).WithOne(p => p.IntfAppParmTrnsltnXml)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1intf_app_parm_trnsltn_xml");
        });

        modelBuilder.Entity<IntfBillingRun>(entity =>
        {
            entity.HasKey(e => e.IntfBillRunSeqId).HasName("pkintf_billing_run");

            entity.Property(e => e.BillRunDesc).IsFixedLength();
            entity.Property(e => e.BillSysId).IsFixedLength();
            entity.Property(e => e.BillSysInstId).IsFixedLength();
            entity.Property(e => e.StatusInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfBillingRunInfo>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.BillRunNo }).HasName("pkintf_billing_run_info");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.BatchNo).IsFixedLength();
            entity.Property(e => e.OverrideBatchNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfBillRunSeq).WithMany(p => p.IntfBillingRunInfo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_billing_run_info");
        });

        modelBuilder.Entity<IntfCcsLink>(entity =>
        {
            entity.HasKey(e => e.IntfAppParmId).HasName("pkintf_ccs_link");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmCcsId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfAppParmCcs).WithMany(p => p.IntfCcsLinkIntfAppParmCcs).HasConstraintName("fk2_intf_ccs_link");

            entity.HasOne(d => d.IntfAppParm).WithOne(p => p.IntfCcsLinkIntfAppParm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_ccs_link");
        });

        modelBuilder.Entity<IntfComm>(entity =>
        {
            entity.HasKey(e => e.IntfCommId).HasName("pkintf_comm");

            entity.Property(e => e.IntfCommId).IsFixedLength();
            entity.Property(e => e.AckActiveInd).IsFixedLength();
            entity.Property(e => e.AckIntfCommId).IsFixedLength();
            entity.Property(e => e.CommName).IsFixedLength();
            entity.Property(e => e.CustInd).IsFixedLength();
            entity.Property(e => e.CustNameId).IsFixedLength();
            entity.Property(e => e.Dbms).IsFixedLength();
            entity.Property(e => e.DirectionInd).IsFixedLength();
            entity.Property(e => e.DropConnectionTyp).IsFixedLength();
            entity.Property(e => e.FrozenLinkInd).IsFixedLength();
            entity.Property(e => e.ImpComplInd).IsFixedLength();
            entity.Property(e => e.IntfEngineId).IsFixedLength();
            entity.Property(e => e.LinkDownOkInd).IsFixedLength();
            entity.Property(e => e.MsgLenEncode).IsFixedLength();
            entity.Property(e => e.Protocol).IsFixedLength();
            entity.Property(e => e.PurgeIntfEngineId).IsFixedLength();
            entity.Property(e => e.ResendMsgInd).IsFixedLength();
            entity.Property(e => e.ResyncLinkInd).IsFixedLength();
            entity.Property(e => e.RmotAckPort).IsFixedLength();
            entity.Property(e => e.RmotAddress).IsFixedLength();
            entity.Property(e => e.RmotPort).IsFixedLength();
            entity.Property(e => e.SeqNoProtocolInd).IsFixedLength();
            entity.Property(e => e.SeqNoStateCd).IsFixedLength();
            entity.Property(e => e.SocketSecurityInd).IsFixedLength();
            entity.Property(e => e.TcpipDebugInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfEngine).WithMany(p => p.IntfComm).HasConstraintName("fk1_intf_comm");
        });

        modelBuilder.Entity<IntfDispLoc>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.DispLocId }).HasName("pkintf_disp_loc");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfEmail>(entity =>
        {
            entity.HasKey(e => e.IntfEmailId).HasName("pkintf_email");

            entity.Property(e => e.IntfEmailId).ValueGeneratedNever();
            entity.Property(e => e.HeaderLine).IsFixedLength();
            entity.Property(e => e.IntfAppParmEvntId).IsFixedLength();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfAppParmSegId).IsFixedLength();
            entity.Property(e => e.IntfCommId).IsFixedLength();
            entity.Property(e => e.IntfEngineId).IsFixedLength();
            entity.Property(e => e.SubjectLine).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.EmailIncident).WithMany(p => p.IntfEmail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_email");
        });

        modelBuilder.Entity<IntfEmailLog>(entity =>
        {
            entity.HasKey(e => e.IntfEmailLogId).HasName("pkintf_email_log");

            entity.Property(e => e.IntfEmailLogId).ValueGeneratedNever();
            entity.Property(e => e.Hl7InOut).IsFixedLength();
            entity.Property(e => e.ProcessInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfEmailMsg>(entity =>
        {
            entity.HasKey(e => e.IntfEmailMsgId).HasName("pkintf_email_msg");

            entity.Property(e => e.IntfEmailMsgId).IsFixedLength();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.MsgNo).IsFixedLength();
            entity.Property(e => e.SegTypId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfEmail).WithMany(p => p.IntfEmailMsg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_email_msg");
        });

        modelBuilder.Entity<IntfEmailMsgLog>(entity =>
        {
            entity.HasKey(e => e.IntfEmailMsgLogId).HasName("pkintf_email_msg_log");

            entity.Property(e => e.IntfEmailMsgLogId).ValueGeneratedNever();
            entity.Property(e => e.Hl7InOut).IsFixedLength();
            entity.Property(e => e.IntfEmailMsgId).IsFixedLength();
            entity.Property(e => e.ProcessInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfEngine>(entity =>
        {
            entity.HasKey(e => e.IntfEngineId).HasName("pkintf_engine");

            entity.Property(e => e.IntfEngineId).IsFixedLength();
            entity.Property(e => e.DebugInd).IsFixedLength();
            entity.Property(e => e.EnabledInd).IsFixedLength();
            entity.Property(e => e.EngineInstId).IsFixedLength();
            entity.Property(e => e.EngineName).IsFixedLength();
            entity.Property(e => e.EngineRptEndTime).IsFixedLength();
            entity.Property(e => e.EngineRptInd)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.EngineRptStartTime).IsFixedLength();
            entity.Property(e => e.EngineTyp).IsFixedLength();
            entity.Property(e => e.ImpComplInd).IsFixedLength();
            entity.Property(e => e.IntfServiceId).IsFixedLength();
            entity.Property(e => e.LogPath).IsFixedLength();
            entity.Property(e => e.MntrPort).IsFixedLength();
            entity.Property(e => e.RunTrgrEvntsInd).IsFixedLength();
            entity.Property(e => e.RunWprocessInd).IsFixedLength();
            entity.Property(e => e.SchStopInd).IsFixedLength();
            entity.Property(e => e.StartMthd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VarisDbRefreshTimer).HasDefaultValue(12);
        });

        modelBuilder.Entity<IntfExclLabMap>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfLabCompSeqNo }).HasName("pkintf_excl_lab_map");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.LabMapCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfFieldCdMap>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfFieldCdMapId }).HasName("pkintf_field_cd_map");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfFieldCdMapId).IsFixedLength();
            entity.Property(e => e.ExternalDesc).IsFixedLength();
            entity.Property(e => e.ExternalTyp).IsFixedLength();
            entity.Property(e => e.KeyCd).IsFixedLength();
            entity.Property(e => e.KeyTyp).IsFixedLength();
            entity.Property(e => e.MapTyp).IsFixedLength();
            entity.Property(e => e.PrefInd).IsFixedLength();
            entity.Property(e => e.SegFieldXrefId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfAppParm).WithMany(p => p.IntfFieldCdMap)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_app_parm_id");
        });

        modelBuilder.Entity<IntfLabAnalyzer>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfLabAnalyzerId }).HasName("pkintf_lab_analyzer");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfLabAnalyzerId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfLabGrp>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.GrpId }).HasName("pkintf_lab_grp");

            entity.Property(e => e.FacCompName).IsFixedLength();
            entity.Property(e => e.FacGroupName).IsFixedLength();
            entity.Property(e => e.Hl7Fon).IsFixedLength();
            entity.Property(e => e.Hl7LabSysCd).IsFixedLength();
            entity.Property(e => e.Hl7LabSysDesc).IsFixedLength();
            entity.Property(e => e.Hl7Pon).IsFixedLength();
            entity.Property(e => e.Hl7SpecTyp).IsFixedLength();
            entity.Property(e => e.ObrResultStatus).IsFixedLength();
            entity.Property(e => e.TestInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfLabObsResult>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.GrpId, e.ObsId }).HasName("pkintf_lab_obs_result");

            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.FacCompName).IsFixedLength();
            entity.Property(e => e.FacGroupName).IsFixedLength();
            entity.Property(e => e.Hl7LabSysCd).IsFixedLength();
            entity.Property(e => e.Hl7LabSysDesc).IsFixedLength();
            entity.Property(e => e.Hl7ProducerId).IsFixedLength();
            entity.Property(e => e.Hl7Range).IsFixedLength();
            entity.Property(e => e.Hl7ResultAltId).IsFixedLength();
            entity.Property(e => e.Hl7ResultStatus).IsFixedLength();
            entity.Property(e => e.Hl7Uom).IsFixedLength();
            entity.Property(e => e.ReleaseInd).IsFixedLength();
            entity.Property(e => e.ResultTypFlag).IsFixedLength();
            entity.Property(e => e.StatusCmt).IsFixedLength();
            entity.Property(e => e.TestInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfLabOrder>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("pkintf_lab_order");

            entity.Property(e => e.OrderId).ValueGeneratedNever();
            entity.Property(e => e.AscNo).IsFixedLength();
            entity.Property(e => e.Hl7MsgDatetime).IsFixedLength();
            entity.Property(e => e.Hl7PtExtrnlKey).IsFixedLength();
            entity.Property(e => e.Hl7PtFirstName).IsFixedLength();
            entity.Property(e => e.Hl7PtIntrnlKey).IsFixedLength();
            entity.Property(e => e.Hl7PtLastName).IsFixedLength();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.ProcessInd).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.TestInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfMap>(entity =>
        {
            entity.HasKey(e => new { e.MapTyp, e.ARefId, e.AInstId, e.BRefId, e.BInstId }).HasName("pkintf_map");

            entity.Property(e => e.MapTyp).IsFixedLength();
            entity.Property(e => e.ARefId).IsFixedLength();
            entity.Property(e => e.AInstId).IsFixedLength();
            entity.Property(e => e.BRefId).IsFixedLength();
            entity.Property(e => e.BInstId).IsFixedLength();
            entity.Property(e => e.ExtrnlDfltVal).IsFixedLength();
            entity.Property(e => e.OptxDfltVal).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfMode>(entity =>
        {
            entity.HasKey(e => new { e.IntfMode1, e.LangTyp }).HasName("pkintf_mode");

            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.LangTypNavigation).WithMany(p => p.IntfMode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_mode");
        });

        modelBuilder.Entity<IntfModeApp>(entity =>
        {
            entity.HasKey(e => new { e.IntfMode, e.AppCd }).HasName("pkintf_mode_app");

            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfModeMsgTyp>(entity =>
        {
            entity.HasKey(e => new { e.IntfMode, e.MsgTyp }).HasName("pkintf_mode_msg_typ");

            entity.Property(e => e.MsgTyp).IsFixedLength();
            entity.Property(e => e.DirectionInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfMsgLog>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.MsgLogId }).HasName("pkintf_msg_log");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.IntfCommId).IsFixedLength();
            entity.Property(e => e.IntfEngineId).IsFixedLength();
            entity.Property(e => e.MsgLogTyp).IsFixedLength();
            entity.Property(e => e.MsgNo).IsFixedLength();
            entity.Property(e => e.MsgSentInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfNoteTypSel>(entity =>
        {
            entity.HasKey(e => e.IntfNoteTypId).HasName("pkintf_note_typ_sel");

            entity.Property(e => e.IntfNoteTypId).ValueGeneratedNever();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.NoteName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfAppParm).WithMany(p => p.IntfNoteTypSel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_intf_note_typ_sel");
        });

        modelBuilder.Entity<IntfOlPrcsStat>(entity =>
        {
            entity.HasKey(e => e.IntfAppParmId).HasName("pkintf_ol_prcs_stat");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfOlStat>(entity =>
        {
            entity.HasKey(e => e.IntfCommId).HasName("pkintf_ol_stat");

            entity.Property(e => e.IntfCommId).IsFixedLength();
            entity.Property(e => e.AckConnected).IsFixedLength();
            entity.Property(e => e.AppInbndCnct).IsFixedLength();
            entity.Property(e => e.AppOutbndCnct).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfPtKeyMap>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfPtKeyMapId }).HasName("pkintf_pt_key_map");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfPtKeyMapId).IsFixedLength();
            entity.Property(e => e.AllowUpdateInd).IsFixedLength();
            entity.Property(e => e.DisplayKey1Ind).IsFixedLength();
            entity.Property(e => e.DisplayKey2Ind).IsFixedLength();
            entity.Property(e => e.PadWithChar).IsFixedLength();
            entity.Property(e => e.PtIdMatchInd).IsFixedLength();
            entity.Property(e => e.PtIdPrcsFlag).IsFixedLength();
            entity.Property(e => e.PtIdTypCd).IsFixedLength();
            entity.Property(e => e.PtIdTypDesc).IsFixedLength();
            entity.Property(e => e.PtKeyCdInstId).IsFixedLength();
            entity.Property(e => e.SegFieldXrefId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TrimBlankInd).IsFixedLength();
            entity.Property(e => e.TrimChar).IsFixedLength();

            entity.HasOne(d => d.IntfAppParm).WithMany(p => p.IntfPtKeyMap)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_pt_key_map");

            entity.HasOne(d => d.SegFieldXref).WithMany(p => p.IntfPtKeyMap)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_intf_pt_key_map");

            entity.HasOne(d => d.InstPtKeyCd).WithMany(p => p.IntfPtKeyMap)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_intf_pt_key_map");
        });

        modelBuilder.Entity<IntfPtKeyMapVaris>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfPtKeyMapId }).HasName("pkintf_pt_key_map_varis");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfPtKeyMapId).IsFixedLength();
            entity.Property(e => e.AllowUpdateInd).IsFixedLength();
            entity.Property(e => e.DisplayKey1Ind).IsFixedLength();
            entity.Property(e => e.DisplayKey2Ind).IsFixedLength();
            entity.Property(e => e.PadWithChar).IsFixedLength();
            entity.Property(e => e.PtIdMatchInd).IsFixedLength();
            entity.Property(e => e.PtIdPrcsFlag).IsFixedLength();
            entity.Property(e => e.PtKeyCdInstId).IsFixedLength();
            entity.Property(e => e.SegFieldXrefId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TrimBlankInd).IsFixedLength();
            entity.Property(e => e.TrimChar).IsFixedLength();
        });

        modelBuilder.Entity<IntfPtSelectConfig>(entity =>
        {
            entity.HasKey(e => e.IntfPtSelectConfigId).HasName("pkintf_pt_select_config");

            entity.Property(e => e.IntfPtSelectConfigId).ValueGeneratedNever();
            entity.Property(e => e.ColumnLabel).IsFixedLength();
            entity.Property(e => e.Hl7SegmentName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.VarisParameterName).IsFixedLength();
            entity.Property(e => e.VarisStoredProcName).IsFixedLength();
        });

        modelBuilder.Entity<IntfPtSelectDefn>(entity =>
        {
            entity.HasKey(e => e.IntfPtSelectDefnId).HasName("pkintf_pt_select_defn");

            entity.Property(e => e.IntfPtSelectDefnId).ValueGeneratedNever();
            entity.Property(e => e.ColumnLabel).IsFixedLength();
            entity.Property(e => e.EditableInd).IsFixedLength();
            entity.Property(e => e.HeaderLabel).IsFixedLength();
            entity.Property(e => e.Hl7SegmentName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.VarisParameterName).IsFixedLength();
            entity.Property(e => e.VarisStoredProcName).IsFixedLength();
        });

        modelBuilder.Entity<IntfSch>(entity =>
        {
            entity.HasKey(e => new { e.SchSeqNo, e.RunTstamp }).HasName("pkintf_sch");

            entity.Property(e => e.StatusInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.SchSeqNoNavigation).WithMany(p => p.IntfSch)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_sch");
        });

        modelBuilder.Entity<IntfSchDef>(entity =>
        {
            entity.HasKey(e => e.SchSeqNo).HasName("pkintf_sch_def");

            entity.Property(e => e.SchSeqNo).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.BillSysId).IsFixedLength();
            entity.Property(e => e.BillSysInstId).IsFixedLength();
            entity.Property(e => e.DailyInd).IsFixedLength();
            entity.Property(e => e.FriInd).IsFixedLength();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfEngineId).IsFixedLength();
            entity.Property(e => e.MonInd).IsFixedLength();
            entity.Property(e => e.PostCustom).IsFixedLength();
            entity.Property(e => e.PreCustom).IsFixedLength();
            entity.Property(e => e.RunAsapInd).IsFixedLength();
            entity.Property(e => e.SatInd).IsFixedLength();
            entity.Property(e => e.SchParam).IsFixedLength();
            entity.Property(e => e.SchTime).IsFixedLength();
            entity.Property(e => e.SrvInd).IsFixedLength();
            entity.Property(e => e.SunInd).IsFixedLength();
            entity.Property(e => e.ThurInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TuesInd).IsFixedLength();
            entity.Property(e => e.WedInd).IsFixedLength();

            entity.HasOne(d => d.IntfEngine).WithMany(p => p.IntfSchDef)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_sch_def");
        });

        modelBuilder.Entity<IntfSchMap>(entity =>
        {
            entity.HasKey(e => e.IntfSchMapId).HasName("pkintf_sch_map");

            entity.Property(e => e.IntfSchMapId).ValueGeneratedNever();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.MappingCd).IsFixedLength();
            entity.Property(e => e.MappingTypCd).IsFixedLength();
            entity.Property(e => e.SendInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfService>(entity =>
        {
            entity.HasKey(e => e.IntfServiceId).HasName("pkintf_service");

            entity.Property(e => e.IntfServiceId).IsFixedLength();
            entity.Property(e => e.EnabledInd).IsFixedLength();
            entity.Property(e => e.MachineName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpdateAsapInd).IsFixedLength();
        });

        modelBuilder.Entity<IntfSmryStats>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.PrcsStamp }).HasName("pkintf_smry_stats");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntfStkhKeyMap>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfStkhKeyMapId }).HasName("pkintf_stkh_key_map");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfStkhKeyMapId).IsFixedLength();
            entity.Property(e => e.AddInd).IsFixedLength();
            entity.Property(e => e.AllowUpdateInd).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.SegFieldXrefId).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.StkhIdMatchCd).IsFixedLength();
            entity.Property(e => e.StkhIdTypCd).IsFixedLength();
            entity.Property(e => e.StkhIdTypDesc).IsFixedLength();
            entity.Property(e => e.StkhKeyCdInstId).IsFixedLength();
            entity.Property(e => e.StkhMatchInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VisitInstId).IsFixedLength();

            entity.HasOne(d => d.IntfAppParm).WithMany(p => p.IntfStkhKeyMap)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_stkh_key_map");
        });

        modelBuilder.Entity<IntfStkhKeyMapRole>(entity =>
        {
            entity.HasKey(e => new { e.IntfAppParmId, e.IntfStkhKeyMapId, e.StkhRoleTyp }).HasName("pkintf_stkh_key_map_role");

            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfStkhKeyMapId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.StkhRoleTypNavigation).WithMany(p => p.IntfStkhKeyMapRole)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_intf_stkh_key_map_role");

            entity.HasOne(d => d.IntfStkhKeyMap).WithMany(p => p.IntfStkhKeyMapRole)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_stkh_key_map_role");
        });

        modelBuilder.Entity<IntfTrgr>(entity =>
        {
            entity.HasKey(e => e.IntfTrgrSeqNo).HasName("pkintf_trgr");

            entity.Property(e => e.IntfTrgrSeqNo).ValueGeneratedNever();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.IntfAppParmIdNoTrgr).IsFixedLength();
            entity.Property(e => e.IntfAppParmIdTrgr).IsFixedLength();
            entity.Property(e => e.MsgEvntTyp).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
            entity.Property(e => e.OrderTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TrgrStatusInd).IsFixedLength();
        });

        modelBuilder.Entity<IntfTrgr1>(entity =>
        {
            entity.HasKey(e => e.IntfTrgrSer).HasName("XPKIntfTrgr");

            entity.Property(e => e.IntfTrgrSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<IntfTrgrKeys>(entity =>
        {
            entity.HasKey(e => new { e.IntfTrgrSeqNo, e.TrgrKeyName }).HasName("pkintf_trgr_keys");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntfTrgrSeqNoNavigation).WithMany(p => p.IntfTrgrKeys)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intf_trgr_keys");
        });

        modelBuilder.Entity<IntvCatDflt>(entity =>
        {
            entity.HasKey(e => new { e.PlnTyp, e.IntvCatId }).HasName("pkintv_cat_dflt");

            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.IntvCatDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IntvEventStatus>(entity =>
        {
            entity.HasKey(e => e.IntvEventStatus1).HasName("pkintv_event_status");

            entity.Property(e => e.IntvEventStatus1).ValueGeneratedNever();
            entity.Property(e => e.IntvEventDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<IntvLibrary>(entity =>
        {
            entity.HasKey(e => new { e.EventTyp, e.IntvName }).HasName("pkintv_library");

            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.IntvName).IsFixedLength();
            entity.Property(e => e.ActualTimeReq).IsFixedLength();
            entity.Property(e => e.NotificationReq).IsFixedLength();
            entity.Property(e => e.RqstnReq).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.EventTypNavigation).WithMany(p => p.IntvLibrary)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intv_library");
        });

        modelBuilder.Entity<IntvLibraryBill>(entity =>
        {
            entity.HasKey(e => new { e.EventTyp, e.IntvName, e.BillCd, e.BillCdTypId, e.BillInstanceId }).HasName("pkintv_library_bill");

            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.IntvName).IsFixedLength();
            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IntvLibrary).WithMany(p => p.IntvLibraryBill)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_intv_library_bill");
        });

        modelBuilder.Entity<IntvUseTyp>(entity =>
        {
            entity.HasKey(e => e.IntvUseTyp1).HasName("pkintv_use_typ");

            entity.Property(e => e.IntvUseTyp1).ValueGeneratedNever();
            entity.Property(e => e.IntvUseTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<IsoLanguage>(entity =>
        {
            entity.HasKey(e => e.IsoLangId).HasName("pkiso_language");

            entity.Property(e => e.IsoLangId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.DefaultInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IvCat>(entity =>
        {
            entity.HasKey(e => e.IvCatId).HasName("pkiv_cat");

            entity.Property(e => e.IvCatId).ValueGeneratedNever();
            entity.Property(e => e.IvCatDesc).IsFixedLength();
            entity.Property(e => e.IvCatDspDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IvCatHdr>(entity =>
        {
            entity.HasKey(e => e.IvCatHdrId).HasName("pkiv_cat_hdr");

            entity.Property(e => e.IvCatHdrId).ValueGeneratedNever();
            entity.Property(e => e.IvCatHdrDesc).IsFixedLength();
            entity.Property(e => e.IvCatHdrDspDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IvCatResp>(entity =>
        {
            entity.HasKey(e => e.IvCatRespId).HasName("pkiv_cat_resp");

            entity.Property(e => e.IvCatRespId).ValueGeneratedNever();
            entity.Property(e => e.IvCatRespDesc).IsFixedLength();
            entity.Property(e => e.IvCatRespDspDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IvFluid>(entity =>
        {
            entity.HasKey(e => e.GnrcIvFluidName).HasName("pkiv_fluid");

            entity.Property(e => e.GnrcIvFluidName).IsFixedLength();
            entity.Property(e => e.IvFluidCd).IsFixedLength();
            entity.Property(e => e.IvFluidName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IvQstr>(entity =>
        {
            entity.HasKey(e => e.IvQstrId).HasName("pkiv_qstr");

            entity.Property(e => e.IvQstrId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.IvQstrName).IsFixedLength();
            entity.Property(e => e.IvQstrPrelimTxt).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<IvQstrBmp>(entity =>
        {
            entity.HasKey(e => new { e.IvQstrId, e.IvQstrCatId }).HasName("pkiv_qstr_bmp");

            entity.Property(e => e.BmpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IvQstrCat).WithOne(p => p.IvQstrBmp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_iv_qstr_bmp");
        });

        modelBuilder.Entity<IvQstrCat>(entity =>
        {
            entity.HasKey(e => new { e.IvQstrId, e.IvQstrCatId }).HasName("pkiv_qstr_cat");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IvQstr).WithMany(p => p.IvQstrCat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_iv_qstr_cat");

            entity.HasOne(d => d.IvRespTyp).WithMany(p => p.IvQstrCat).HasConstraintName("fk2_iv_qstr_cat");
        });

        modelBuilder.Entity<IvQstrResp>(entity =>
        {
            entity.HasKey(e => new { e.IvQstrId, e.IvQstrCatId, e.IvCatRespId }).HasName("pkiv_qstr_resp");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IvCatResp).WithMany(p => p.IvQstrResp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_iv_qstr_resp");

            entity.HasOne(d => d.IvQstrCat).WithMany(p => p.IvQstrResp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_iv_qstr_resp");
        });

        modelBuilder.Entity<IvRespTyp>(entity =>
        {
            entity.HasKey(e => e.IvRespTyp1).HasName("pkiv_resp_typ");

            entity.Property(e => e.IvRespTyp1).ValueGeneratedNever();
            entity.Property(e => e.IvRespDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<LangTyp>(entity =>
        {
            entity.HasKey(e => e.LangTyp1).HasName("pklang_typ");

            entity.Property(e => e.LangTyp1).ValueGeneratedNever();
            entity.Property(e => e.LangDesc).IsFixedLength();
            entity.Property(e => e.OptxActiveInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.WebActiveInd).IsFixedLength();
        });

        modelBuilder.Entity<LanguageLookup>(entity =>
        {
            entity.HasKey(e => e.LanguageId).HasName("XPKLanguageLookup");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_LanguageLookup");
                    tb.HasTrigger("tU_LanguageLookup");
                });

            
                
                
        });

        modelBuilder.Entity<LateralityTyp>(entity =>
        {
            entity.HasKey(e => e.LateralityTyp1).HasName("pklaterality_typ");

            entity.Property(e => e.LateralityTyp1).ValueGeneratedNever();
            entity.Property(e => e.LateralityDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<LblForm>(entity =>
        {
            entity.HasKey(e => e.LblFormId).HasName("pklbl_form");

            entity.Property(e => e.LblFormId).IsFixedLength();
            entity.Property(e => e.LblFormDesc).IsFixedLength();
            entity.Property(e => e.OptxLblTblId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<LblFormColDet>(entity =>
        {
            entity.HasKey(e => new { e.OptxLblTblId, e.ColumnName }).HasName("pklbl_form_col_det");

            entity.Property(e => e.OptxLblTblId).IsFixedLength();
            entity.Property(e => e.ColumnName).IsFixedLength();
            entity.Property(e => e.ColumnDesc).IsFixedLength();
            entity.Property(e => e.ColumnTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<LblFormColFormat>(entity =>
        {
            entity.HasKey(e => new { e.ColumnTyp, e.ColumnFormat }).HasName("pklbl_form_col_format");

            entity.Property(e => e.ColumnTyp).IsFixedLength();
            entity.Property(e => e.ColumnFormat).IsFixedLength();
            entity.Property(e => e.ColumnFormatStr).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<LblFormDet>(entity =>
        {
            entity.HasKey(e => new { e.LblFormId, e.SeqNo }).HasName("pklbl_form_det");

            entity.Property(e => e.LblFormId).IsFixedLength();
            entity.Property(e => e.BarcodeLineInd).IsFixedLength();
            entity.Property(e => e.FontTyp).IsFixedLength();
            entity.Property(e => e.LinePointSize).IsFixedLength();
            entity.Property(e => e.LineRemoveInd).IsFixedLength();
            entity.Property(e => e.MultiLineInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.LblForm).WithMany(p => p.LblFormDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_lbl_form_det");
        });

        modelBuilder.Entity<LblFormDetComp>(entity =>
        {
            entity.HasKey(e => new { e.LblFormId, e.SeqNo, e.CompSeqNo }).HasName("pklbl_form_det_comp");

            entity.Property(e => e.LblFormId).IsFixedLength();
            entity.Property(e => e.ColumnFormat).IsFixedLength();
            entity.Property(e => e.ColumnName).IsFixedLength();
            entity.Property(e => e.ColumnTyp).IsFixedLength();
            entity.Property(e => e.DataTyp).IsFixedLength();
            entity.Property(e => e.TextData).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.LblFormDet).WithMany(p => p.LblFormDetComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_lbl_form_det_comp");
        });

        modelBuilder.Entity<LblFormInst>(entity =>
        {
            entity.HasKey(e => e.LblFormInstSeq).HasName("pklbl_form_inst");

            entity.Property(e => e.LblFormInstSeq).ValueGeneratedNever();
            entity.Property(e => e.BarcodeFont).IsFixedLength();
            entity.Property(e => e.BarcodeTyp).IsFixedLength();
            entity.Property(e => e.CacheInd).IsFixedLength();
            entity.Property(e => e.FacInstId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.LblFormId).IsFixedLength();
            entity.Property(e => e.LblMultiLbl).IsFixedLength();
            entity.Property(e => e.LblPicFile).IsFixedLength();
            entity.Property(e => e.LblPicInd).IsFixedLength();
            entity.Property(e => e.LblPicWidthInd).IsFixedLength();
            entity.Property(e => e.NumCopiesInd).IsFixedLength();
            entity.Property(e => e.OptxLblId).IsFixedLength();
            entity.Property(e => e.PrintOrient).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Inst).WithMany(p => p.LblFormInst).HasConstraintName("fk2_lbl_form_inst");

            entity.HasOne(d => d.LblForm).WithMany(p => p.LblFormInst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_lbl_form_inst");

            entity.HasOne(d => d.OptxLbl).WithMany(p => p.LblFormInst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk4_lbl_form_inst");

            entity.HasOne(d => d.Fac).WithMany(p => p.LblFormInst).HasConstraintName("fk3_lbl_form_inst");
        });

        modelBuilder.Entity<LblFormOptx>(entity =>
        {
            entity.HasKey(e => e.OptxLblId).HasName("pklbl_form_optx");

            entity.Property(e => e.OptxLblId).IsFixedLength();
            entity.Property(e => e.FacInd).IsFixedLength();
            entity.Property(e => e.InstInd).IsFixedLength();
            entity.Property(e => e.OptxLblDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<LblFormTbl>(entity =>
        {
            entity.HasKey(e => new { e.OptxLblTblId, e.OptxLblId }).HasName("pklbl_form_tbl");

            entity.Property(e => e.OptxLblTblId).IsFixedLength();
            entity.Property(e => e.OptxLblId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.OptxLbl).WithMany(p => p.LblFormTbl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_lbl_form_tbl");
        });

        modelBuilder.Entity<LinkUsage>(entity =>
        {
            entity.HasKey(e => e.StoredProcedureName).HasName("XPKLinkUsage");
        });

        modelBuilder.Entity<LinkedEvent>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.PhaseSeqNo, e.CycleDay, e.EventSeqNo, e.TpName2, e.TpVersNo2 }).HasName("pklinked_event");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TpName2).IsFixedLength();
            entity.Property(e => e.TpVersNo2).IsFixedLength();
            entity.Property(e => e.LinkedEventTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.CycleEvent).WithMany(p => p.LinkedEventCycleEvent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_linked_event");

            entity.HasOne(d => d.CycleEventNavigation).WithMany(p => p.LinkedEventCycleEventNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_linked_event");
        });

        modelBuilder.Entity<LocUnavl>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.LocId, e.LocUnavlId }).HasName("pkloc_unavl");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UnavlCmt).IsFixedLength();
            entity.Property(e => e.UnavlHdrInstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<LocalizationJig>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKLocalizationJig");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_LocalizationJig");
                    tb.HasTrigger("tU_LocalizationJig");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();
            entity.Property(e => e.Plane).IsFixedLength();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.LocalizationJig).HasConstraintName("FKImagingDevice_LocalizationJig");
        });

        modelBuilder.Entity<Loinc>(entity =>
        {
            entity.HasKey(e => e.LoincCd).HasName("pkloinc");

            entity.Property(e => e.LoincCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<LoincCopyrightSource>(entity =>
        {
            entity.HasKey(e => e.CopyrightId).HasName("pkloinc_copyright_source");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<LoincLoincXref>(entity =>
        {
            entity.HasKey(e => new { e.FromLoincCd, e.ToLoincCd }).HasName("pkloinc_loinc_xref");

            entity.Property(e => e.FromLoincCd).IsFixedLength();
            entity.Property(e => e.ToLoincCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<LookupCdCulture>(entity =>
        {
            entity.HasKey(e => new { e.TableName, e.LookupCd, e.CultureCd }).HasName("pklookup_cd_culture");

            entity.Property(e => e.TableName).IsFixedLength();
            entity.Property(e => e.LookupCd).IsFixedLength();
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<LookupMapping>(entity =>
        {
            entity.HasKey(e => e.LookupMappingSer).HasName("XPKLookupMapping");

            entity.Property(e => e.LookupMappingSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<LookupServiceCache>(entity =>
        {
            entity.HasKey(e => e.LookupServiceCacheSer).HasName("XPKLookupServiceCache");

            entity.Property(e => e.LookupServiceCacheSer).ValueGeneratedNever();
        });

        modelBuilder.Entity<LookupTable>(entity =>
        {
            entity.HasKey(e => e.LookupTableSer)
                .HasName("XPKLookupTable")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_LookupTable");
                    tb.HasTrigger("tU_LookupTable");
                });

            entity.Property(e => e.LookupTableSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.Language).WithMany(p => p.LookupTable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKLanguageLookup_LookupTable");
        });

        modelBuilder.Entity<LookupTypCulture>(entity =>
        {
            entity.HasKey(e => new { e.TableName, e.LookupTyp, e.CultureCd }).HasName("pklookup_typ_culture");

            entity.Property(e => e.TableName).IsFixedLength();
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<LtascheduledTask>(entity =>
        {
            entity.HasKey(e => e.ScheduledTaskSer).HasName("XPKLTAScheduledTask");

            entity.ToTable("LTAScheduledTask", tb =>
                {
                    tb.HasTrigger("tD_LTAScheduledTask");
                    tb.HasTrigger("tI_LTAScheduledTask");
                    tb.HasTrigger("tU_LTAScheduledTask");
                });

            entity.Property(e => e.ScheduledTaskSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ArchiveLocationSerNavigation).WithMany(p => p.LtascheduledTask)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKArchiveLocation_LTAScheduledTask");
        });

        modelBuilder.Entity<LtascheduledTaskPatient>(entity =>
        {
            entity.HasKey(e => new { e.ScheduledTaskSer, e.PatientSer }).HasName("XPKLTAScheduledTaskPatient");

            entity.ToTable("LTAScheduledTaskPatient", tb =>
                {
                    tb.HasTrigger("tI_LTAScheduledTaskPatient");
                    tb.HasTrigger("tU_LTAScheduledTaskPatient");
                });

            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.LtascheduledTaskPatient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_LTAScheduledTaskPatient");

            entity.HasOne(d => d.ScheduledTaskSerNavigation).WithMany(p => p.LtascheduledTaskPatient).HasConstraintName("FKLTAScheduledTask_LTAScheduledTaskPatient");
        });

        modelBuilder.Entity<Ltr>(entity =>
        {
            entity.HasKey(e => e.LtrId).HasName("pkltr");

            entity.Property(e => e.LtrId).ValueGeneratedNever();
            entity.Property(e => e.EmailInd).IsFixedLength();
            entity.Property(e => e.FaxInd).IsFixedLength();
            entity.Property(e => e.LtrFile).IsFixedLength();
            entity.Property(e => e.LtrLocation).IsFixedLength();
            entity.Property(e => e.PrintInd).IsFixedLength();
            entity.Property(e => e.RespReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<LtrRcpt>(entity =>
        {
            entity.HasKey(e => new { e.LtrId, e.LtrRcptStkhId }).HasName("pkltr_rcpt");

            entity.Property(e => e.LtrRcptStkhId).IsFixedLength();
            entity.Property(e => e.CcInd).IsFixedLength();
            entity.Property(e => e.EmailInd).IsFixedLength();
            entity.Property(e => e.FaxInd).IsFixedLength();
            entity.Property(e => e.PrintInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<LtrResp>(entity =>
        {
            entity.HasKey(e => e.LtrId).HasName("pkltr_resp");

            entity.Property(e => e.LtrId).ValueGeneratedNever();
            entity.Property(e => e.RespRcvdInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<LtrTemplate>(entity =>
        {
            entity.HasKey(e => e.LtrTemplateId).HasName("pkltr_template");

            entity.Property(e => e.LtrTemplateId).ValueGeneratedNever();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.LtrName).IsFixedLength();
            entity.Property(e => e.LtrVersNo).IsFixedLength();
            entity.Property(e => e.TemplateFile).IsFixedLength();
            entity.Property(e => e.TemplateLocation).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<Machine>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKMachine");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Machine");
                    tb.HasTrigger("tI_Machine");
                    tb.HasTrigger("tU_Machine");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.PredecessorSerNavigation).WithMany(p => p.InversePredecessorSerNavigation).HasConstraintName("FKPredecessorMachine_Machine");

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.Machine).HasConstraintName("FKResource_Machine");

            entity.HasOne(d => d.WorkstationSerNavigation).WithMany(p => p.Machine).HasConstraintName("FKWorkstation_Machine");
        });

        modelBuilder.Entity<MaritalStatus>(entity =>
        {
            entity.HasKey(e => e.StatusCd).HasName("pkmarital_status");

            entity.Property(e => e.StatusCd).IsFixedLength();
            entity.Property(e => e.StatusDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<MatchResult>(entity =>
        {
            entity.HasKey(e => e.MatchResultSer).HasName("XPKMatchResult");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_MatchResult");
                    tb.HasTrigger("tU_MatchResult");
                });

            entity.Property(e => e.MatchResultSer).ValueGeneratedNever();
            
                
                
            entity.Property(e => e.MatchMatrix).IsFixedLength();
        });

        modelBuilder.Entity<Material>(entity =>
        {
            entity.HasKey(e => e.MaterialSer).HasName("XPKMaterial");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Material");
                    tb.HasTrigger("tU_Material");
                });

            entity.Property(e => e.MaterialSer).ValueGeneratedNever();
            entity.Property(e => e.AmbientColor).IsFixedLength();
            entity.Property(e => e.Color2D).IsFixedLength();
            entity.Property(e => e.DiffuseColor).IsFixedLength();
            
                
                
            entity.Property(e => e.LinePattern).IsFixedLength();
            entity.Property(e => e.SpecularColor).IsFixedLength();
        });

        modelBuilder.Entity<Matrix>(entity =>
        {
            entity.HasKey(e => e.MatrixSer).HasName("XPKMatrix");

            entity.ToTable(tb =>
                {
                    tb.HasComment("MLCPlanSer, RadiationSer, CompensatorSer, and FieldVariationSer are mutually exclusive.");
                    tb.HasTrigger("tI_Matrix");
                    tb.HasTrigger("tU_Matrix");
                });

            entity.Property(e => e.MatrixSer).ValueGeneratedNever();
            entity.Property(e => e.CompensatorSer).HasComment("Identifies the compensator to which this transmission matrix belongs. Foreign key to Compensator.CompensatorSer.");
            entity.Property(e => e.FieldVariationSer).HasComment("This FK relation allows storing IMRT fluence matrices specific to a field variation. This allows a field variation to represent variation in fluence space.");
            
                
                
            entity.Property(e => e.MatrixDataType).HasComment("Describes the data type of the matrix. Defined values are \r\nTransmission/Thickness/Energy/Compensator Distal End/Target Distal End/Target Proximal End/Fluence");
            entity.Property(e => e.MlcplanSer).HasComment("Identifies the MLC plan to which this transmission matrix belongs. Foreign key to MLCPLan.MLCPlanSer.");
            entity.Property(e => e.RadiationSer).HasComment("Identifies the field to which this transmission matrix belongs. Foreign key to ExternalField.RadiationSer");

            entity.HasOne(d => d.CompensatorSerNavigation).WithMany(p => p.Matrix).HasConstraintName("FKCompensator_Matrix");

            entity.HasOne(d => d.FieldVariationSerNavigation).WithMany(p => p.Matrix).HasConstraintName("FKFieldVariation_Matrix");

            entity.HasOne(d => d.MlcplanSerNavigation).WithMany(p => p.Matrix).HasConstraintName("FKMLCPlan_Matrix");

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.Matrix).HasConstraintName("FKExternalField_Matrix");
        });

        modelBuilder.Entity<MaxCumDose>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AgtName }).HasName("pkmax_cum_dose");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.DoseLimitingFlag).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<MaxSyringeVol>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.AdmnRoute }).HasName("pkmax_syringe_vol");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AdmnRouteNavigation).WithMany(p => p.MaxSyringeVol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_max_syringe_vol");

            entity.HasOne(d => d.SyringeVolUomNavigation).WithMany(p => p.MaxSyringeVol).HasConstraintName("fk2_max_syringe_vol");
        });

        modelBuilder.Entity<MddfDictBaseFormulation>(entity =>
        {
            entity.HasKey(e => e.IBaseFormulationId).HasName("pkMDDF_dictBaseFormulation");

            entity.Property(e => e.IBaseFormulationId).ValueGeneratedNever();
            entity.Property(e => e.SBaseFormulationAbbrev).IsFixedLength();
            entity.Property(e => e.SBaseFormulationText).IsFixedLength();
        });

        modelBuilder.Entity<MddfDictQualifier>(entity =>
        {
            entity.HasKey(e => e.IQualifierId).HasName("pk_MDDF_dictQualifier");

            entity.Property(e => e.IQualifierId).ValueGeneratedNever();
            entity.Property(e => e.SQualifierAbbrev).IsFixedLength();
            entity.Property(e => e.SQualifierText).IsFixedLength();
        });

        modelBuilder.Entity<MddfLinkRouteProduct>(entity =>
        {
            entity.HasKey(e => new { e.IProductId, e.IRoutePrescribedId, e.IRouteStatusId, e.IRouteMessageSetId }).HasName("pkMDDF_linkRouteProduct");
        });

        modelBuilder.Entity<MddfProduct>(entity =>
        {
            entity.HasKey(e => e.IProductId).HasName("pk_MDDF_product");

            entity.Property(e => e.IProductId).ValueGeneratedNever();
            entity.Property(e => e.SName).IsFixedLength();
            entity.Property(e => e.SOrderNo).IsFixedLength();
            entity.Property(e => e.SPreferredDisplayName).IsFixedLength();
            entity.Property(e => e.SnameWithQualifier).IsFixedLength();
            entity.Property(e => e.UpperDrugName).IsFixedLength();
        });

        modelBuilder.Entity<MddfRegForms>(entity =>
        {
            entity.HasKey(e => new { e.IBaseFormulationId, e.RegionCode, e.LanguageId }).HasName("pkMDDF_reg_forms");
        });

        modelBuilder.Entity<MddfRegProduct>(entity =>
        {
            entity.HasKey(e => new { e.Searchkey, e.RegionCode, e.LanguageId }).HasName("pkMDDF_reg_product");

            entity.Property(e => e.DeaClassCd).IsFixedLength();
            entity.Property(e => e.FdbGpi).IsFixedLength();
        });

        modelBuilder.Entity<MddfRegRoutes>(entity =>
        {
            entity.HasKey(e => new { e.IRoutePrescribedId, e.RegionCode, e.LanguageId }).HasName("pkMDDF_reg_routes");
        });

        modelBuilder.Entity<MedAmtcncpt>(entity =>
        {
            entity.HasKey(e => e.ConceptTypeId).HasName("pk_med_amtcncpt");
        });

        modelBuilder.Entity<MedAmtexttxt>(entity =>
        {
            entity.HasKey(e => new { e.ExternalSource, e.ExternalSourceCode, e.TextLineSequence }).HasName("pk_med_amtexttxt");
        });

        modelBuilder.Entity<MedAmtinrel>(entity =>
        {
            entity.HasKey(e => new { e.ConceptTypeId1, e.ConceptValue1, e.ConceptTypeId2, e.ConceptValue2 }).HasName("pk_med_amtinrel");
        });

        modelBuilder.Entity<MedAmtxref>(entity =>
        {
            entity.HasKey(e => new { e.ExternalSource, e.ExternalSourceCode, e.ConceptTypeId, e.ConceptValue }).HasName("pk_med_amtxref");
        });

        modelBuilder.Entity<MedConcept>(entity =>
        {
            entity.HasKey(e => e.MedConceptId).HasName("pkmed_concept");

            entity.Property(e => e.MedConceptId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<MedDict>(entity =>
        {
            entity.HasKey(e => e.FieldId).HasName("pkmed_dict");

            entity.Property(e => e.FieldId).IsFixedLength();
            entity.Property(e => e.ActivityCd).IsFixedLength();
            entity.Property(e => e.DecPlaces).IsFixedLength();
            entity.Property(e => e.DelFlag).IsFixedLength();
            entity.Property(e => e.FieldAbrFlag).IsFixedLength();
            entity.Property(e => e.FieldDesc).IsFixedLength();
            entity.Property(e => e.FieldLength).IsFixedLength();
            entity.Property(e => e.FieldType).IsFixedLength();
            entity.Property(e => e.FieldValFlag).IsFixedLength();
            entity.Property(e => e.ImpDecFlag).IsFixedLength();
            entity.Property(e => e.LastChgDate).IsFixedLength();
            entity.Property(e => e.Reserve).IsFixedLength();
        });

        modelBuilder.Entity<MedGppc>(entity =>
        {
            entity.HasKey(e => e.Gppc).HasName("pkmed_gppc");

            entity.Property(e => e.Gppc).IsFixedLength();
            entity.Property(e => e.ActivityCd).IsFixedLength();
            entity.Property(e => e.DelFlag).IsFixedLength();
            entity.Property(e => e.Gpi).IsFixedLength();
            entity.Property(e => e.LastChgDate).IsFixedLength();
            entity.Property(e => e.PkgDescCd).IsFixedLength();
            entity.Property(e => e.PkgQuantity).IsFixedLength();
            entity.Property(e => e.PkgSize).IsFixedLength();
            entity.Property(e => e.PkgSizeUom).IsFixedLength();
            entity.Property(e => e.Reserve).IsFixedLength();
            entity.Property(e => e.UnitDose).IsFixedLength();
        });

        modelBuilder.Entity<MedName>(entity =>
        {
            entity.HasKey(e => e.DrugDescId).HasName("pkmed_name");

            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.ActivityCd).IsFixedLength();
            entity.Property(e => e.BioeqCode).IsFixedLength();
            entity.Property(e => e.BrandNameCode).IsFixedLength();
            entity.Property(e => e.CtrlSbstCode).IsFixedLength();
            entity.Property(e => e.DelFlag).IsFixedLength();
            entity.Property(e => e.DrugName).IsFixedLength();
            entity.Property(e => e.EfficacyCode).IsFixedLength();
            entity.Property(e => e.Form).IsFixedLength();
            entity.Property(e => e.GnrcCode).IsFixedLength();
            entity.Property(e => e.Gpi).IsFixedLength();
            entity.Property(e => e.Kdc).IsFixedLength();
            entity.Property(e => e.KdcFlag).IsFixedLength();
            entity.Property(e => e.LastChgDt).IsFixedLength();
            entity.Property(e => e.LegendIndCode).IsFixedLength();
            entity.Property(e => e.NameSrcCode).IsFixedLength();
            entity.Property(e => e.NewDdi).IsFixedLength();
            entity.Property(e => e.OldDdi).IsFixedLength();
            entity.Property(e => e.Reserve).IsFixedLength();
            entity.Property(e => e.Route).IsFixedLength();
            entity.Property(e => e.ScreenableFlag).IsFixedLength();
            entity.Property(e => e.Strength).IsFixedLength();
            entity.Property(e => e.UnitOfMeas).IsFixedLength();
            entity.Property(e => e.UpperDrugName).IsFixedLength();
        });

        modelBuilder.Entity<MedNdc>(entity =>
        {
            entity.HasKey(e => e.NdcUpcHriCd).HasName("pkmed_ndc");

            entity.Property(e => e.NdcUpcHriCd).IsFixedLength();
            entity.Property(e => e.ActivityCd).IsFixedLength();
            entity.Property(e => e.ClinicPackCd).IsFixedLength();
            entity.Property(e => e.DeaClassCd).IsFixedLength();
            entity.Property(e => e.DelFlag).IsFixedLength();
            entity.Property(e => e.DesiCd).IsFixedLength();
            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.Gppc).IsFixedLength();
            entity.Property(e => e.IdNoTypeCd).IsFixedLength();
            entity.Property(e => e.InnerpackCd).IsFixedLength();
            entity.Property(e => e.ItemStatusFlag).IsFixedLength();
            entity.Property(e => e.Kdc).IsFixedLength();
            entity.Property(e => e.KdcFlag).IsFixedLength();
            entity.Property(e => e.LabelerCd).IsFixedLength();
            entity.Property(e => e.LastChgDt).IsFixedLength();
            entity.Property(e => e.MultiSrceCd).IsFixedLength();
            entity.Property(e => e.NameTypeCd).IsFixedLength();
            entity.Property(e => e.NewKeyCd).IsFixedLength();
            entity.Property(e => e.OldKeyCd).IsFixedLength();
            entity.Property(e => e.PriceSpreadCd).IsFixedLength();
            entity.Property(e => e.ReimburseInd).IsFixedLength();
            entity.Property(e => e.RepackageCd).IsFixedLength();
            entity.Property(e => e.Reserve).IsFixedLength();
            entity.Property(e => e.RxOtcCd).IsFixedLength();
            entity.Property(e => e.TeeCd).IsFixedLength();
            entity.Property(e => e.ThrdPartyRstrCd).IsFixedLength();
        });

        modelBuilder.Entity<MedPname>(entity =>
        {
            entity.HasKey(e => e.ParId).HasName("pkmed_pname");

            entity.Property(e => e.ParId).ValueGeneratedNever();
            entity.Property(e => e.ParName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<MedRxnorm>(entity =>
        {
            entity.HasKey(e => e.MedRxnormId).HasName("pkmed_rxnorm");

            entity.Property(e => e.MedRxnormId).ValueGeneratedNever();
            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<MedTcGpi>(entity =>
        {
            entity.HasKey(e => new { e.TcgpiKey, e.RecType }).HasName("pkmed_tc_gpi");

            entity.Property(e => e.TcgpiKey).IsFixedLength();
            entity.Property(e => e.RecType).IsFixedLength();
            entity.Property(e => e.ActivityCd).IsFixedLength();
            entity.Property(e => e.ClsDesc).IsFixedLength();
            entity.Property(e => e.DelFlag).IsFixedLength();
            entity.Property(e => e.LastChgDate).IsFixedLength();
            entity.Property(e => e.Reserve).IsFixedLength();
            entity.Property(e => e.TcgpiName).IsFixedLength();
        });

        modelBuilder.Entity<MedVal>(entity =>
        {
            entity.HasKey(e => e.MedValId).HasName("pkmed_val");

            entity.Property(e => e.MedValId).ValueGeneratedNever();
            entity.Property(e => e.ActivityCd).IsFixedLength();
            entity.Property(e => e.DelFlag).IsFixedLength();
            entity.Property(e => e.FieldId).IsFixedLength();
            entity.Property(e => e.FieldValue).IsFixedLength();
            entity.Property(e => e.LanguageCd).IsFixedLength();
            entity.Property(e => e.LastChgDt).IsFixedLength();
            entity.Property(e => e.Reserve).IsFixedLength();
            entity.Property(e => e.ValueAbrev).IsFixedLength();
            entity.Property(e => e.ValueDesc).IsFixedLength();
        });

        modelBuilder.Entity<MergeCat>(entity =>
        {
            entity.HasKey(e => e.MergeCat1).HasName("pkmerge_cat");

            entity.Property(e => e.MergeCat1).ValueGeneratedNever();
            entity.Property(e => e.MergeCatDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.MessageId).HasName("pkmessage");

            entity.ToTable("message", tb =>
                {
                    tb.HasTrigger("tD_message");
                    tb.HasTrigger("tU_message");
                });

            entity.Property(e => e.MessageId).ValueGeneratedNever();
            entity.Property(e => e.MessageSubject).IsFixedLength();
            entity.Property(e => e.MessageTyp).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.ThreadId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Message1>(entity =>
        {
            entity.HasKey(e => e.MessageSer).HasName("XPKMessage");

            entity.ToTable("Message", tb =>
                {
                    tb.HasTrigger("tD_Message");
                    tb.HasTrigger("tI_Message");
                    tb.HasTrigger("tU_Message");
                });

            entity.Property(e => e.MessageSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.Message1)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKResource_Message");
        });

        modelBuilder.Entity<MessageAttachment>(entity =>
        {
            entity.HasKey(e => e.MessageAttachmentId).HasName("pkmessage_attachment");

            entity.Property(e => e.MessageAttachmentId).ValueGeneratedNever();
            entity.Property(e => e.ImgDcmntId).IsFixedLength();
            entity.Property(e => e.MessageAttachmentFileName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Message).WithMany(p => p.MessageAttachment).HasConstraintName("fk1_message_attachment");
        });

        modelBuilder.Entity<MessageAttribute>(entity =>
        {
            entity.HasKey(e => e.MessageAttributeId).HasName("pkmessage_attribute");

            entity.Property(e => e.MessageAttributeId).ValueGeneratedNever();
            entity.Property(e => e.ArchivedInd).IsFixedLength();
            entity.Property(e => e.MessageRecipientTyp).IsFixedLength();
            entity.Property(e => e.MessageStatusDesc).IsFixedLength();
            entity.Property(e => e.ReadInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.MessageContact).WithMany(p => p.MessageAttribute)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_message_attribute");

            entity.HasOne(d => d.Message).WithMany(p => p.MessageAttribute)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_message_attribute");
        });

        modelBuilder.Entity<MessageContact>(entity =>
        {
            entity.HasKey(e => e.MessageContactId).HasName("pkmessage_contact");

            entity.Property(e => e.MessageContactId).ValueGeneratedNever();
            entity.Property(e => e.DirectAddress).IsFixedLength();
            entity.Property(e => e.DirectSmtpAddress).IsFixedLength();
            entity.Property(e => e.DisplayName).IsFixedLength();
            entity.Property(e => e.InternalContactId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<MessageDelegate>(entity =>
        {
            entity.HasKey(e => new { e.StkhId, e.DelegateStkhId, e.TransLogTstamp }).HasName("pkmessage_delegate");

            entity.ToTable("message_delegate", tb =>
                {
                    tb.HasTrigger("tD_message_delegate");
                    tb.HasTrigger("tU_message_delegate");
                });

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.DelegateStkhId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<MessageDelegateMh>(entity =>
        {
            entity.HasKey(e => new { e.StkhId, e.DelegateStkhId, e.TransLogTstamp, e.RevisionNo }).HasName("pkmessage_delegate_mh");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.DelegateStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<MessageMh>(entity =>
        {
            entity.HasKey(e => new { e.MessageId, e.RevisionNo }).HasName("pkmessage_mh");

            entity.Property(e => e.MessageSubject).IsFixedLength();
            entity.Property(e => e.MessageTyp).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ThreadId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<MillingMachine>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKMillingMachine");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_MillingMachine");
                    tb.HasTrigger("tI_MillingMachine");
                    tb.HasTrigger("tU_MillingMachine");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.MillingMachine).HasConstraintName("FKMachine_MillingMachine");
        });

        modelBuilder.Entity<Mlc>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKMLC");

            entity.ToTable("MLC", tb =>
                {
                    tb.HasTrigger("tD_MLC");
                    tb.HasTrigger("tI_MLC");
                    tb.HasTrigger("tU_MLC");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithOne(p => p.Mlc).HasConstraintName("FKAddOn_MLC");
        });

        modelBuilder.Entity<Mlcbank>(entity =>
        {
            entity.HasKey(e => e.MlcbankSer).HasName("XPKMLCBank");

            entity.ToTable("MLCBank", tb =>
                {
                    tb.HasTrigger("tD_MLCBank");
                    tb.HasTrigger("tI_MLCBank");
                    tb.HasTrigger("tU_MLCBank");
                });

            entity.Property(e => e.MlcbankSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.AddOnSerNavigation).WithMany(p => p.Mlcbank).HasConstraintName("FKMLC_MLCBank");
        });

        modelBuilder.Entity<Mlcleaf>(entity =>
        {
            entity.HasKey(e => e.MlcleafSer).HasName("XPKMLCLeaf");

            entity.ToTable("MLCLeaf", tb =>
                {
                    tb.HasTrigger("tI_MLCLeaf");
                    tb.HasTrigger("tU_MLCLeaf");
                });

            entity.Property(e => e.MlcleafSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.MlcbankSerNavigation).WithMany(p => p.Mlcleaf).HasConstraintName("FKMLCBank_MLCLeaf");
        });

        modelBuilder.Entity<Mlcplan>(entity =>
        {
            entity.HasKey(e => e.MlcplanSer).HasName("XPKMLCPlan");

            entity.ToTable("MLCPlan", tb =>
                {
                    tb.HasTrigger("tD_MLCPlan");
                    tb.HasTrigger("tD_MLCPlan_PatientEditingLog");
                    tb.HasTrigger("tD_MLCPlan_VaBusinessLogic");
                    tb.HasTrigger("tI_MLCPlan");
                    tb.HasTrigger("tI_MLCPlan_PatientEditingLog");
                    tb.HasTrigger("tI_MLCPlan_VaBusinessLogic");
                    tb.HasTrigger("tU_MLCPlan");
                    tb.HasTrigger("tU_MLCPlan_PatientEditingLog");
                    tb.HasTrigger("tU_MLCPlan_VaBusinessLogic");
                });

            entity.Property(e => e.MlcplanSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.Mlcplan).HasConstraintName("FKExternalFieldCommon_MLCPlan");
        });

        modelBuilder.Entity<MnfstnCd>(entity =>
        {
            entity.HasKey(e => e.MnfstnCd1).HasName("pkmnfstn_cd");

            entity.Property(e => e.MnfstnCd1).IsFixedLength();
            entity.Property(e => e.MnfstnDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<MobilePhoneProvider>(entity =>
        {
            entity.HasKey(e => e.MobilePhoneProviderSer).HasName("XPKMobilePhoneProvider");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_MobilePhoneProvider");
                    tb.HasTrigger("tU_MobilePhoneProvider");
                });

            entity.Property(e => e.MobilePhoneProviderSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<MobileTelProv>(entity =>
        {
            entity.HasKey(e => e.MobileTelProvId).HasName("pkmobile_tel_prov");

            entity.Property(e => e.MobileTelProvId).ValueGeneratedNever();
            entity.Property(e => e.MobileTelProvName).IsFixedLength();
            entity.Property(e => e.SmsDomain).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<MrPtAccess>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.UserInstId, e.InstId, e.PtId }).HasName("pk_mr_pt_access");

            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<MrPtAccessExternal>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.UserInstId, e.InstId, e.PtKeyValue }).HasName("pkmr_pt_access_external");

            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PtLastName).IsFixedLength();
        });

        modelBuilder.Entity<MrTestResult>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.TypOfTest, e.CompName, e.ResultUseTyp }).HasName("pkmr_test_result");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.ThresholdInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ResultUseTypNavigation).WithMany(p => p.MrTestResult)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_mr_test_result");
        });

        modelBuilder.Entity<MrTrAsmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.TrTyp, e.TrCompName, e.ResultUseTyp, e.PtTrAsmtId }).HasName("pkmr_tr_asmt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TrCompName).IsFixedLength();
            entity.Property(e => e.TrSubCompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ResultUseTypNavigation).WithMany(p => p.MrTrAsmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_mr_tr_asmt");
        });

        modelBuilder.Entity<MsgLog>(entity =>
        {
            entity.HasKey(e => e.MsgId).HasName("pkmsg_log");

            entity.Property(e => e.MsgId).ValueGeneratedNever();
            entity.Property(e => e.AuthorizedStkhId).IsFixedLength();
            entity.Property(e => e.CompletedInd).IsFixedLength();
            entity.Property(e => e.RemId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<MsgSendLog>(entity =>
        {
            entity.HasKey(e => new { e.MsgId, e.MsgMthdTyp }).HasName("pkmsg_send_log");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<MuErrorLog>(entity =>
        {
            entity.HasKey(e => new { e.MuErrorLogId, e.CompliancePrdId }).HasName("pkmu_error_log");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<NameCd>(entity =>
        {
            entity.HasKey(e => new { e.NameCd1, e.StkhCd }).HasName("pkname_cd");

            entity.Property(e => e.NameCd1).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.DfltInd).IsFixedLength();
            entity.Property(e => e.NameCdDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<NextKeyTable>(entity =>
        {
            entity.HasKey(e => e.KeyName).HasName("XPKNextKeyTable");
        });

        modelBuilder.Entity<NextOfKin>(entity =>
        {
            entity.HasKey(e => e.NokReltn).HasName("pknext_of_kin");

            entity.Property(e => e.NokReltn).ValueGeneratedNever();
            entity.Property(e => e.FamMbrInd).IsFixedLength();
            entity.Property(e => e.ReltnDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<NokRelationship>(entity =>
        {
            entity.HasKey(e => e.NokRelationshipId).HasName("pknok_relationship");

            entity.Property(e => e.NokRelationshipId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BaseTypNavigation).WithMany(p => p.NokRelationship)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_nok_relationship");
        });

        modelBuilder.Entity<NonBusinessDay>(entity =>
        {
            entity.HasKey(e => e.NonBusinessDayId).HasName("pknon_business_day");

            entity.Property(e => e.NonBusinessDayId).ValueGeneratedNever();
            entity.Property(e => e.NonBusinessDayDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<NonScheduledActivity>(entity =>
        {
            entity.HasKey(e => e.NonScheduledActivitySer).HasName("XPKTask");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_NonScheduledActivity");
                    tb.HasTrigger("tI_NonScheduledActivity");
                    tb.HasTrigger("tU_NonScheduledActivity");
                });

            entity.Property(e => e.NonScheduledActivitySer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityInstanceSerNavigation).WithMany(p => p.NonScheduledActivity).HasConstraintName("FKActivityInstance_NonScheduledActivity");

            entity.HasOne(d => d.CreatedByResourceSerNavigation).WithMany(p => p.NonScheduledActivity)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKResource_NonscheduledActivity");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.NonScheduledActivity)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKPatient_NonScheduledActivity");

            entity.HasOne(d => d.RecurrenceRuleSerNavigation).WithMany(p => p.NonScheduledActivity).HasConstraintName("FKRecurrenceRule_NonScheduledActivity");
        });

        modelBuilder.Entity<NonScheduledActivityMh>(entity =>
        {
            entity.HasKey(e => new { e.NonScheduledActivitySer, e.NonScheduledActivityRevCount }).HasName("XPKNonScheduledActivityMH");

            entity.ToTable("NonScheduledActivityMH", tb =>
                {
                    tb.HasTrigger("tD_NonScheduledActivityMH");
                    tb.HasTrigger("tI_NonScheduledActivityMH");
                    tb.HasTrigger("tU_NonScheduledActivityMH");
                });

            
                
                

            entity.HasOne(d => d.NonScheduledActivitySerNavigation).WithMany(p => p.NonScheduledActivityMh).HasConstraintName("FKNonScheduledActivity_NonScheduledActivityMH");
        });

        modelBuilder.Entity<NoteLevel>(entity =>
        {
            entity.HasKey(e => e.NoteLevel1).HasName("pknote_level");

            entity.Property(e => e.NoteLevel1).ValueGeneratedNever();
            entity.Property(e => e.NoteLevelDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<NoteTyp>(entity =>
        {
            entity.HasKey(e => e.NoteTyp1).HasName("pknote_typ");

            entity.Property(e => e.NoteTyp1).ValueGeneratedNever();
            entity.Property(e => e.NoteTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<ObjectPointer>(entity =>
        {
            entity.HasKey(e => e.ObjectPointerSer).HasName("XPKObjectPointer");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ObjectPointer");
                    tb.HasTrigger("tI_ObjectPointer");
                    tb.HasTrigger("tU_ObjectPointer");
                });

            entity.Property(e => e.ObjectPointerSer).ValueGeneratedNever();

            entity.HasOne(d => d.DcobjectPointerSeriesSerNavigation).WithMany(p => p.ObjectPointer).HasConstraintName("FKDCObjectPointerSeries_ObjectPointer");

            entity.HasOne(d => d.DicomLocationSerNavigation).WithMany(p => p.ObjectPointer).HasConstraintName("FKDicomLocation_ObjectPointer");

            entity.HasOne(d => d.SopclassSerNavigation).WithMany(p => p.ObjectPointer).HasConstraintName("FKSOPClass_ObjectPointer");
        });

        modelBuilder.Entity<ObsoleteObject>(entity =>
        {
            entity.HasKey(e => e.ObsoleteObjectSer).HasName("XPKObsoleteObject");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ObsoleteObject");
                    tb.HasTrigger("tU_ObsoleteObject");
                });

            entity.Property(e => e.ObsoleteObjectSer).ValueGeneratedNever();

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.ObsoleteObject).HasConstraintName("FKPatient_ObsoleteObject");
        });

        modelBuilder.Entity<OncoPtFsCycle>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.OncoPtFsDetId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.OncoPtFsDet).WithMany(p => p.OncoPtFsCycle)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_onco_pt_fs_cycle");
        });

        modelBuilder.Entity<OncoPtFsDet>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.OncoPtFsDetId).IsFixedLength();
            entity.Property(e => e.ClinicalTrialNum).IsFixedLength();
            entity.Property(e => e.CurrentCycle).IsFixedLength();
            entity.Property(e => e.OncoRegimenTypCd).IsFixedLength();
            entity.Property(e => e.RegimenName).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.OncoRegimenTypCdNavigation).WithMany(p => p.OncoPtFsDet).HasConstraintName("fk2_onco_pt_fs_det");

            entity.HasOne(d => d.Pt).WithMany(p => p.OncoPtFsDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_onco_pt_fs_det");
        });

        modelBuilder.Entity<OncoPtFsDrug>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.OncoPtFsDetId).IsFixedLength();
            entity.Property(e => e.OncoPtFsDrugId).IsFixedLength();
            entity.Property(e => e.DrugName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.OncoPtFsDet).WithMany(p => p.OncoPtFsDrug)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_onco_pt_fs_drug");
        });

        modelBuilder.Entity<OncoPtFsDrugDet>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.OncoPtFsDetId).IsFixedLength();
            entity.Property(e => e.OncoPtFsDrugId).IsFixedLength();
            entity.Property(e => e.OncoPtFsDrugDetId).IsFixedLength();
            entity.Property(e => e.FluidDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DoseUomNavigation).WithMany(p => p.OncoPtFsDrugDetDoseUomNavigation).HasConstraintName("fk2_onco_pt_fs_drug_det");

            entity.HasOne(d => d.FluidUomNavigation).WithMany(p => p.OncoPtFsDrugDetFluidUomNavigation).HasConstraintName("fk3_onco_pt_fs_drug_det");

            entity.HasOne(d => d.OncoPtFsDrug).WithMany(p => p.OncoPtFsDrugDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_onco_pt_fs_drug_det");
        });

        modelBuilder.Entity<OncoPtFsDx>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.OncoPtFsDetId).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IcdDx).WithMany(p => p.OncoPtFsDx)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_onco_pt_fs_dx");

            entity.HasOne(d => d.OncoPtFsDet).WithMany(p => p.OncoPtFsDx)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_onco_pt_fs_dx");
        });

        modelBuilder.Entity<OncoRegimenTyp>(entity =>
        {
            entity.Property(e => e.OncoRegimenTypCd).IsFixedLength();
            entity.Property(e => e.RegimenTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<OnlineLog>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid }).HasName("pkonline_log");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AppName).IsFixedLength();
            entity.Property(e => e.AppSessionId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.UserDbId).IsFixedLength();

            entity.HasOne(d => d.AppNameNavigation).WithMany(p => p.OnlineLog)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_online_log");
        });

        modelBuilder.Entity<OperatingLimit>(entity =>
        {
            entity.HasKey(e => e.OperatingLimitSer).HasName("XPKOperatingLimit");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_OperatingLimit");
                    tb.HasTrigger("tU_OperatingLimit");
                });

            entity.Property(e => e.OperatingLimitSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PrimaryFluenceModeSerNavigation).WithMany(p => p.OperatingLimit).HasConstraintName("FKPrimaryFluenceMode_OperatingLimit");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.OperatingLimit)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKMachine_OperatingLimit");

            entity.HasOne(d => d.TechniqueSerNavigation).WithMany(p => p.OperatingLimit).HasConstraintName("FKTechnique_OperatingLimit");
        });

        modelBuilder.Entity<OptionalDemgr>(entity =>
        {
            entity.HasKey(e => e.PtId).HasName("pkoptional_demgr");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AutopsyRqst).IsFixedLength();
            entity.Property(e => e.BirthPlace).IsFixedLength();
            entity.Property(e => e.DnhStatus).IsFixedLength();
            entity.Property(e => e.DnrStatus).IsFixedLength();
            entity.Property(e => e.EducationalLevel).IsFixedLength();
            entity.Property(e => e.EthnicGroup).IsFixedLength();
            entity.Property(e => e.FathersFullName).IsFixedLength();
            entity.Property(e => e.FeedingRstr).IsFixedLength();
            entity.Property(e => e.HlthCareDpoa).IsFixedLength();
            entity.Property(e => e.Language).IsFixedLength();
            entity.Property(e => e.LanguageCd).IsFixedLength();
            entity.Property(e => e.LivingWill).IsFixedLength();
            entity.Property(e => e.MaritalStatus).IsFixedLength();
            entity.Property(e => e.MedRstr).IsFixedLength();
            entity.Property(e => e.MomFullName).IsFixedLength();
            entity.Property(e => e.MomMaidenName).IsFixedLength();
            entity.Property(e => e.Occupation).IsFixedLength();
            entity.Property(e => e.OrganDonor).IsFixedLength();
            entity.Property(e => e.PresentEmprName).IsFixedLength();
            entity.Property(e => e.Race).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TxRstr).IsFixedLength();
        });

        modelBuilder.Entity<OptionalEthnicity>(entity =>
        {
            entity.HasKey(e => e.OptionalEthnicityId).HasName("PK__optional__51ABC5D331A3462A");

            entity.Property(e => e.OptionalEthnicityId).ValueGeneratedNever();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DefinedDemgr).WithMany(p => p.OptionalEthnicity).HasConstraintName("fk_defined_demgr_id");

            entity.HasOne(d => d.EthnicGroup).WithMany(p => p.OptionalEthnicity).HasConstraintName("fk_ethnic_group_id");
        });

        modelBuilder.Entity<OptionalRace>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.RaceDesc }).HasName("pkoptional_race");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RaceDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<OptxPrinterTag>(entity =>
        {
            entity.HasKey(e => e.InternalPrinterName).HasName("pkoptx_printer_tag");

            entity.Property(e => e.InternalPrinterName).IsFixedLength();
            entity.Property(e => e.OptxPrinterTag1).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<OrgTyp>(entity =>
        {
            entity.HasKey(e => e.OrgTyp1).HasName("pkorg_typ");

            entity.Property(e => e.OrgTyp1).ValueGeneratedNever();
            entity.Property(e => e.OrgDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<OtherName>(entity =>
        {
            entity.HasKey(e => new { e.AgtName, e.OtherName1 }).HasName("pkother_name");

            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.OtherName1).IsFixedLength();
            entity.Property(e => e.MfgName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpperAgtName).IsFixedLength();

            entity.HasOne(d => d.AgtNameNavigation).WithMany(p => p.OtherName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_other_name");

            entity.HasOne(d => d.OtherNameTypNavigation).WithMany(p => p.OtherName).HasConstraintName("fk2_other_name");
        });

        modelBuilder.Entity<OtherNameTyp>(entity =>
        {
            entity.HasKey(e => e.OtherNameTyp1).HasName("pkother_name_typ");

            entity.Property(e => e.OtherNameTyp1).ValueGeneratedNever();
            entity.Property(e => e.OtherNameDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<OverbookCd>(entity =>
        {
            entity.HasKey(e => e.OverbookCd1).HasName("pkoverbook_cd");

            entity.Property(e => e.OverbookCd1).IsFixedLength();
            entity.Property(e => e.OverbookDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ParameterType>(entity =>
        {
            entity.HasKey(e => e.ParameterTypeSer).HasName("XPKParameterType");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ParameterType");
                    tb.HasTrigger("tU_ParameterType");
                });

            entity.Property(e => e.ParameterTypeSer).ValueGeneratedNever();
        });

        modelBuilder.Entity<Password>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.EffDate }).HasName("pkpassword");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.Password1).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.UseridNavigation).WithMany(p => p.Password)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_password");
        });

        modelBuilder.Entity<PatEdHstryRelevance>(entity =>
        {
            entity.HasKey(e => e.PatEdHstryRelevanceSer).HasName("XPKPatEdHstryRelevance");

            entity.Property(e => e.PatEdHstryRelevanceSer).ValueGeneratedNever();
        });

        modelBuilder.Entity<Patient>(entity =>
        {
            entity.HasKey(e => e.PatientSer).HasName("XPKPatient");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Patient");
                    tb.HasTrigger("tI_Patient");
                    tb.HasTrigger("tU_Patient");
                    tb.HasTrigger("tU_Patient_PatientEditingLog");
                });

            entity.Property(e => e.PatientSer).ValueGeneratedNever();
            
                
                
            entity.Property(e => e.Sex).IsFixedLength();

            entity.HasOne(d => d.MobilePhoneProviderSerNavigation).WithMany(p => p.Patient).HasConstraintName("FKMobilePhoneProvider_Patient");
        });

        modelBuilder.Entity<PatientActuals>(entity =>
        {
            entity.HasKey(e => e.PatientSer).HasName("XPKPatientActuals");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PatientActuals");
                    tb.HasTrigger("tU_PatientActuals");
                });

            entity.Property(e => e.PatientSer).ValueGeneratedNever();
            entity.Property(e => e.FirstNameUpper).UseCollation("Latin1_General_100_CI_AI_SC");
            entity.Property(e => e.LastNameUpper).UseCollation("Latin1_General_100_CI_AI_SC");
            entity.Property(e => e.PatientId2Upper).UseCollation("Latin1_General_100_CI_AI_SC");
            entity.Property(e => e.PatientIdUpper).UseCollation("Latin1_General_100_CI_AI_SC");

            entity.HasOne(d => d.PatientSerNavigation).WithOne(p => p.PatientActuals)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_PatientActuals");
        });

        modelBuilder.Entity<PatientAddress>(entity =>
        {
            entity.HasKey(e => new { e.PatientSer, e.AddressSer }).HasName("XPKPatientAddress");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PatientAddress");
                    tb.HasTrigger("tU_PatientAddress");
                });

            
                
                

            entity.HasOne(d => d.AddressSerNavigation).WithMany(p => p.PatientAddress).HasConstraintName("FKAddress_PatientAddress");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.PatientAddress)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_PatientAddress");
        });

        modelBuilder.Entity<PatientAuthorization>(entity =>
        {
            entity.HasKey(e => e.PatientAuthorizationSer).HasName("XPKEPatientAuthorization");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PatientAuthorization");
                    tb.HasTrigger("tU_PatientAuthorization");
                });

            entity.Property(e => e.PatientAuthorizationSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PatientPayorSerNavigation).WithMany(p => p.PatientAuthorization).HasConstraintName("FKPatientPayor_PatientAuthorization");
        });

        modelBuilder.Entity<PatientBenefitCache>(entity =>
        {
            entity.HasKey(e => e.PatientBenefitCacheId).HasName("XPK_PatientBenefitCacheId");

            entity.Property(e => e.PatientBenefitCacheId).ValueGeneratedNever();
            entity.Property(e => e.PatientId).IsFixedLength();
        });

        modelBuilder.Entity<PatientDepartment>(entity =>
        {
            entity.HasKey(e => e.PatientDepartmentSer).HasName("XPKPatientDepartment");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PatientDepartment");
                    tb.HasTrigger("tU_PatientDepartment");
                });

            entity.Property(e => e.PatientDepartmentSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.PatientDepartment).HasConstraintName("FKDepartment_PatientDepartment");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.PatientDepartment).HasConstraintName("FKPatient_PatientDepartment");
        });

        modelBuilder.Entity<PatientDirective>(entity =>
        {
            entity.HasKey(e => e.PatientDirectiveSer).HasName("XPKPatientDirective");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PatientDirective");
                    tb.HasTrigger("tU_PatientDirective");
                });

            entity.Property(e => e.PatientDirectiveSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DirectiveSerNavigation).WithMany(p => p.PatientDirective)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKDirective_PatientDirective");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.PatientDirective)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_PatientDirective");
        });

        modelBuilder.Entity<PatientDoctor>(entity =>
        {
            entity.HasKey(e => new { e.ResourceSer, e.PatientSer }).HasName("XPKPatientOncologist");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PatientDoctor");
                    tb.HasTrigger("tU_PatientDoctor");
                });

            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.PatientDoctor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_PatientDoctor");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.PatientDoctor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKDoctor_PatientDoctor");
        });

        modelBuilder.Entity<PatientEditingLog>(entity =>
        {
            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PatientEditingLog");
                    tb.HasTrigger("tU_PatientEditingLog");
                });

            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany().HasConstraintName("FKPatient_PatientEditingLog");
        });

        modelBuilder.Entity<PatientHospital>(entity =>
        {
            entity.HasKey(e => new { e.HospitalSer, e.PatientSer }).HasName("XPKPatientInHospital");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PatientHospital");
                    tb.HasTrigger("tI_PatientHospital");
                    tb.HasTrigger("tU_PatientHospital");
                });

            
                
                

            entity.HasOne(d => d.HospitalSerNavigation).WithMany(p => p.PatientHospital)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKHospital_PatientHospital");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.PatientHospital)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_PatientHospital");
        });

        modelBuilder.Entity<PatientHospitalMh>(entity =>
        {
            entity.HasKey(e => new { e.HospitalSer, e.PatientSer, e.PatientHospitalRevCount })
                .HasName("XPKPatientHospitalMH")
                .IsClustered(false);

            entity.ToTable("PatientHospitalMH", tb =>
                {
                    tb.HasTrigger("tD_PatientHospitalMH");
                    tb.HasTrigger("tI_PatientHospitalMH");
                    tb.HasTrigger("tU_PatientHospitalMH");
                });

            entity.HasIndex(e => new { e.PatientSer, e.HospitalSer, e.PatientHospitalRevCount }, "XAK1PatientHospitalMH")
                .IsUnique()
                .IsClustered();

            
                
                

            entity.HasOne(d => d.PatientHospital).WithMany(p => p.PatientHospitalMh).HasConstraintName("FKPatientHospital_PatientHospitalMH");
        });

        modelBuilder.Entity<PatientListQueryConfiguration>(entity =>
        {
            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PatientListQueryConfigurati");
                    tb.HasTrigger("tU_PatientListQueryConfigurati");
                });

            
                
                

            entity.HasOne(d => d.ActivitySerNavigation).WithMany(p => p.PatientListQueryConfiguration).HasConstraintName("FK_ActivitySerPtistQueryConfig");

            entity.HasOne(d => d.AppUserSerNavigation).WithMany(p => p.PatientListQueryConfiguration)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AppUserSerPtistQueryConfig");
        });

        modelBuilder.Entity<PatientLocation>(entity =>
        {
            entity.HasKey(e => e.PatientLocationSer).HasName("XPKPatientLocation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PatientLocation");
                    tb.HasTrigger("tI_PatientLocation");
                    tb.HasTrigger("tU_PatientLocation");
                });

            entity.Property(e => e.PatientLocationSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.PatientLocation)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKVenue_PatientLocation");

            entity.HasOne(d => d.ScheduledActivitySerNavigation).WithMany(p => p.PatientLocation).HasConstraintName("FKScheduledActivty_PatientLocation");
        });

        modelBuilder.Entity<PatientLocationMh>(entity =>
        {
            entity.HasKey(e => new { e.PatientLocationSer, e.PatientLocationRevCount }).HasName("XPKPatientLocationMH");

            entity.ToTable("PatientLocationMH", tb =>
                {
                    tb.HasTrigger("tD_PatientLocationMH");
                    tb.HasTrigger("tI_PatientLocationMH");
                    tb.HasTrigger("tU_PatientLocationMH");
                });

            
                
                

            entity.HasOne(d => d.PatientLocationSerNavigation).WithMany(p => p.PatientLocationMh).HasConstraintName("FKPatientLocation_PatientLocationMH");
        });

        modelBuilder.Entity<PatientName>(entity =>
        {
            entity.HasKey(e => e.PatientNameSer).HasName("XPKPatientName");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PatientName");
                    tb.HasTrigger("tU_PatientName");
                });

            entity.Property(e => e.PatientNameSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.PatientName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_PatientName");
        });

        modelBuilder.Entity<PatientNote>(entity =>
        {
            entity.HasKey(e => e.PatientNoteSer).HasName("XPKPatientNote");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PatientNote_PatientEditingLog");
                    tb.HasTrigger("tI_PatientNote");
                    tb.HasTrigger("tI_PatientNote_PatientEditingLog");
                    tb.HasTrigger("tU_PatientNote");
                    tb.HasTrigger("tU_PatientNote_PatientEditingLog");
                });

            entity.Property(e => e.PatientNoteSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.PatientNote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_PatientNote");
        });

        modelBuilder.Entity<PatientParticular>(entity =>
        {
            entity.HasKey(e => e.PatientSer).HasName("XPKPatientRetireDeath");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PatientParticular");
                    tb.HasTrigger("tU_PatientParticular");
                });

            entity.Property(e => e.PatientSer).ValueGeneratedNever();

            entity.HasOne(d => d.PatientSerNavigation).WithOne(p => p.PatientParticular)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_PatientParticular");
        });

        modelBuilder.Entity<PatientPayor>(entity =>
        {
            entity.HasKey(e => e.PatientPayorSer).HasName("XPKPatientPayorInfo");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PatientPayor");
                    tb.HasTrigger("tI_PatientPayor");
                    tb.HasTrigger("tU_PatientPayor");
                });

            entity.Property(e => e.PatientPayorSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.PatientPayor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_PatientPayor");

            entity.HasOne(d => d.PayorSerNavigation).WithMany(p => p.PatientPayor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPayor_PatientPayor");
        });

        modelBuilder.Entity<PatientPayorMh>(entity =>
        {
            entity.HasKey(e => new { e.PatientPayorSer, e.PatientPayorRevCount }).HasName("XPKPatientPayorMH");

            entity.ToTable("PatientPayorMH", tb =>
                {
                    tb.HasTrigger("tD_PatientPayorMH");
                    tb.HasTrigger("tI_PatientPayorMH");
                    tb.HasTrigger("tU_PatientPayorMH");
                });

            
                
                

            entity.HasOne(d => d.PatientPayorSerNavigation).WithMany(p => p.PatientPayorMh).HasConstraintName("FKPatientPayor_PatientPayorMH");
        });

        modelBuilder.Entity<PatientRtstatus>(entity =>
        {
            entity.ToTable("PatientRTStatus", tb =>
                {
                    tb.HasTrigger("tI_PatientRTStatus");
                    tb.HasTrigger("tU_PatientRTStatus");
                });

            entity.HasOne(d => d.PatientSerNavigation).WithMany().HasConstraintName("FKPatient_PatientRTStatus");
        });

        modelBuilder.Entity<PatientStaff>(entity =>
        {
            entity.HasKey(e => new { e.ResourceSer, e.PatientSer }).HasName("XPKPatientStaff");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PatientStaff");
                    tb.HasTrigger("tU_PatientStaff");
                });

            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.PatientStaff)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_PatientStaff");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.PatientStaff)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKStaff_PatientStaff");
        });

        modelBuilder.Entity<PatientSupportDevice>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKPatientSupportDevice");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PatientSupportDevice");
                    tb.HasTrigger("tI_PatientSupportDevice");
                    tb.HasTrigger("tU_PatientSupportDevice");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.PatientSupportDevice).HasConstraintName("FKMachine_PatientSupportDevice");
        });

        modelBuilder.Entity<PatientTransportation>(entity =>
        {
            entity.HasKey(e => e.PatientTransportationSer).HasName("XPKPatientTransportation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PatientTransportation");
                    tb.HasTrigger("tU_PatientTransportation");
                });

            entity.Property(e => e.PatientTransportationSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.PatientTransportation).HasConstraintName("FKPatient_PatientTransportation");

            entity.HasOne(d => d.TransportationSerNavigation).WithMany(p => p.PatientTransportation).HasConstraintName("FKTransportation_PatientTransportation");
        });

        modelBuilder.Entity<PatientVolume>(entity =>
        {
            entity.HasKey(e => e.PatientVolumeSer).HasName("XPKPatientVolume");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PatientVolume");
                    tb.HasTrigger("tI_PatientVolume");
                    tb.HasTrigger("tU_PatientVolume");
                });

            entity.Property(e => e.PatientVolumeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.PatientVolume)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_PatientVolume");

            entity.HasOne(d => d.VolumeCodeSerNavigation).WithMany(p => p.PatientVolume).HasConstraintName("FKVolumeCode_PatientVolume");

            entity.HasOne(d => d.VolumeTypeSerNavigation).WithMany(p => p.PatientVolume)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKVolumeType_PatientVolume");
        });

        modelBuilder.Entity<Payor>(entity =>
        {
            entity.HasKey(e => e.PayorSer).HasName("XPKPayorReference");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Payor");
                    tb.HasTrigger("tI_Payor");
                    tb.HasTrigger("tU_Payor");
                });

            entity.Property(e => e.PayorSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PlanTypeSerNavigation).WithMany(p => p.Payor).HasConstraintName("FKPlanTypes_Payor");
        });

        modelBuilder.Entity<PayorAuthorization>(entity =>
        {
            entity.HasKey(e => e.PayorAuthorizationSer).HasName("XPKPayorAuthrztn");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PayorAuthorization");
                    tb.HasTrigger("tU_PayorAuthorization");
                });

            entity.Property(e => e.PayorAuthorizationSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PayorSerNavigation).WithMany(p => p.PayorAuthorization).HasConstraintName("FKPayor_PayorAuthorization");
        });

        modelBuilder.Entity<PerfTracking>(entity =>
        {
            entity.HasKey(e => e.PerfTrackingId).HasName("pkperf_tracking");

            entity.Property(e => e.PerfTrackingId).ValueGeneratedNever();
            entity.Property(e => e.AppBuildNo).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AppVersNo).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PerfTrackingTyp>(entity =>
        {
            entity.HasKey(e => e.PerfTrackingTypId).HasName("pkperf_tracking_typ");

            entity.Property(e => e.PerfTrackingTypId).ValueGeneratedNever();
            entity.Property(e => e.PerfTrackingTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PerformedProcedure>(entity =>
        {
            entity.HasKey(e => e.PerformedProcedureSer).HasName("XPKPerformedProcedure");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PerformedProcedure");
                    tb.HasTrigger("tI_PerformedProcedure");
                    tb.HasTrigger("tU_PerformedProcedure");
                });

            entity.Property(e => e.PerformedProcedureSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityInstanceSerNavigation).WithMany(p => p.PerformedProcedure)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKActivityInstance_PerformedProcedure");

            entity.HasOne(d => d.DicomcodeValueSerNavigation).WithMany(p => p.PerformedProcedure).HasConstraintName("FKDICOMCodeValue_PerformedProcedure");

            entity.HasMany(d => d.ObjectPointerSer).WithMany(p => p.PerformedProcedureSer)
                .UsingEntity<Dictionary<string, object>>(
                    "PerformedObjectPointer",
                    r => r.HasOne<ObjectPointer>().WithMany()
                        .HasForeignKey("ObjectPointerSer")
                        .HasConstraintName("FKObjectPointer_PerformedObjectPointer"),
                    l => l.HasOne<PerformedProcedure>().WithMany()
                        .HasForeignKey("PerformedProcedureSer")
                        .HasConstraintName("FKPerformedProcedure_PerformedObjectPointer"),
                    j =>
                    {
                        j.HasKey("PerformedProcedureSer", "ObjectPointerSer").HasName("XPKPerformedObjectPointer");
                        j.ToTable(tb =>
                            {
                                tb.HasTrigger("tI_PerformedObjectPointer");
                                tb.HasTrigger("tU_PerformedObjectPointer");
                            });
                        j.HasIndex(new[] { "ObjectPointerSer" }, "XIF2PerformedObjectPointer");
                    });
        });

        modelBuilder.Entity<PharmLib>(entity =>
        {
            entity.HasKey(e => e.Ncpdpid).HasName("pkpharm_lib");

            entity.Property(e => e.Ncpdpid).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.Addr1).IsFixedLength();
            entity.Property(e => e.Addr1Upper).IsFixedLength();
            entity.Property(e => e.Addr2).IsFixedLength();
            entity.Property(e => e.City).IsFixedLength();
            entity.Property(e => e.CityUpper).IsFixedLength();
            entity.Property(e => e.CrossSt).IsFixedLength();
            entity.Property(e => e.Email).IsFixedLength();
            entity.Property(e => e.Fax).IsFixedLength();
            entity.Property(e => e.LastModDt).IsFixedLength();
            entity.Property(e => e.Npi).IsFixedLength();
            entity.Property(e => e.OldSrvcLvl).IsFixedLength();
            entity.Property(e => e.Open24hrCd).IsFixedLength();
            entity.Property(e => e.PartnerAcct).IsFixedLength();
            entity.Property(e => e.PharmTyp).IsFixedLength();
            entity.Property(e => e.PhoneAlt1).IsFixedLength();
            entity.Property(e => e.PhoneAlt1Qual).IsFixedLength();
            entity.Property(e => e.PhoneAlt2).IsFixedLength();
            entity.Property(e => e.PhoneAlt2Qual).IsFixedLength();
            entity.Property(e => e.PhoneAlt3).IsFixedLength();
            entity.Property(e => e.PhoneAlt3Qual).IsFixedLength();
            entity.Property(e => e.PhoneAlt4).IsFixedLength();
            entity.Property(e => e.PhoneAlt4Qual).IsFixedLength();
            entity.Property(e => e.PhoneAlt5).IsFixedLength();
            entity.Property(e => e.PhoneAlt5Qual).IsFixedLength();
            entity.Property(e => e.PhonePrmy).IsFixedLength();
            entity.Property(e => e.RefNo1).IsFixedLength();
            entity.Property(e => e.RefNo1Qual).IsFixedLength();
            entity.Property(e => e.SrvcLvlTxt).IsFixedLength();
            entity.Property(e => e.SrvcLvlTxtChg).IsFixedLength();
            entity.Property(e => e.State).IsFixedLength();
            entity.Property(e => e.StoreName).IsFixedLength();
            entity.Property(e => e.StoreNameUpper).IsFixedLength();
            entity.Property(e => e.StoreNo).IsFixedLength();
            entity.Property(e => e.Version).IsFixedLength();
            entity.Property(e => e.ZipCd).IsFixedLength();
        });

        modelBuilder.Entity<Phase>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.PhaseSeqNo }).HasName("pkphase");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.LagInd).IsFixedLength();
            entity.Property(e => e.PhaseDesc).IsFixedLength();
            entity.Property(e => e.TrCsReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PrcsTypNavigation).WithMany(p => p.Phase).HasConstraintName("fk2_phase");

            entity.HasOne(d => d.TxPln).WithMany(p => p.Phase)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_phase");
        });

        modelBuilder.Entity<PhaseSum>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.PhaseSeqNo, e.PhaseSumTyp }).HasName("pkphase_sum");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PhaseTrRisk>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.PhaseSeqNo, e.TrRiskTyp }).HasName("pkphase_tr_risk");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TrRiskTreatInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Phase).WithMany(p => p.PhaseTrRisk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_phase_tr_risk");
        });

        modelBuilder.Entity<PhoneCd>(entity =>
        {
            entity.HasKey(e => new { e.PhoneCd1, e.StkhCd }).HasName("pkphone_cd");

            entity.Property(e => e.PhoneCd1).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.DfltInd).IsFixedLength();
            entity.Property(e => e.PhoneCdDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Photo>(entity =>
        {
            entity.HasKey(e => e.PhotoSer).HasName("XPKPhoto");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Photo");
                    tb.HasTrigger("tI_Photo");
                    tb.HasTrigger("tU_Photo");
                });

            entity.Property(e => e.PhotoSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.Photo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_Photo");
        });

        modelBuilder.Entity<PhotonCompensator>(entity =>
        {
            entity.HasKey(e => e.CompensatorSer).HasName("XPKPhotonCompensator");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PhotonCompensator");
                    tb.HasTrigger("tU_PhotonCompensator");
                });

            entity.Property(e => e.CompensatorSer).ValueGeneratedNever();

            entity.HasOne(d => d.CompensatorSerNavigation).WithOne(p => p.PhotonCompensator).HasConstraintName("FKCompensator_PhotonComensator");
        });

        modelBuilder.Entity<PhysicalMaterial>(entity =>
        {
            entity.HasKey(e => e.PhysicalMaterialSer).HasName("XPKPhysicalMaterial");

            entity.Property(e => e.PhysicalMaterialSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<PhysicianIntent>(entity =>
        {
            entity.HasKey(e => e.PhysicianIntentSer).HasName("XPKPhysicianIntent");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PhysicianIntent");
                    tb.HasTrigger("tU_PhysicianIntent");
                });

            entity.Property(e => e.PhysicianIntentSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.CourseSerNavigation).WithMany(p => p.PhysicianIntent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKCourse_PhysicianIntent");
        });

        modelBuilder.Entity<PlanConcurrency>(entity =>
        {
            entity.HasKey(e => e.PlanUid).HasName("XPKPlanConcurrency");

            entity.Property(e => e.LastItloadCrc).IsFixedLength();
            entity.Property(e => e.LastSaveCrc).IsFixedLength();
        });

        modelBuilder.Entity<PlanRelationship>(entity =>
        {
            entity.HasKey(e => e.PlanRelationshipSer).HasName("XPKPlanRelationship");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PlanRelationship_PatientEditingLog");
                    tb.HasTrigger("tI_PlanRelationship");
                    tb.HasTrigger("tI_PlanRelationship_PatientEditingLog");
                    tb.HasTrigger("tU_PlanRelationship");
                    tb.HasTrigger("tU_PlanRelationship_PatientEditingLog");
                });

            entity.Property(e => e.PlanRelationshipSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.RelatedPlanSopclassSerNavigation).WithMany(p => p.PlanRelationship).HasConstraintName("FKSOPClass_PlanRelationship");

            entity.HasOne(d => d.RelatedRtplanSerNavigation).WithMany(p => p.PlanRelationshipRelatedRtplanSerNavigation).HasConstraintName("FKPlanRelationship_RTPlan_Related");

            entity.HasOne(d => d.RtplanSerNavigation).WithMany(p => p.PlanRelationshipRtplanSerNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPlanRelationship_RTPlan");
        });

        modelBuilder.Entity<PlanSetup>(entity =>
        {
            entity.HasKey(e => e.PlanSetupSer).HasName("XPKPlanSetup");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PlanSetup");
                    tb.HasTrigger("tD_PlanSetup_PatientEditingLog");
                    tb.HasTrigger("tD_PlanSetup_VaBusinessLogic");
                    tb.HasTrigger("tI_PlanSetup");
                    tb.HasTrigger("tI_PlanSetup_PatientEditingLog");
                    tb.HasTrigger("tI_PlanSetup_VaBusinessLogic");
                    tb.HasTrigger("tU_PlanSetup");
                    tb.HasTrigger("tU_PlanSetup_PatientEditingLog");
                    tb.HasTrigger("tU_PlanSetup_VaBusinessLogic");
                });

            entity.Property(e => e.PlanSetupSer).ValueGeneratedNever();
            
                
                
            entity.Property(e => e.ViewingPlane).IsFixedLength();
            entity.Property(e => e.ViewingPlaneLrcorner).IsFixedLength();
            entity.Property(e => e.ViewingPlaneUlcorner).IsFixedLength();

            entity.HasOne(d => d.CourseSerNavigation).WithMany(p => p.PlanSetup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKCourse_PlanSetup");

            entity.HasOne(d => d.EquipmentSerNavigation).WithMany(p => p.PlanSetup).HasConstraintName("FKEquipment_PlanSetup");

            entity.HasOne(d => d.ImageSerNavigation).WithMany(p => p.PlanSetup).HasConstraintName("FKImage_PlanSetup");

            entity.HasOne(d => d.PatientSupportDeviceSerNavigation).WithMany(p => p.PlanSetup)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKPatientSupportDevice_PlanSetup");

            entity.HasOne(d => d.PrescriptionSerNavigation).WithMany(p => p.PlanSetup).HasConstraintName("FKPrescription_PlanSetup");

            entity.HasOne(d => d.PrimaryPtvserNavigation).WithMany(p => p.PlanSetup).HasConstraintName("FKPatientVolume_PlanSetup");

            entity.HasOne(d => d.StructureSetSerNavigation).WithMany(p => p.PlanSetup).HasConstraintName("FKStructureSet_PlanSetup");
        });

        modelBuilder.Entity<PlanSetupStructureDoseLevel>(entity =>
        {
            entity.HasKey(e => new { e.PlanSetupSer, e.StructureSer }).HasName("XPKPlanSetupStructureDoseLevel");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PlanSetupStructureDoseLevel");
                    tb.HasTrigger("tU_PlanSetupStructureDoseLevel");
                });

            
                
                

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.PlanSetupStructureDoseLevel).HasConstraintName("FKPlanSetup_PlanSetupStructureDoseLevel");

            entity.HasOne(d => d.StructureSerNavigation).WithMany(p => p.PlanSetupStructureDoseLevel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKStructure_PlanSetupStructureDoseLevel");
        });

        modelBuilder.Entity<PlanSetupStructureModelStructure>(entity =>
        {
            entity.HasKey(e => new { e.PlanSetupSer, e.StructureSer }).HasName("XPKPlanSetupStructureModelStructure");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PlanSetupStructureModelStru");
                    tb.HasTrigger("tU_PlanSetupStructureModelStru");
                });

            
                
                

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.PlanSetupStructureModelStructure).HasConstraintName("FKPlanSetup_PlanSetupStructureModelStructure");

            entity.HasOne(d => d.StructureSerNavigation).WithMany(p => p.PlanSetupStructureModelStructure).HasConstraintName("FKStructure_PlanSetupStructureModelStructure");
        });

        modelBuilder.Entity<PlanSource>(entity =>
        {
            entity.HasKey(e => e.PlanSourceSer).HasName("XPKPlanSource");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PlanSource");
                    tb.HasTrigger("tU_PlanSource");
                });

            entity.Property(e => e.PlanSourceSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<PlanSum>(entity =>
        {
            entity.HasKey(e => e.PlanSumSer).HasName("XPKPlanSum");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PlanSum");
                    tb.HasTrigger("tD_PlanSum_VaBusinessLogic");
                    tb.HasTrigger("tI_PlanSum");
                    tb.HasTrigger("tI_PlanSum_VaBusinessLogic");
                    tb.HasTrigger("tU_PlanSum");
                    tb.HasTrigger("tU_PlanSum_VaBusinessLogic");
                });

            entity.Property(e => e.PlanSumSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.CourseSerNavigation).WithMany(p => p.PlanSum).HasConstraintName("FKCourse_PlanSum");

            entity.HasOne(d => d.ImageSerNavigation).WithMany(p => p.PlanSum).HasConstraintName("FKImage_PlanSum");
        });

        modelBuilder.Entity<PlanSumPlanSetup>(entity =>
        {
            entity.HasKey(e => new { e.PlanSumSer, e.PlanSetupSer }).HasName("XPKPlanSumPlanSetup");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PlanSumPlanSetup");
                    tb.HasTrigger("tU_PlanSumPlanSetup");
                });

            
                
                

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.PlanSumPlanSetup).HasConstraintName("FKPlanSetup_PlanSumPlanSetup");

            entity.HasOne(d => d.PlanSumSerNavigation).WithMany(p => p.PlanSumPlanSetup).HasConstraintName("FKPlanSum_PlanSumPlanSetup");

            entity.HasOne(d => d.RegistrationFromReferenceSerNavigation).WithMany(p => p.PlanSumPlanSetupRegistrationFromReferenceSerNavigation).HasConstraintName("FKFromSpatialRegistrationIOD_PlanSumPlanSetup");

            entity.HasOne(d => d.RegistrationToReferenceSerNavigation).WithMany(p => p.PlanSumPlanSetupRegistrationToReferenceSerNavigation).HasConstraintName("FKToSpatialRegistrationIOD_PlanSumPlanSetup");
        });

        modelBuilder.Entity<PlanTypes>(entity =>
        {
            entity.HasKey(e => e.PlanTypeSer).HasName("XPKPayorPlanTypes");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PlanTypes");
                    tb.HasTrigger("tI_PlanTypes");
                    tb.HasTrigger("tU_PlanTypes");
                });

            entity.Property(e => e.PlanTypeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PlanSourceSerNavigation).WithMany(p => p.PlanTypes).HasConstraintName("FKPlanSource_PlanTypes");
        });

        modelBuilder.Entity<PlanVariation>(entity =>
        {
            entity.HasKey(e => e.PlanVariationSer).HasName("XPKPlanVariation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PlanVariation");
                    tb.HasTrigger("tI_PlanVariation");
                    tb.HasTrigger("tU_PlanVariation");
                });

            entity.Property(e => e.PlanVariationSer).ValueGeneratedNever();
            
                
                
            entity.Property(e => e.PlanVariationParameters).HasComment("Contextual details relating to this plan variation. May for example contain a key-value type data structure encoded as a string. \r\nThe data contained in a row is described in \"PlanVariationParameters Data Description\" document.");
            entity.Property(e => e.PlanVariationType).HasComment("Allowed values: \"RangeUncertainty\", \"IsocenterShiftUncertainty\", \"BaselineShiftUncertainty\", \r\n\"MLCTrackingVariation\", \"CouchTrackingVariation\", \"RobustOptimization\", \"McoTradeOff\"");

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.PlanVariation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPlanSetup_PlanVariation");
        });

        modelBuilder.Entity<PlanningSystem>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKPlanningSystem");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PlanningSystem");
                    tb.HasTrigger("tU_PlanningSystem");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.PlanningSystem).HasConstraintName("FKMachine_PlanningSystem");
        });

        modelBuilder.Entity<PlcyGroupTyp>(entity =>
        {
            entity.HasKey(e => e.PlcyGroupTypId).HasName("pkplcy_group_typ");

            entity.Property(e => e.PlcyGroupTypId).ValueGeneratedNever();
            entity.Property(e => e.PlcyGroupTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PlcyTyp>(entity =>
        {
            entity.HasKey(e => e.PlcyTypId).HasName("pkplcy_typ");

            entity.Property(e => e.PlcyTypId).ValueGeneratedNever();
            entity.Property(e => e.PlcyTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PlnSumTyp>(entity =>
        {
            entity.HasKey(e => e.PlnSumTyp1).HasName("pkpln_sum_typ");

            entity.Property(e => e.PlnSumTyp1).ValueGeneratedNever();
            entity.Property(e => e.PlnSumDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PlnTyp>(entity =>
        {
            entity.HasKey(e => e.PlnTyp1).HasName("pkpln_typ");

            entity.Property(e => e.PlnTyp1).ValueGeneratedNever();
            entity.Property(e => e.PlnDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PmtSystem>(entity =>
        {
            entity.HasKey(e => e.PmtSystemId).HasName("pkpmt_system");

            entity.Property(e => e.PmtSystemId).ValueGeneratedNever();
            entity.Property(e => e.PmtSystemDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PnCategoryDesc>(entity =>
        {
            entity.HasKey(e => e.PnCatCode).HasName("pkpn_category_desc");

            entity.Property(e => e.PnCatCode).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.PnCatDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PnCompUseCd>(entity =>
        {
            entity.HasKey(e => e.PnCompUseCd1).HasName("pkpn_comp_use_cd");

            entity.Property(e => e.PnCompUseCd1).IsFixedLength();
            entity.Property(e => e.PnCompUseDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PnDspComp>(entity =>
        {
            entity.HasKey(e => new { e.PnDspCompId, e.DspComp, e.CompId }).HasName("pkpn_dsp_comp");

            entity.Property(e => e.CompId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PnDspCompTyp>(entity =>
        {
            entity.HasKey(e => e.PnDspCompTypId).HasName("pkpn_dsp_comp_typ");

            entity.Property(e => e.PnDspCompTypId).ValueGeneratedNever();
            entity.Property(e => e.DspCompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PnDspFormat>(entity =>
        {
            entity.HasKey(e => new { e.PnDspFormatId, e.DspFormat, e.CompId }).HasName("pkpn_dsp_format");

            entity.Property(e => e.CompId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PnDspFormatTyp>(entity =>
        {
            entity.HasKey(e => e.PnDspFormatTypId).HasName("pkpn_dsp_format_typ");

            entity.Property(e => e.PnDspFormatTypId).ValueGeneratedNever();
            entity.Property(e => e.DspFormatName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PnHdr>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.PnCorspCd, e.FirstPageInd }).HasName("pkpn_hdr");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PnCorspCd).IsFixedLength();
            entity.Property(e => e.FirstPageInd).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.CondensedHdrInd).IsFixedLength();
            entity.Property(e => e.CustomHdrInd).IsFixedLength();
            entity.Property(e => e.EnableLtrhdInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidBlobInd).IsFixedLength();
        });

        modelBuilder.Entity<PnSectionDesc>(entity =>
        {
            entity.HasKey(e => e.PnSecCode).HasName("pkpn_section_desc");

            entity.Property(e => e.PnSecCode).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.PnSecDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PnSystemComp>(entity =>
        {
            entity.HasKey(e => e.CompId).HasName("pkpn_system_comp");

            entity.Property(e => e.CompId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.CompBased).IsFixedLength();
            entity.Property(e => e.CompCode).IsFixedLength();
            entity.Property(e => e.CompValue).IsFixedLength();
            entity.Property(e => e.DataTyp).IsFixedLength();
            entity.Property(e => e.DwAccMthd).IsFixedLength();
            entity.Property(e => e.DwColName).IsFixedLength();
            entity.Property(e => e.DwGrpColNames).IsFixedLength();
            entity.Property(e => e.DwSortOrder).IsFixedLength();
            entity.Property(e => e.ItemBased).IsFixedLength();
            entity.Property(e => e.NavInd).IsFixedLength();
            entity.Property(e => e.PnCatCode).IsFixedLength();
            entity.Property(e => e.PnCompUseCd).IsFixedLength();
            entity.Property(e => e.PnSecCode).IsFixedLength();
            entity.Property(e => e.ToolbarInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PnTemplate>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TemplateId }).HasName("pkpn_template");

            entity.ToTable("pn_template", tb => tb.HasTrigger("tU_pn_template"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AuthorInstId).IsFixedLength();
            entity.Property(e => e.BaseTblInd).IsFixedLength();
            entity.Property(e => e.CompId).IsFixedLength();
            entity.Property(e => e.DefaultCtInd).IsFixedLength();
            entity.Property(e => e.FilePath).IsFixedLength();
            entity.Property(e => e.PersonalTemplateInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TemplateName).IsFixedLength();
            entity.Property(e => e.TemplateUseCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PnTemplateUser>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TemplateId, e.UserInstId, e.Userid }).HasName("pkpn_template_user");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.FavoriteInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PnToolbarFcnTyp>(entity =>
        {
            entity.HasKey(e => e.PnToolbarFcnTyp1).HasName("pkpn_toolbar_fcn_typ");

            entity.Property(e => e.PnToolbarFcnTyp1).ValueGeneratedNever();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.PnToolbarFcnDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PnUserComp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.CompId }).HasName("pkpn_user_comp");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.CompId).IsFixedLength();
            entity.Property(e => e.CompCode).IsFixedLength();
            entity.Property(e => e.CompValue).IsFixedLength();
            entity.Property(e => e.PnCatCode).IsFixedLength();
            entity.Property(e => e.PnSecCode).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PnUserTemplate>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.TemplateTyp, e.TemplateName }).HasName("pkpn_user_template");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TemplateName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TemplateTypNavigation).WithMany(p => p.PnUserTemplate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pn_user_template");
        });

        modelBuilder.Entity<PoTemplate>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TemplateId }).HasName("pkpo_template");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AuthorInstId).IsFixedLength();
            entity.Property(e => e.TemplateName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PoTemplateUser>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TemplateId, e.UserInstId, e.Userid }).HasName("pkpo_template_user");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.FavoriteInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PointOfContact>(entity =>
        {
            entity.HasKey(e => e.PointOfContactSer).HasName("XPKPointOfContact");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PointOfContact");
                    tb.HasTrigger("tI_PointOfContact");
                    tb.HasTrigger("tU_PointOfContact");
                });

            entity.Property(e => e.PointOfContactSer).ValueGeneratedNever();
            entity.Property(e => e.FirstNameUpper).UseCollation("Latin1_General_100_CI_AI_SC");
            
                
                
            entity.Property(e => e.LastNameUpper).UseCollation("Latin1_General_100_CI_AI_SC");
            entity.Property(e => e.Sex).IsFixedLength();

            entity.HasOne(d => d.AddressSerNavigation).WithMany(p => p.PointOfContact).HasConstraintName("FKAddress_PointOfContact");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.PointOfContact)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_PointOfContact");
        });

        modelBuilder.Entity<PortImager>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKPortImager");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PortImager");
                    tb.HasTrigger("tU_PortImager");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ExtBeamResourceSerNavigation).WithMany(p => p.PortImager)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKExternalBeam_PortImager");

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.PortImager).HasConstraintName("FKImagingDevice_PortImager");
        });

        modelBuilder.Entity<PortalDoseAnalysis>(entity =>
        {
            entity.HasKey(e => e.PortalDoseAnalysisSer).HasName("XPKPortalDoseAnalysis");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PortalDoseAnalysis");
                    tb.HasTrigger("tU_PortalDoseAnalysis");
                });

            entity.Property(e => e.PortalDoseAnalysisSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<PracticeDcmnt>(entity =>
        {
            entity.HasKey(e => new { e.PracticeDcmntId, e.InstId }).HasName("pkpractice_dcmnt");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.FileExt).IsFixedLength();
            entity.Property(e => e.PracticeDcmntName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PrcsTyp>(entity =>
        {
            entity.HasKey(e => e.PrcsTyp1).HasName("pkprcs_typ");

            entity.Property(e => e.PrcsTyp1).ValueGeneratedNever();
            entity.Property(e => e.PrcsDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PrefAgtNameLog>(entity =>
        {
            entity.HasKey(e => e.PrefAgtNameLogId).HasName("pkpref_agt_name_log");

            entity.Property(e => e.PrefAgtNameLogId).ValueGeneratedNever();
            entity.Property(e => e.AgtClsDesc).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.PrefAgtNameNew).IsFixedLength();
            entity.Property(e => e.PrefAgtNameOld).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Prescription>(entity =>
        {
            entity.HasKey(e => e.PrescriptionSer).HasName("XPKPrescription");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Prescription");
                    tb.HasTrigger("tI_Prescription");
                    tb.HasTrigger("tU_Prescription");
                });

            entity.Property(e => e.PrescriptionSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PredecessorPrescriptionSerNavigation).WithMany(p => p.InversePredecessorPrescriptionSerNavigation).HasConstraintName("FKPrescription_RelPrescription");

            entity.HasOne(d => d.PrescriptionTemplateSerNavigation).WithMany(p => p.Prescription).HasConstraintName("FKPrescriptionTemplate_Prescription");

            entity.HasOne(d => d.TreatmentPhaseSerNavigation).WithMany(p => p.Prescription)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTreatmentPhase_Prescription");
        });

        modelBuilder.Entity<PrescriptionAnatomy>(entity =>
        {
            entity.HasKey(e => e.PrescriptionAnatomySer).HasName("XPKPrescriptionAnatomy");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PrescriptionAnatomy");
                    tb.HasTrigger("tI_PrescriptionAnatomy");
                    tb.HasTrigger("tU_PrescriptionAnatomy");
                });

            entity.Property(e => e.PrescriptionAnatomySer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PrescriptionSerNavigation).WithMany(p => p.PrescriptionAnatomy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPrescription_PrescriptionAnatomy");
        });

        modelBuilder.Entity<PrescriptionAnatomyItem>(entity =>
        {
            entity.HasKey(e => e.PrescriptionAnatomyItemSer).HasName("XPKPrescriptionAnatomyItem");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PrescriptionAnatomyItem");
                    tb.HasTrigger("tU_PrescriptionAnatomyItem");
                });

            entity.Property(e => e.PrescriptionAnatomyItemSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PrescriptionAnatomySerNavigation).WithMany(p => p.PrescriptionAnatomyItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPrescriptionAnatomy_PrescriptionAnatomyItem");
        });

        modelBuilder.Entity<PrescriptionProperty>(entity =>
        {
            entity.HasKey(e => e.PrescriptionPropertySer).HasName("XPKPrescriptionProperty");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PrescriptionProperty");
                    tb.HasTrigger("tI_PrescriptionProperty");
                    tb.HasTrigger("tU_PrescriptionProperty");
                });

            entity.Property(e => e.PrescriptionPropertySer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PrescriptionSerNavigation).WithMany(p => p.PrescriptionProperty)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPrescription_PrescriptionProperty");
        });

        modelBuilder.Entity<PrescriptionPropertyItem>(entity =>
        {
            entity.HasKey(e => e.PrescriptionPropertyItemSer).HasName("XPKPrescriptionPropertyItem");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PrescriptionPropertyItem");
                    tb.HasTrigger("tU_PrescriptionPropertyItem");
                });

            entity.Property(e => e.PrescriptionPropertyItemSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PrescriptionPropertySerNavigation).WithMany(p => p.PrescriptionPropertyItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPrescriptionProperty_PrescriptionPropertyItem");
        });

        modelBuilder.Entity<PrescriptionTemplate>(entity =>
        {
            entity.HasKey(e => e.PrescriptionTemplateSer).HasName("XPKPrescriptionTemplate");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PrescriptionTemplate");
                    tb.HasTrigger("tU_PrescriptionTemplate");
                });

            entity.Property(e => e.PrescriptionTemplateSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<PrescriptionTemplateAnatomy>(entity =>
        {
            entity.HasKey(e => e.PrescriptionTemplateAnatomySer).HasName("XPKPrescriptionTemplateAnatomy");

            entity.ToTable(tb => tb.HasTrigger("tD_PrescriptionTemplateAnatomy"));

            entity.Property(e => e.PrescriptionTemplateAnatomySer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PrescriptionTemplateSerNavigation).WithMany(p => p.PrescriptionTemplateAnatomy).HasConstraintName("FKTemplate_TemplateAnatomy");
        });

        modelBuilder.Entity<PrescriptionTemplateAnatomyItem>(entity =>
        {
            entity.HasKey(e => e.PrescriptionTemplateAnatomyItemSer).HasName("XPKPrescriptionTemplateAnatomyItem");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PrescriptionTemplateAnatomy");
                    tb.HasTrigger("tU_PrescriptionTemplateAnatomy");
                });

            entity.Property(e => e.PrescriptionTemplateAnatomyItemSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PrescriptionTemplateAnatomySerNavigation).WithMany(p => p.PrescriptionTemplateAnatomyItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTemplateAnatomy_TemplateAnatomyItem");
        });

        modelBuilder.Entity<PrescriptionTemplateProperty>(entity =>
        {
            entity.HasKey(e => e.PrescriptionTemplatePropertySer).HasName("XPKPrescriptionTemplateProperty");

            entity.ToTable(tb => tb.HasTrigger("tD_PrescriptionTemplatePropert"));

            entity.Property(e => e.PrescriptionTemplatePropertySer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PrescriptionTemplateSerNavigation).WithMany(p => p.PrescriptionTemplateProperty).HasConstraintName("FKTemplate_TemplateProperty");
        });

        modelBuilder.Entity<PrescriptionTemplatePropertyItem>(entity =>
        {
            entity.HasKey(e => e.PrescriptionTemplatePropertyItemSer).HasName("XPKPrescriptionTemplatePropertyItem");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PrescriptionTemplatePropert");
                    tb.HasTrigger("tU_PrescriptionTemplatePropert");
                });

            entity.Property(e => e.PrescriptionTemplatePropertyItemSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PrescriptionTemplatePropertySerNavigation).WithMany(p => p.PrescriptionTemplatePropertyItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTemplateProperty_TemplatePropertyItem");
        });

        modelBuilder.Entity<PrimaryFluenceMode>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKPrimaryFluenceMode");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PrimaryFluenceMode");
                    tb.HasTrigger("tI_PrimaryFluenceMode");
                    tb.HasTrigger("tU_PrimaryFluenceMode");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithOne(p => p.PrimaryFluenceMode).HasConstraintName("FKAddOn_PrimaryFluenceMode");
        });

        modelBuilder.Entity<PrintAuditRec>(entity =>
        {
            entity.HasKey(e => e.AuditSeqNo).HasName("pkprint_audit_rec");

            entity.Property(e => e.AuditSeqNo).ValueGeneratedNever();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
        });

        modelBuilder.Entity<PrintReport>(entity =>
        {
            entity.HasKey(e => e.PrintReportSer).HasName("XPKPrintReport");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_PrintReport");
                    tb.HasTrigger("tU_PrintReport");
                });

            entity.Property(e => e.PrintReportSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<PrmryDiagnosis>(entity =>
        {
            entity.ToView("PrmryDiagnosis");

            entity.Property(e => e.StageCriteria).IsFixedLength();
        });

        modelBuilder.Entity<PrnReasonTyp>(entity =>
        {
            entity.HasKey(e => e.PrnReasonTyp1).HasName("pkprn_reason_typ");

            entity.Property(e => e.PrnReasonTyp1).ValueGeneratedNever();
            entity.Property(e => e.PrnReasonDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ProcedureCode>(entity =>
        {
            entity.HasKey(e => e.ProcedureCodeSer).HasName("XPKProcedureCode");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ProcedureCode");
                    tb.HasTrigger("tI_ProcedureCode");
                    tb.HasTrigger("tU_ProcedureCode");
                });

            entity.Property(e => e.ProcedureCodeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityCategorySerNavigation).WithMany(p => p.ProcedureCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKActiviityCategory_ProcedureCode");

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.ProcedureCode).HasConstraintName("FKDepartment_ProcedureCode");

            entity.HasOne(d => d.ModifierSerNavigation).WithMany(p => p.ProcedureCode)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKActivityCodeMd_ProcedureCode");
        });

        modelBuilder.Entity<ProcedureCodeMh>(entity =>
        {
            entity.HasKey(e => new { e.ProcedureCodeSer, e.ProcedureCodeRevCount }).HasName("XPKProcedureCodeMH");

            entity.ToTable("ProcedureCodeMH", tb =>
                {
                    tb.HasTrigger("tD_ProcedureCodeMH");
                    tb.HasTrigger("tI_ProcedureCodeMH");
                    tb.HasTrigger("tU_ProcedureCodeMH");
                });

            
                
                

            entity.HasOne(d => d.ProcedureCodeSerNavigation).WithMany(p => p.ProcedureCodeMh).HasConstraintName("FKProcedureCode_ProcedureCodeMH");
        });

        modelBuilder.Entity<ProcedureItem>(entity =>
        {
            entity.HasKey(e => e.ProcedureItemSer).HasName("XPKProcedureItem");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ProcedureItem");
                    tb.HasTrigger("tI_ProcedureItem");
                    tb.HasTrigger("tU_ProcedureItem");
                });

            entity.Property(e => e.ProcedureItemSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DicomcodeValueSerNavigation).WithMany(p => p.ProcedureItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKDICOMCodeValue_ProcedureItem");
        });

        modelBuilder.Entity<ProcedureItemResource>(entity =>
        {
            entity.HasKey(e => e.ProcedureItemResourceSer).HasName("XPKProcedureItemResource");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ProcedureItemResource");
                    tb.HasTrigger("tU_ProcedureItemResource");
                });

            entity.Property(e => e.ProcedureItemResourceSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ProcedureItemSerNavigation).WithMany(p => p.ProcedureItemResource).HasConstraintName("FKProcedureItem_ProcedureItemResource");

            entity.HasOne(d => d.ResourceGroupSerNavigation).WithMany(p => p.ProcedureItemResource)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKResourceGroup_ProcedureItemResource");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.ProcedureItemResource)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKResource_ProcedureItemResource");
        });

        modelBuilder.Entity<ProcedureItemSopclass>(entity =>
        {
            entity.HasKey(e => e.ProcedureItemSopclassSer).HasName("XPKProcedureItemSOPClass");

            entity.ToTable("ProcedureItemSOPClass", tb =>
                {
                    tb.HasTrigger("tI_ProcedureItemSOPClass");
                    tb.HasTrigger("tU_ProcedureItemSOPClass");
                });

            entity.Property(e => e.ProcedureItemSopclassSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ProcedureItemSerNavigation).WithMany(p => p.ProcedureItemSopclass)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKProcedureItem_ProcedureItemSOPClass");

            entity.HasOne(d => d.SopclassSerNavigation).WithMany(p => p.ProcedureItemSopclass).HasConstraintName("FKSOPClass_ProcedureItemSOPClass");
        });

        modelBuilder.Entity<Processing>(entity =>
        {
            entity.HasKey(e => e.ProcessingSer).HasName("XPKProcessing");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Processing");
                    tb.HasTrigger("tU_Processing");
                });

            entity.Property(e => e.ProcessingSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("pkproduct");

            entity.Property(e => e.ProductId).ValueGeneratedNever();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.MultiUseProdInd).IsFixedLength();
            entity.Property(e => e.ProductCode).IsFixedLength();
            entity.Property(e => e.ProductName).IsFixedLength();
            entity.Property(e => e.ProductStatusCd).IsFixedLength();
            entity.Property(e => e.StockItemId).IsFixedLength();
            entity.Property(e => e.Strength).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ProductBillCdXref>(entity =>
        {
            entity.HasKey(e => e.ProductBillCdId).HasName("pkproduct_bill_cd_xref");

            entity.Property(e => e.ProductBillCdId).ValueGeneratedNever();
            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Inst).WithMany(p => p.ProductBillCdXref).HasConstraintName("fk2_product_bill_cd_xref");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductBillCdXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_product_bill_cd_xref");
        });

        modelBuilder.Entity<ProductDispLocXref>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.DispLocId }).HasName("pkproduct_disp_loc_xref");

            entity.Property(e => e.ProductDispLocCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DispLoc).WithMany(p => p.ProductDispLocXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_product_disp_loc_xref");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductDispLocXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_product_disp_loc_xref");
        });

        modelBuilder.Entity<ProductFormularyAgtXref>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.AgtFormularyInstId, e.AgtFormularyId }).HasName("pkproduct_formulary_agt_xref");

            entity.Property(e => e.AgtFormularyInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Product).WithMany(p => p.ProductFormularyAgtXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_product_formulary_agt_xref");

            entity.HasOne(d => d.AgtFormulary).WithMany(p => p.ProductFormularyAgtXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_product_formulary_agt_xref");
        });

        modelBuilder.Entity<ProductStatus>(entity =>
        {
            entity.HasKey(e => e.ProductStatusCd).HasName("pkproduct_status");

            entity.Property(e => e.ProductStatusCd).IsFixedLength();
            entity.Property(e => e.ProductStatusDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ProductStorageLocXref>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.StorageLocId }).HasName("pkproduct_storage_loc_xref");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Product).WithMany(p => p.ProductStorageLocXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_product_storage_loc_xref");

            entity.HasOne(d => d.StorageLoc).WithMany(p => p.ProductStorageLocXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_product_storage_loc_xref");
        });

        modelBuilder.Entity<ProfReltn>(entity =>
        {
            entity.HasKey(e => e.ProfReltn1).HasName("pkprof_reltn");

            entity.Property(e => e.ProfReltn1).ValueGeneratedNever();
            entity.Property(e => e.ProfReltnDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ProfTaskPref>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.InstId, e.TaskId }).HasName("pkprof_task_pref");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PrefInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ProfTyp>(entity =>
        {
            entity.HasKey(e => e.ProfTyp1).HasName("pkprof_typ");

            entity.Property(e => e.ProfTyp1).ValueGeneratedNever();
            entity.Property(e => e.MedProfInd).IsFixedLength();
            entity.Property(e => e.ProfDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ProfUnavl>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.UseridLink, e.ProfUnavlId, e.TransLogTstamp }).HasName("pkprof_unavl");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UnavlCmt).IsFixedLength();
            entity.Property(e => e.UnavlHdrInstId).IsFixedLength();
            entity.Property(e => e.UnavlInstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.ProfUnavlDowNavigation).WithMany(p => p.ProfUnavl).HasConstraintName("fk1_prof_unavl");

            entity.HasOne(d => d.UnavlTypNavigation).WithMany(p => p.ProfUnavl).HasConstraintName("fk2_prof_unavl");

            entity.HasOne(d => d.Userid).WithMany(p => p.ProfUnavl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_prof_unavl");
        });

        modelBuilder.Entity<ProtonBeamSpot>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKProtonBeamSpot");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ProtonBeamSpot");
                    tb.HasTrigger("tU_ProtonBeamSpot");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithOne(p => p.ProtonBeamSpot).HasConstraintName("FKAddOn_ProtonBeamSpot");
        });

        modelBuilder.Entity<ProtonCompensator>(entity =>
        {
            entity.HasKey(e => e.CompensatorSer).HasName("XPKProtonCompensator");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ProtonCompensator");
                    tb.HasTrigger("tU_ProtonCompensator");
                });

            entity.Property(e => e.CompensatorSer).ValueGeneratedNever();

            entity.HasOne(d => d.CompensatorSerNavigation).WithOne(p => p.ProtonCompensator).HasConstraintName("FKCompensator_ProtonCompensator");
        });

        modelBuilder.Entity<ProtonLateralSpreader>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKProtonLateralSpreader");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ProtonLateralSpreader");
                    tb.HasTrigger("tU_ProtonLateralSpreader");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithOne(p => p.ProtonLateralSpreader).HasConstraintName("FKAddOn_ProtonLateralSpreader");
        });

        modelBuilder.Entity<ProvApprStartDate>(entity =>
        {
            entity.HasKey(e => new { e.StkhId, e.ProvApprItemDesc }).HasName("pkprov_appr_start_date");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.ProvApprItemDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ProvQueueSubscription>(entity =>
        {
            entity.HasKey(e => e.ProvQueueSubscriptionId).HasName("pkprov_queue_subscription");

            entity.Property(e => e.ProvQueueSubscriptionId).ValueGeneratedNever();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ProvInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ProviderMuExclusion>(entity =>
        {
            entity.HasKey(e => e.StkhId).HasName("pkprovider_mu_exclusion");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.BloodPressureInd).IsFixedLength();
            entity.Property(e => e.HeightWeightInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ProviderMuSum>(entity =>
        {
            entity.HasKey(e => new { e.StkhId, e.CompliancePrdId, e.ComplianceItemId, e.CompliancePgmId }).HasName("pkprovider_mu_sum");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.CompliancePgmId).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ComplianceItem).WithMany(p => p.ProviderMuSum)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_provider_mu_sum");
        });

        modelBuilder.Entity<ProviderStdOrder>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.InstId, e.ProviderStdOrderId }).HasName("pkprovider_std_order");

            entity.ToTable("provider_std_order", tb => tb.HasTrigger("tU_provider_std_order"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.GroupDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PrtyOfSrv>(entity =>
        {
            entity.HasKey(e => e.PrtyOfSrv1).HasName("pkprty_of_srv");

            entity.Property(e => e.PrtyOfSrv1).ValueGeneratedNever();
            entity.Property(e => e.PrtyOfSrvCd).IsFixedLength();
            entity.Property(e => e.PrtyOfSrvDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PrvState>(entity =>
        {
            entity.HasKey(e => e.PrvStateId).HasName("pkprv_state");

            entity.Property(e => e.PrvStateId).ValueGeneratedNever();
            entity.Property(e => e.PcZipLower).IsFixedLength();
            entity.Property(e => e.PcZipUpper).IsFixedLength();
            entity.Property(e => e.PrvState1).IsFixedLength();
            entity.Property(e => e.PrvStateAbrv).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.Country).WithMany(p => p.PrvState)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_prv_state");
        });

        modelBuilder.Entity<Pt>(entity =>
        {
            entity.HasKey(e => e.PtId).HasName("pkpt");

            entity.ToTable("pt", tb => tb.HasTrigger("tU_pt"));

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AllergyInd).IsFixedLength();
            entity.Property(e => e.ClinTrialInd).IsFixedLength();
            entity.Property(e => e.CurLastName).IsFixedLength();
            entity.Property(e => e.DirectivesInd).IsFixedLength();
            entity.Property(e => e.ExtAgtInd).IsFixedLength();
            entity.Property(e => e.InfectionInd).IsFixedLength();
            entity.Property(e => e.InptInd).IsFixedLength();
            entity.Property(e => e.MaidenName).IsFixedLength();
            entity.Property(e => e.NameSuffix).IsFixedLength();
            entity.Property(e => e.NewOrderInd).IsFixedLength();
            entity.Property(e => e.NewRemInd).IsFixedLength();
            entity.Property(e => e.NkaInd).IsFixedLength();
            entity.Property(e => e.PrimaryPtKeyValue).IsFixedLength();
            entity.Property(e => e.PtAgeCat).IsFixedLength();
            entity.Property(e => e.PtAlertInd).IsFixedLength();
            entity.Property(e => e.PtAliveInd).IsFixedLength();
            entity.Property(e => e.PtFirstName).IsFixedLength();
            entity.Property(e => e.PtFirstNameSdx).IsFixedLength();
            entity.Property(e => e.PtInitial).IsFixedLength();
            entity.Property(e => e.PtInpatientInd).IsFixedLength();
            entity.Property(e => e.PtLastName).IsFixedLength();
            entity.Property(e => e.PtLastNameSdx).IsFixedLength();
            entity.Property(e => e.PtMiddleName).IsFixedLength();
            entity.Property(e => e.PtPortalRegInd).IsFixedLength();
            entity.Property(e => e.PtTpActiveInd).IsFixedLength();
            entity.Property(e => e.PtTpAmend).IsFixedLength();
            entity.Property(e => e.SexCd).IsFixedLength();
            entity.Property(e => e.SinSsn).IsFixedLength();
            entity.Property(e => e.TestPtInd).IsFixedLength();
            entity.Property(e => e.TrackAeInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TransTrfInstId).IsFixedLength();
            entity.Property(e => e.UpperLastName)
                .IsFixedLength()
                .UseCollation("Latin1_General_100_CI_AI_SC");

            entity.HasOne(d => d.Citizenship).WithMany(p => p.Pt).HasConstraintName("fk3_pt");

            entity.HasOne(d => d.CsOfDthTyp).WithMany(p => p.Pt).HasConstraintName("fk2_pt");

            entity.HasOne(d => d.PtDobCdNavigation).WithMany(p => p.PtPtDobCdNavigation).HasConstraintName("fk4_pt");

            entity.HasOne(d => d.PtDodCdNavigation).WithMany(p => p.PtPtDodCdNavigation).HasConstraintName("fk5_pt");

            entity.HasOne(d => d.SexCdNavigation).WithMany(p => p.Pt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk6_pt");

            entity.HasOne(d => d.TitleTypNavigation).WithMany(p => p.Pt).HasConstraintName("fk1_pt");
        });

        modelBuilder.Entity<PtActualAccess>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtActualId, e.EventTyp }).HasName("pkpt_actual_access");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
        });

        modelBuilder.Entity<PtActualLink>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtActualLinkId }).HasName("pkpt_actual_link");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.FromEventTyp).IsFixedLength();
            entity.Property(e => e.ToEventTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.FromEventTypNavigation).WithMany(p => p.PtActualLinkFromEventTypNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_actual_link");

            entity.HasOne(d => d.ToEventTypNavigation).WithMany(p => p.PtActualLinkToEventTypNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_actual_link");
        });

        modelBuilder.Entity<PtAddress>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.TransLogTstamp }).HasName("pkpt_address");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Address1).IsFixedLength();
            entity.Property(e => e.Address2).IsFixedLength();
            entity.Property(e => e.Address3).IsFixedLength();
            entity.Property(e => e.BusTel).IsFixedLength();
            entity.Property(e => e.BusTelExt).IsFixedLength();
            entity.Property(e => e.City).IsFixedLength();
            entity.Property(e => e.County).IsFixedLength();
            entity.Property(e => e.CurEntry).IsFixedLength();
            entity.Property(e => e.FaxTel).IsFixedLength();
            entity.Property(e => e.HomeTel).IsFixedLength();
            entity.Property(e => e.MobileTel).IsFixedLength();
            entity.Property(e => e.PcZip).IsFixedLength();
            entity.Property(e => e.PrvState).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BusTelFmt).WithMany(p => p.PtAddressBusTelFmt).HasConstraintName("fk4_pt_address");

            entity.HasOne(d => d.Country).WithMany(p => p.PtAddress).HasConstraintName("fk1_pt_address");

            entity.HasOne(d => d.FaxTelFmt).WithMany(p => p.PtAddressFaxTelFmt).HasConstraintName("fk6_pt_address");

            entity.HasOne(d => d.HomeTelFmt).WithMany(p => p.PtAddressHomeTelFmt).HasConstraintName("fk3_pt_address");

            entity.HasOne(d => d.MobileTelFmt).WithMany(p => p.PtAddressMobileTelFmt).HasConstraintName("fk5_pt_address");

            entity.HasOne(d => d.PcZipFmt).WithMany(p => p.PtAddressPcZipFmt).HasConstraintName("fk7_pt_address");

            entity.HasOne(d => d.PrvStateNavigation).WithMany(p => p.PtAddress).HasConstraintName("fk2_pt_address");
        });

        modelBuilder.Entity<PtAdt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAdtId }).HasName("pkpt_adt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AdtCmt).IsFixedLength();
            entity.Property(e => e.AdtTyp).IsFixedLength();
            entity.Property(e => e.CurrentEntry).IsFixedLength();
            entity.Property(e => e.ExternalDesc).IsFixedLength();
            entity.Property(e => e.ExternalInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.OrgStkhId).IsFixedLength();
            entity.Property(e => e.PgmInstId).IsFixedLength();
            entity.Property(e => e.RefInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.AdmitClsNavigation).WithMany(p => p.PtAdt).HasConstraintName("fk1_pt_adt");

            entity.HasOne(d => d.OrgStkh).WithMany(p => p.PtAdt).HasConstraintName("fk2_pt_adt");

            entity.HasOne(d => d.AdmitPgm).WithMany(p => p.PtAdt).HasConstraintName("fk4_pt_adt");

            entity.HasOne(d => d.InstCareBed).WithMany(p => p.PtAdt).HasConstraintName("fk3_pt_adt");
        });

        modelBuilder.Entity<PtAe>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAeId }).HasName("pkpt_ae");

            entity.ToTable("pt_ae", tb =>
                {
                    tb.HasTrigger("tD_pt_ae");
                    tb.HasTrigger("tU_pt_ae");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ClinicallySigInd).IsFixedLength();
            entity.Property(e => e.DeathInd).IsFixedLength();
            entity.Property(e => e.ExpectedInd).IsFixedLength();
            entity.Property(e => e.HospitalizedInd).IsFixedLength();
            entity.Property(e => e.PtAeCmt).IsFixedLength();
            entity.Property(e => e.ReportableInd).IsFixedLength();
            entity.Property(e => e.ReportedInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.SeqNo).IsFixedLength();
            entity.Property(e => e.SeriousInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtAeCustFormXref>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAeId, e.CustFormResultId }).HasName("pkpt_ae_cust_form_xref");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TransLogMuser).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtAeMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAeId, e.RevisionNo }).HasName("pkpt_ae_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ClinicallySigInd).IsFixedLength();
            entity.Property(e => e.DeathInd).IsFixedLength();
            entity.Property(e => e.ExpectedInd).IsFixedLength();
            entity.Property(e => e.HospitalizedInd).IsFixedLength();
            entity.Property(e => e.PtAeCmt).IsFixedLength();
            entity.Property(e => e.ReportableInd).IsFixedLength();
            entity.Property(e => e.ReportedInd).IsFixedLength();
            entity.Property(e => e.SeqNo).IsFixedLength();
            entity.Property(e => e.SeriousInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtAgenda>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAgendaHdrId, e.PtAgendaTaskId }).HasName("pkpt_agenda");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgendaTask).WithMany(p => p.PtAgenda)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_agenda");

            entity.HasOne(d => d.PtAgendaHdr).WithMany(p => p.PtAgenda)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_agenda");
        });

        modelBuilder.Entity<PtAgendaHdr>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAgendaHdrId }).HasName("pkpt_agenda_hdr");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtAgendaHdr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_agenda_hdr");

            entity.HasOne(d => d.AgendaTemplate).WithMany(p => p.PtAgendaHdr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_agenda_hdr");
        });

        modelBuilder.Entity<PtAgendaStatus>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.CatName, e.CatId }).HasName("pkpt_agenda_status");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CatName).IsFixedLength();
            entity.Property(e => e.CatTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtVisit).WithMany(p => p.PtAgendaStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_agenda_status");
        });

        modelBuilder.Entity<PtAgtScreening>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.AgtScreeningId }).HasName("pkpt_agt_screening");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AllergiesViewedInd).IsFixedLength();
            entity.Property(e => e.CalledFrom).IsFixedLength();
            entity.Property(e => e.ContraViewedInd).IsFixedLength();
            entity.Property(e => e.DosagesViewedInd).IsFixedLength();
            entity.Property(e => e.InteractionsViewedInd).IsFixedLength();
            entity.Property(e => e.RoutesViewedInd).IsFixedLength();
            entity.Property(e => e.ScreeningDetailInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
        });

        modelBuilder.Entity<PtAgtScreeningDetail>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.AgtScreeningId }).HasName("pkpt_agt_screening_detail");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.PtAgtScreening).WithOne(p => p.PtAgtScreeningDetail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_agt_screening_detail");
        });

        modelBuilder.Entity<PtAlert>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.AlertId }).HasName("pkpt_alert");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AlertInstId).IsFixedLength();
            entity.Property(e => e.AlertPendingInd).IsFixedLength();
            entity.Property(e => e.AlertStkhId).IsFixedLength();
            entity.Property(e => e.ClrInstId).IsFixedLength();
            entity.Property(e => e.ClrReasonCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtAllergy>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.AllergyId }).HasName("pkpt_allergy");

            entity.ToTable("pt_allergy", tb =>
                {
                    tb.HasTrigger("tD_pt_allergy");
                    tb.HasTrigger("tU_pt_allergy");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.DateApproxInd).IsFixedLength();
            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.Kdc).IsFixedLength();
            entity.Property(e => e.ReactionCd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UniqueCcdaId).IsFixedLength();
            entity.Property(e => e.ValidEntry).IsFixedLength();

            entity.HasOne(d => d.AllergyTypNavigation).WithMany(p => p.PtAllergy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_allergy");

            entity.HasOne(d => d.OnsetDateCdNavigation).WithMany(p => p.PtAllergy).HasConstraintName("fk4_pt_allergy");

            entity.HasOne(d => d.Pt).WithMany(p => p.PtAllergy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_pt_allergy");

            entity.HasOne(d => d.Severity).WithMany(p => p.PtAllergy).HasConstraintName("fk1_pt_allergy");
        });

        modelBuilder.Entity<PtAllergyExternal>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAllergyExternalId }).HasName("pkpt_allergy_external");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AllergyObservationStatus).IsFixedLength();
            entity.Property(e => e.AllergyParsingStatus).IsFixedLength();
            entity.Property(e => e.AllergyProbActStatus).IsFixedLength();
            entity.Property(e => e.AllergyRespParsingStatus).IsFixedLength();
            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.Kdc).IsFixedLength();
            entity.Property(e => e.ReactionCd).IsFixedLength();
            entity.Property(e => e.ReconStatus).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UniqueCcdaId).IsFixedLength();

            entity.HasOne(d => d.AllergyTypNavigation).WithMany(p => p.PtAllergyExternal).HasConstraintName("fk2_pt_allergy_external");

            entity.HasOne(d => d.Pt).WithMany(p => p.PtAllergyExternal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_allergy_external");

            entity.HasOne(d => d.ReconSourceTypNavigation).WithMany(p => p.PtAllergyExternal).HasConstraintName("fk3_pt_allergy_external");

            entity.HasOne(d => d.TransitionOfCareInbound).WithMany(p => p.PtAllergyExternal).HasConstraintName("fk4_pt_allergy_external");
        });

        modelBuilder.Entity<PtAllergyMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.AllergyId, e.RevisionNo }).HasName("pkpt_allergy_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.DateApproxInd).IsFixedLength();
            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.Kdc).IsFixedLength();
            entity.Property(e => e.ReactionCd).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UniqueCcdaId).IsFixedLength();
            entity.Property(e => e.ValidEntry).IsFixedLength();
        });

        modelBuilder.Entity<PtAllergyResp>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.AllergyId, e.AllergyRespId }).HasName("pkpt_allergy_resp");

            entity.ToTable("pt_allergy_resp", tb =>
                {
                    tb.HasTrigger("tD_pt_allergy_resp");
                    tb.HasTrigger("tU_pt_allergy_resp");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Resp).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.RespTypNavigation).WithMany(p => p.PtAllergyResp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_allergy_resp");

            entity.HasOne(d => d.PtAllergy).WithMany(p => p.PtAllergyResp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_allergy_resp");
        });

        modelBuilder.Entity<PtAllergyRespExternal>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAllergyExternalId, e.PtAllergyRespExternalId }).HasName("pkpt_allergy_resp_external");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Resp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtAllergyRespExternal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_allergy_resp_external");

            entity.HasOne(d => d.RespTypNavigation).WithMany(p => p.PtAllergyRespExternal).HasConstraintName("fk3_pt_allergy_resp_external");

            entity.HasOne(d => d.PtAllergyExternal).WithMany(p => p.PtAllergyRespExternal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_allergy_resp_external");
        });

        modelBuilder.Entity<PtAllergyRespMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.AllergyId, e.AllergyRespId, e.RevisionNo }).HasName("pkpt_allergy_resp_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Resp).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtAltAddress>(entity =>
        {
            entity.HasKey(e => e.PtId).HasName("pkpt_alt_address");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Address1).IsFixedLength();
            entity.Property(e => e.Address2).IsFixedLength();
            entity.Property(e => e.Address3).IsFixedLength();
            entity.Property(e => e.BusTel).IsFixedLength();
            entity.Property(e => e.BusTelExt).IsFixedLength();
            entity.Property(e => e.City).IsFixedLength();
            entity.Property(e => e.County).IsFixedLength();
            entity.Property(e => e.CurEntry).IsFixedLength();
            entity.Property(e => e.EmailAddress).IsFixedLength();
            entity.Property(e => e.FaxTel).IsFixedLength();
            entity.Property(e => e.HomeTel).IsFixedLength();
            entity.Property(e => e.MobileTel).IsFixedLength();
            entity.Property(e => e.PcZip).IsFixedLength();
            entity.Property(e => e.PrvState).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtAmdt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAmdtId }).HasName("pkpt_amdt");

            entity.ToTable("pt_amdt", tb =>
                {
                    tb.HasTrigger("tD_pt_amdt");
                    tb.HasTrigger("tU_pt_amdt");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprFlag).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtAmdtMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAmdtId, e.RevisionNo }).HasName("pkpt_amdt_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprFlag).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtAsmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtAsmtId }).HasName("pkpt_asmt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtAsmtResult>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtAsmtId, e.AsmtCompName }).HasName("pkpt_asmt_result");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AsmtCompName).IsFixedLength();
            entity.Property(e => e.AsmtGroupName).IsFixedLength();
            entity.Property(e => e.AsmtStatus).IsFixedLength();
            entity.Property(e => e.GradeDesc).IsFixedLength();
            entity.Property(e => e.StatusDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UomDesc).IsFixedLength();
        });

        modelBuilder.Entity<PtAuditModificationChkSum>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.TableName }).HasName("pkpt_audit_modification_chk_sum");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TableName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtAuth>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAuthId }).HasName("pkpt_auth");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AuthCd).IsFixedLength();
            entity.Property(e => e.AuthInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PtCldr>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtCldrId }).HasName("pkpt_cldr");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.OrderInd).IsFixedLength();
            entity.Property(e => e.PtCldrDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtClinicalNotification>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtClinicalNotificationId }).HasName("pkpt_clinical_notification");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AcceptedInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtClinicalNotificationCriteria>(entity =>
        {
            entity.HasKey(e => new { e.PtClinicalNotificationCriteriaId, e.PtId }).HasName("PK_clinical_notification_criteria");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ClinicalNotification).WithMany(p => p.PtClinicalNotificationCriteria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pt_clinical_notification_criteria_clinical_notification");

            entity.HasOne(d => d.Criteria).WithMany(p => p.PtClinicalNotificationCriteria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pt_clinical_notification_criteria_pt_list_query_criteria");

            entity.HasOne(d => d.Pt).WithMany(p => p.PtClinicalNotificationCriteria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pt_clinical_notification_criteria_pt");

            entity.HasOne(d => d.Query).WithMany(p => p.PtClinicalNotificationCriteria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_pt_clinical_notification_criteria_pt_list_query");
        });

        modelBuilder.Entity<PtCmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtCmtId }).HasName("pkpt_cmt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.PtCmt1).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtCmtTypNavigation).WithMany(p => p.PtCmt).HasConstraintName("fk2_pt_cmt");

            entity.HasOne(d => d.Pt).WithMany(p => p.PtCmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_cmt");
        });

        modelBuilder.Entity<PtCmtTyp>(entity =>
        {
            entity.HasKey(e => e.PtCmtTyp1).HasName("pkpt_cmt_typ");

            entity.Property(e => e.PtCmtTyp1).ValueGeneratedNever();
            entity.Property(e => e.PtCmtDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtCncrDiagnosis>(entity =>
        {
            entity.ToView("PtCncrDiagnosis");

            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.Chemo).IsFixedLength();
            entity.Property(e => e.CncrStage1).IsFixedLength();
            entity.Property(e => e.CncrStage2).IsFixedLength();
            entity.Property(e => e.CritDesc1).IsFixedLength();
            entity.Property(e => e.CritDesc2).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.IcdoSiteCd).IsFixedLength();
            entity.Property(e => e.MedOncFirstName).IsFixedLength();
            entity.Property(e => e.MedOncLastName).IsFixedLength();
            entity.Property(e => e.MedOncMiddleName).IsFixedLength();
            entity.Property(e => e.MedOncTitle).IsFixedLength();
            entity.Property(e => e.MorphCd).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.SchemeName1).IsFixedLength();
            entity.Property(e => e.SchemeName2).IsFixedLength();
            entity.Property(e => e.StageBasis1).IsFixedLength();
            entity.Property(e => e.StageBasis2).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtCncrStatus>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.CncrStatusId }).HasName("pkpt_cncr_status");

            entity.ToTable("pt_cncr_status", tb =>
                {
                    tb.HasTrigger("tD_pt_cncr_status");
                    tb.HasTrigger("tU_pt_cncr_status");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtDxCncr).WithMany(p => p.PtCncrStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_cncr_status");
        });

        modelBuilder.Entity<PtCncrStatusMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.CncrStatusId, e.RevisionNo }).HasName("pkpt_cncr_status_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtDxCncr).WithMany(p => p.PtCncrStatusMh).HasConstraintName("fk1_pt_cncr_status_mh");
        });

        modelBuilder.Entity<PtCncrStg>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtStageId }).HasName("pkpt_cncr_stg");

            entity.ToTable("pt_cncr_stg", tb =>
                {
                    tb.HasTrigger("tD_pt_cncr_stg");
                    tb.HasTrigger("tU_pt_cncr_stg");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.CncrStage).IsFixedLength();
            entity.Property(e => e.CritDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.StageBasis).IsFixedLength();
            entity.Property(e => e.StagedByInit).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtCncrStgCrit>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtStageId, e.HdrCd }).HasName("pkpt_cncr_stg_crit");

            entity.ToTable("pt_cncr_stg_crit", tb =>
                {
                    tb.HasTrigger("tD_pt_cncr_stg_crit");
                    tb.HasTrigger("tU_pt_cncr_stg_crit");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.HdrCd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.CritCd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtCncrStg).WithMany(p => p.PtCncrStgCrit)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_cncr_stg_crit");
        });

        modelBuilder.Entity<PtCncrStgCritMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtStageId, e.HdrCd, e.RevisionNo }).HasName("pkpt_cncr_stg_crit_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.HdrCd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.CritCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtCncrStgMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtStageId, e.RevisionNo }).HasName("pkpt_cncr_stg_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.CncrStage).IsFixedLength();
            entity.Property(e => e.CritDesc).IsFixedLength();
            entity.Property(e => e.StageBasis).IsFixedLength();
            entity.Property(e => e.StagedByInit).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtCommLog>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtCommLogId }).HasName("pkpt_comm_log");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.StatusCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtCommLog)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_comm_log");
        });

        modelBuilder.Entity<PtConsent>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtConsentId }).HasName("pkpt_consent");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.PtConsentCd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtConsentTypNavigation).WithMany(p => p.PtConsent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_consent");

            entity.HasOne(d => d.Pt).WithMany(p => p.PtConsent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_consent");
        });

        modelBuilder.Entity<PtContact>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtContactId }).HasName("pkpt_contact");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Address1).IsFixedLength();
            entity.Property(e => e.Address2).IsFixedLength();
            entity.Property(e => e.Address3).IsFixedLength();
            entity.Property(e => e.BusTel).IsFixedLength();
            entity.Property(e => e.BusTelExt).IsFixedLength();
            entity.Property(e => e.City).IsFixedLength();
            entity.Property(e => e.ContactFirstName).IsFixedLength();
            entity.Property(e => e.ContactName).IsFixedLength();
            entity.Property(e => e.County).IsFixedLength();
            entity.Property(e => e.HomeTel).IsFixedLength();
            entity.Property(e => e.MobileTel).IsFixedLength();
            entity.Property(e => e.PcZip).IsFixedLength();
            entity.Property(e => e.PrimaryCont).IsFixedLength();
            entity.Property(e => e.PrvState).IsFixedLength();
            entity.Property(e => e.SameAddrInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BusTelFmt).WithMany(p => p.PtContactBusTelFmt).HasConstraintName("fk5_pt_contact");

            entity.HasOne(d => d.ContactTypNavigation).WithMany(p => p.PtContact)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_pt_contact");

            entity.HasOne(d => d.Country).WithMany(p => p.PtContact).HasConstraintName("fk1_pt_contact");

            entity.HasOne(d => d.HomeTelFmt).WithMany(p => p.PtContactHomeTelFmt).HasConstraintName("fk6_pt_contact");

            entity.HasOne(d => d.PcZipFmt).WithMany(p => p.PtContactPcZipFmt).HasConstraintName("fk4_pt_contact");

            entity.HasOne(d => d.ReltnTypNavigation).WithMany(p => p.PtContact).HasConstraintName("fk2_pt_contact");
        });

        modelBuilder.Entity<PtDemgrAudit>(entity =>
        {
            entity.HasKey(e => e.PtId).HasName("pkpt_demgr_audit");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Pt).WithOne(p => p.PtDemgrAudit)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_demgr_audit");
        });

        modelBuilder.Entity<PtDoseData>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DoseDataId, e.CompName }).HasName("pkpt_dose_data");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UsedInd).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.AltValueTypNavigation).WithMany(p => p.PtDoseDataAltValueTypNavigation).HasConstraintName("fk3_pt_dose_data");

            entity.HasOne(d => d.CompValueTypNavigation).WithMany(p => p.PtDoseDataCompValueTypNavigation).HasConstraintName("fk2_pt_dose_data");

            entity.HasOne(d => d.Pt).WithMany(p => p.PtDoseData)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_dose_data");
        });

        modelBuilder.Entity<PtDx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DxId }).HasName("pkpt_dx");

            entity.ToTable("pt_dx", tb =>
                {
                    tb.HasTrigger("tD_pt_dx");
                    tb.HasTrigger("tI_pt_dx");
                    tb.HasTrigger("tU_pt_dx");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AeInd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ClinicalDesc).IsFixedLength();
            entity.Property(e => e.ConfirmDx).IsFixedLength();
            entity.Property(e => e.CsOfDthInd).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.DateApproxInd).IsFixedLength();
            entity.Property(e => e.DxName).IsFixedLength();
            entity.Property(e => e.DxTyp).IsFixedLength();
            entity.Property(e => e.EncounterDxInd).IsFixedLength();
            entity.Property(e => e.ExternalInd).IsFixedLength();
            entity.Property(e => e.HxOfInd).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.PublishInd).IsFixedLength();
            entity.Property(e => e.ReportedInd).IsFixedLength();
            entity.Property(e => e.StageOfDisease).IsFixedLength();
            entity.Property(e => e.StgCritDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UniqueCcdaId).IsFixedLength();
            entity.Property(e => e.ValidEntry).IsFixedLength();
            entity.Property(e => e.VisionDiagnosisId).IsFixedLength();

            entity.HasOne(d => d.DxMthdTypNavigation).WithMany(p => p.PtDx).HasConstraintName("fk4_pt_dx");

            entity.HasOne(d => d.Pt).WithMany(p => p.PtDx)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_pt_dx");

            entity.HasOne(d => d.ResolutionTypNavigation).WithMany(p => p.PtDx).HasConstraintName("fk2_pt_dx");

            entity.HasOne(d => d.IcdDx).WithMany(p => p.PtDx).HasConstraintName("fk1_pt_dx");
        });

        modelBuilder.Entity<PtDxCncr>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtDxId }).HasName("pkpt_dx_cncr");

            entity.ToTable("pt_dx_cncr", tb =>
                {
                    tb.HasTrigger("tD_pt_dx_cncr");
                    tb.HasTrigger("tI_pt_dx_cncr");
                    tb.HasTrigger("tU_pt_dx_cncr");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.DiseasePresentApexInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentApexLeftInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentApexRightInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentBaseInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentBaseLeftInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentBaseRightInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentMidInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentMidLeftInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentMidRightInd).IsFixedLength();
            entity.Property(e => e.DxCncrCmt).IsFixedLength();
            entity.Property(e => e.DxIcdSiteUnlockedInd)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.ErStatus).IsFixedLength();
            entity.Property(e => e.Her2neuInd).IsFixedLength();
            entity.Property(e => e.IcdoSiteCd).IsFixedLength();
            entity.Property(e => e.InSituCncrInd).IsFixedLength();
            entity.Property(e => e.InvasiveInd).IsFixedLength();
            entity.Property(e => e.LesDesc).IsFixedLength();
            entity.Property(e => e.LesTrackInd).IsFixedLength();
            entity.Property(e => e.MeasInd).IsFixedLength();
            entity.Property(e => e.MeasMask).IsFixedLength();
            entity.Property(e => e.MetInd).IsFixedLength();
            entity.Property(e => e.MorphCd).IsFixedLength();
            entity.Property(e => e.MultifocalInd).IsFixedLength();
            entity.Property(e => e.NodesAssessedInd).IsFixedLength();
            entity.Property(e => e.PrStatus).IsFixedLength();
            entity.Property(e => e.RecurInd).IsFixedLength();
            entity.Property(e => e.ResectInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtDx).WithOne(p => p.PtDxCncr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_dx_cncr");
        });

        modelBuilder.Entity<PtDxCncrMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtDxId, e.RevisionNo }).HasName("pkpt_dx_cncr_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.DiseasePresentApexInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentApexLeftInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentApexRightInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentBaseInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentBaseLeftInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentBaseRightInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentMidInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentMidLeftInd).IsFixedLength();
            entity.Property(e => e.DiseasePresentMidRightInd).IsFixedLength();
            entity.Property(e => e.DxCncrCmt).IsFixedLength();
            entity.Property(e => e.DxIcdSiteUnlockedInd)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.ErStatus).IsFixedLength();
            entity.Property(e => e.Her2neuInd).IsFixedLength();
            entity.Property(e => e.IcdoSiteCd).IsFixedLength();
            entity.Property(e => e.InSituCncrInd).IsFixedLength();
            entity.Property(e => e.InvasiveInd).IsFixedLength();
            entity.Property(e => e.LesDesc).IsFixedLength();
            entity.Property(e => e.LesTrackInd).IsFixedLength();
            entity.Property(e => e.MeasInd).IsFixedLength();
            entity.Property(e => e.MeasMask).IsFixedLength();
            entity.Property(e => e.MetInd).IsFixedLength();
            entity.Property(e => e.MorphCd).IsFixedLength();
            entity.Property(e => e.MultifocalInd).IsFixedLength();
            entity.Property(e => e.NodesAssessedInd).IsFixedLength();
            entity.Property(e => e.PrStatus).IsFixedLength();
            entity.Property(e => e.RecurInd).IsFixedLength();
            entity.Property(e => e.ResectInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtDxCode>(entity =>
        {
            entity.HasKey(e => new { e.PtDxCodeId, e.PtId, e.PtDxId }).HasName("pkpt_dx_code");

            entity.ToTable("pt_dx_code", tb =>
                {
                    tb.HasTrigger("tD_pt_dx_code");
                    tb.HasTrigger("tU_pt_dx_code");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.DxCd).IsFixedLength();
            entity.Property(e => e.DxCdDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ClsScheme).WithMany(p => p.PtDxCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_dx_code");

            entity.HasOne(d => d.PtDx).WithMany(p => p.PtDxCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_dx_code");
        });

        modelBuilder.Entity<PtDxCodeMh>(entity =>
        {
            entity.HasKey(e => new { e.PtDxCodeId, e.PtId, e.PtDxId, e.RevisionNo }).HasName("pkpt_dx_code_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.DxCd).IsFixedLength();
            entity.Property(e => e.DxCdDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtDxEvent>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtDxEventId }).HasName("pkpt_dx_event");

            entity.ToTable("pt_dx_event", tb =>
                {
                    tb.HasTrigger("tD_pt_dx_event");
                    tb.HasTrigger("tU_pt_dx_event");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtDxEventMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtDxEventId, e.RevisionNo }).HasName("pkpt_dx_event_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtDxExternal>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtDxExternalId }).HasName("pkpt_dx_external");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ClinicalDesc).IsFixedLength();
            entity.Property(e => e.ProbConcernActStatus).IsFixedLength();
            entity.Property(e => e.ProbObservationStatus).IsFixedLength();
            entity.Property(e => e.ProbParsingStatus).IsFixedLength();
            entity.Property(e => e.ReconStatus).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UniqueCcdaId).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtDxExternal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_dx_external");

            entity.HasOne(d => d.ReconSourceTypNavigation).WithMany(p => p.PtDxExternal).HasConstraintName("fk3_pt_dx_external");

            entity.HasOne(d => d.ResolutionTypNavigation).WithMany(p => p.PtDxExternal).HasConstraintName("fk2_pt_dx_external");

            entity.HasOne(d => d.TransitionOfCareInbound).WithMany(p => p.PtDxExternal).HasConstraintName("fk4_pt_dx_external");
        });

        modelBuilder.Entity<PtDxInvasiveTyp>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtDxId, e.PtDxInvasiveTypId }).HasName("pkpt_dx_invasive_typ");

            entity.ToTable("pt_dx_invasive_typ", tb =>
                {
                    tb.HasTrigger("tD_pt_dx_invasive_typ");
                    tb.HasTrigger("tU_pt_dx_invasive_typ");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.InvasiveTypDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtDx).WithMany(p => p.PtDxInvasiveTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_dx_invasive_typ");
        });

        modelBuilder.Entity<PtDxInvasiveTypMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtDxId, e.PtDxInvasiveTypId, e.RevisionNo }).HasName("pkpt_dx_invasive_typ_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.InvasiveTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtDx).WithMany(p => p.PtDxInvasiveTypMh)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_dx_invasive_typ_mh");
        });

        modelBuilder.Entity<PtDxMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DxId, e.RevisionNo }).HasName("pkpt_dx_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AeInd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ClinicalDesc).IsFixedLength();
            entity.Property(e => e.ConfirmDx).IsFixedLength();
            entity.Property(e => e.CsOfDthInd).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.DateApproxInd).IsFixedLength();
            entity.Property(e => e.DxName).IsFixedLength();
            entity.Property(e => e.DxTyp).IsFixedLength();
            entity.Property(e => e.EncounterDxInd).IsFixedLength();
            entity.Property(e => e.ExternalInd).IsFixedLength();
            entity.Property(e => e.HxOfInd).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.PublishInd).IsFixedLength();
            entity.Property(e => e.ReportedInd).IsFixedLength();
            entity.Property(e => e.StageOfDisease).IsFixedLength();
            entity.Property(e => e.StgCritDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UniqueCcdaId).IsFixedLength();
            entity.Property(e => e.ValidEntry).IsFixedLength();
            entity.Property(e => e.VisionDiagnosisId).IsFixedLength();
        });

        modelBuilder.Entity<PtDxStatus>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DxStatusId }).HasName("pkpt_dx_status");

            entity.ToTable("pt_dx_status", tb =>
                {
                    tb.HasTrigger("tD_pt_dx_status");
                    tb.HasTrigger("tU_pt_dx_status");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.ImprDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtVisit).WithMany(p => p.PtDxStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_dx_status");
        });

        modelBuilder.Entity<PtDxStatusHx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtDxId, e.PtDxStatusId }).HasName("pkpt_dx_status_hx");

            entity.ToTable("pt_dx_status_hx", tb =>
                {
                    tb.HasTrigger("tD_pt_dx_status_hx");
                    tb.HasTrigger("tU_pt_dx_status_hx");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ResolutionDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtDxStatusHxMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtDxId, e.PtDxStatusId, e.RevisionNo }).HasName("pkpt_dx_status_hx_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ResolutionDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtDxStatusMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DxStatusId, e.RevisionNo }).HasName("pkpt_dx_status_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.ImprDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtEducTopic>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtEducId }).HasName("pkpt_educ_topic");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtEducation>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtEducationId }).HasName("pkpt_education");

            entity.ToTable("pt_education", tb =>
                {
                    tb.HasTrigger("tD_pt_education");
                    tb.HasTrigger("tU_pt_education");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.EducationCmt).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtEducationMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtEducationId, e.RevisionNo }).HasName("pkpt_education_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.EducationCmt).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtErrorTracking>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.EventTyp, e.ErrorPtActualId }).HasName("pkpt_error_tracking");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtExam>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtExamId }).HasName("pkpt_exam");

            entity.ToTable("pt_exam", tb =>
                {
                    tb.HasTrigger("tD_pt_exam");
                    tb.HasTrigger("tU_pt_exam");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.ExamCd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtExamAttr>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtExamId, e.PtExamSystemId, e.PtExamCompId, e.PtExamAttrId }).HasName("pkpt_exam_attr");

            entity.ToTable("pt_exam_attr", tb =>
                {
                    tb.HasTrigger("tD_pt_exam_attr");
                    tb.HasTrigger("tU_pt_exam_attr");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.CompDesc).IsFixedLength();
            entity.Property(e => e.ExamAsmtDesc).IsFixedLength();
            entity.Property(e => e.ExamCompAttr).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtExamAttrMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtExamId, e.PtExamSystemId, e.PtExamCompId, e.PtExamAttrId, e.RevisionNo }).HasName("pkpt_exam_attr_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.CompDesc).IsFixedLength();
            entity.Property(e => e.ExamAsmtDesc).IsFixedLength();
            entity.Property(e => e.ExamCompAttr).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtExamComp>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtExamId, e.PtExamSystemId, e.PtExamCompId }).HasName("pkpt_exam_comp");

            entity.ToTable("pt_exam_comp", tb =>
                {
                    tb.HasTrigger("tD_pt_exam_comp");
                    tb.HasTrigger("tU_pt_exam_comp");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.CompAsmtCd).IsFixedLength();
            entity.Property(e => e.CompDesc).IsFixedLength();
            entity.Property(e => e.ExclCompFromDesc).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.NegDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.SystemDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IcdDx).WithMany(p => p.PtExamComp).HasConstraintName("fk2_pt_exam_comp");
        });

        modelBuilder.Entity<PtExamCompMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtExamId, e.PtExamSystemId, e.PtExamCompId, e.RevisionNo }).HasName("pkpt_exam_comp_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.CompAsmtCd).IsFixedLength();
            entity.Property(e => e.CompDesc).IsFixedLength();
            entity.Property(e => e.ExclCompFromDesc).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.NegDesc).IsFixedLength();
            entity.Property(e => e.SystemDesc).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtExamMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtExamId, e.RevisionNo }).HasName("pkpt_exam_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.ExamCd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtExamSystem>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtExamId, e.PtExamSystemId }).HasName("pkpt_exam_system");

            entity.ToTable("pt_exam_system", tb =>
                {
                    tb.HasTrigger("tD_pt_exam_system");
                    tb.HasTrigger("tU_pt_exam_system");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.CustomAsmtInd).IsFixedLength();
            entity.Property(e => e.DictatedInd).IsFixedLength();
            entity.Property(e => e.MrInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.SystemAsmtCd).IsFixedLength();
            entity.Property(e => e.SystemDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtExamSystemMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtExamId, e.PtExamSystemId, e.RevisionNo }).HasName("pkpt_exam_system_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.CustomAsmtInd).IsFixedLength();
            entity.Property(e => e.DictatedInd).IsFixedLength();
            entity.Property(e => e.MrInd).IsFixedLength();
            entity.Property(e => e.SystemAsmtCd).IsFixedLength();
            entity.Property(e => e.SystemDesc).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtFamHx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.FamHxId }).HasName("pkpt_fam_hx");

            entity.ToTable("pt_fam_hx", tb =>
                {
                    tb.HasTrigger("tD_pt_fam_hx");
                    tb.HasTrigger("tU_pt_fam_hx");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AliveInd).IsFixedLength();
            entity.Property(e => e.FamMbrCmt).IsFixedLength();
            entity.Property(e => e.FamMbrName).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtFamHxMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.FamHxId, e.RevisionNo }).HasName("pkpt_fam_hx_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AliveInd).IsFixedLength();
            entity.Property(e => e.FamMbrCmt).IsFixedLength();
            entity.Property(e => e.FamMbrName).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtFamHxProb>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.FamHxProbId }).HasName("pkpt_fam_hx_prob");

            entity.ToTable("pt_fam_hx_prob", tb =>
                {
                    tb.HasTrigger("tD_pt_fam_hx_prob");
                    tb.HasTrigger("tU_pt_fam_hx_prob");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CauseOfDeathInd).IsFixedLength();
            entity.Property(e => e.DxCd).IsFixedLength();
            entity.Property(e => e.ProbCmt).IsFixedLength();
            entity.Property(e => e.ProbDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtFamHxProbMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.FamHxProbId, e.RevisionNo }).HasName("pkpt_fam_hx_prob_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CauseOfDeathInd).IsFixedLength();
            entity.Property(e => e.DxCd).IsFixedLength();
            entity.Property(e => e.ProbCmt).IsFixedLength();
            entity.Property(e => e.ProbDesc).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtFbmCase>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtFbmCaseId }).HasName("pkpt_fbm_case");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.FbmInstId).IsFixedLength();
            entity.Property(e => e.OrgStkhId).IsFixedLength();
            entity.Property(e => e.ProviderStkhId).IsFixedLength();
            entity.Property(e => e.RcptCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtFbmCaseSch>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtFbmCaseSchId }).HasName("pkpt_fbm_case_sch");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.PtNotificationInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtFbmResp>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtFbmRespId }).HasName("pkpt_fbm_resp");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtFsTemplate>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.Userid, e.InstId }).HasName("pkpt_fs_template");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PtGnrcActual>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtActualId }).HasName("pkpt_gnrc_actual");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.IntvName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtGuar>(entity =>
        {
            entity.HasKey(e => new { e.GuarId, e.PtId }).HasName("pkpt_guar");

            entity.Property(e => e.GuarId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Address1).IsFixedLength();
            entity.Property(e => e.Address2).IsFixedLength();
            entity.Property(e => e.Address3).IsFixedLength();
            entity.Property(e => e.BusTel).IsFixedLength();
            entity.Property(e => e.BusTelExt).IsFixedLength();
            entity.Property(e => e.City).IsFixedLength();
            entity.Property(e => e.County).IsFixedLength();
            entity.Property(e => e.CurrentInd).IsFixedLength();
            entity.Property(e => e.GuarFirstName).IsFixedLength();
            entity.Property(e => e.GuarInitial).IsFixedLength();
            entity.Property(e => e.GuarLastName).IsFixedLength();
            entity.Property(e => e.GuarOrgName).IsFixedLength();
            entity.Property(e => e.GuarSexCd).IsFixedLength();
            entity.Property(e => e.GuarSinSsn).IsFixedLength();
            entity.Property(e => e.GuarTyp).IsFixedLength();
            entity.Property(e => e.HomeTel).IsFixedLength();
            entity.Property(e => e.PcZip).IsFixedLength();
            entity.Property(e => e.PrvState).IsFixedLength();
            entity.Property(e => e.SameAddrInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BusTelFmt).WithMany(p => p.PtGuarBusTelFmt).HasConstraintName("fk3_pt_guar");

            entity.HasOne(d => d.HomeTelFmt).WithMany(p => p.PtGuarHomeTelFmt).HasConstraintName("fk4_pt_guar");

            entity.HasOne(d => d.PcZipFmt).WithMany(p => p.PtGuarPcZipFmt).HasConstraintName("fk2_pt_guar");

            entity.HasOne(d => d.Pt).WithMany(p => p.PtGuar)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_guar");
        });

        modelBuilder.Entity<PtGyneHx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.GyneHxId }).HasName("pkpt_gyne_hx");

            entity.ToTable("pt_gyne_hx", tb =>
                {
                    tb.HasTrigger("tD_pt_gyne_hx");
                    tb.HasTrigger("tU_pt_gyne_hx");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.GyneDetailDesc).IsFixedLength();
            entity.Property(e => e.HormoneDesc).IsFixedLength();
            entity.Property(e => e.HormoneUseInd).IsFixedLength();
            entity.Property(e => e.LastTestsDesc).IsFixedLength();
            entity.Property(e => e.MensesDesc).IsFixedLength();
            entity.Property(e => e.MpauseCd).IsFixedLength();
            entity.Property(e => e.MpauseDesc).IsFixedLength();
            entity.Property(e => e.MpauseHormoneInd).IsFixedLength();
            entity.Property(e => e.MpauseReasonDesc).IsFixedLength();
            entity.Property(e => e.MrMammogramCmt).IsFixedLength();
            entity.Property(e => e.MrPapCmt).IsFixedLength();
            entity.Property(e => e.OcpUseInd).IsFixedLength();
            entity.Property(e => e.OtherHormoneUseInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtGyneHxMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.GyneHxId, e.RevisionNo }).HasName("pkpt_gyne_hx_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.GyneDetailDesc).IsFixedLength();
            entity.Property(e => e.HormoneDesc).IsFixedLength();
            entity.Property(e => e.HormoneUseInd).IsFixedLength();
            entity.Property(e => e.LastTestsDesc).IsFixedLength();
            entity.Property(e => e.MensesDesc).IsFixedLength();
            entity.Property(e => e.MpauseCd).IsFixedLength();
            entity.Property(e => e.MpauseDesc).IsFixedLength();
            entity.Property(e => e.MpauseHormoneInd).IsFixedLength();
            entity.Property(e => e.MpauseReasonDesc).IsFixedLength();
            entity.Property(e => e.MrMammogramCmt).IsFixedLength();
            entity.Property(e => e.MrPapCmt).IsFixedLength();
            entity.Property(e => e.OcpUseInd).IsFixedLength();
            entity.Property(e => e.OtherHormoneUseInd).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtHpi>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.HpiId }).HasName("pkpt_hpi");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.DetailInd).IsFixedLength();
            entity.Property(e => e.ProvInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtHxCmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtHxCmtId }).HasName("pkpt_hx_cmt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.NoHxInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtHxResp>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.HdrTyp, e.QuestionNo, e.TransLogTstamp }).HasName("pkpt_hx_resp");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.HxOfInd).IsFixedLength();
            entity.Property(e => e.RespBoolean).IsFixedLength();
            entity.Property(e => e.RespInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntry).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtHxResp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_hx_resp");

            entity.HasOne(d => d.HxQuestion).WithMany(p => p.PtHxResp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_hx_resp");
        });

        modelBuilder.Entity<PtImmunizationDetail>(entity =>
        {
            entity.HasKey(e => e.PtId).HasName("pkpt_immunization_detail");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.DiscloseInd).IsFixedLength();
            entity.Property(e => e.NokAddress).IsFixedLength();
            entity.Property(e => e.NokCity).IsFixedLength();
            entity.Property(e => e.NokEmailAddr).IsFixedLength();
            entity.Property(e => e.NokGivenName).IsFixedLength();
            entity.Property(e => e.NokPcZip).IsFixedLength();
            entity.Property(e => e.NokPrvState).IsFixedLength();
            entity.Property(e => e.NokSurname).IsFixedLength();
            entity.Property(e => e.NokTelAreaCd).IsFixedLength();
            entity.Property(e => e.NokTelLocalNum).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtIndHx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtIndHxId }).HasName("pkpt_ind_hx");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.PtIndValue).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PtInfectionCtrl>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtInfectionCtrlId }).HasName("pkpt_infection_ctrl");

            entity.ToTable("pt_infection_ctrl", tb =>
                {
                    tb.HasTrigger("tD_pt_infection_ctrl");
                    tb.HasTrigger("tU_pt_infection_ctrl");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.IsolationInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtInfectionCtrlMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtInfectionCtrlId, e.RevisionNo }).HasName("pkpt_infection_ctrl_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.IsolationInd).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtInfoRequest>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtInfoRequestId }).HasName("pkpt_info_request");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AuthorizedInd)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.AuthorizedInstId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ProvInstId).IsFixedLength();
            entity.Property(e => e.RequestCmt).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.StatusCd)
                .HasDefaultValue("P")
                .IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd)
                .HasDefaultValue("Y")
                .IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.PtInfoRequest).HasConstraintName("fk3_pt_info_request");

            entity.HasOne(d => d.DeliveryMethodActualTypNavigation).WithMany(p => p.PtInfoRequestDeliveryMethodActualTypNavigation).HasConstraintName("fk9_pt_info_request");

            entity.HasOne(d => d.DeliveryMethodRequestedTypNavigation).WithMany(p => p.PtInfoRequestDeliveryMethodRequestedTypNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk8_pt_info_request");

            entity.HasOne(d => d.Inst).WithMany(p => p.PtInfoRequest)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_info_request");

            entity.HasOne(d => d.Pt).WithMany(p => p.PtInfoRequest)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_info_request");

            entity.HasOne(d => d.RequestTypNavigation).WithMany(p => p.PtInfoRequest)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk7_pt_info_request");

            entity.HasOne(d => d.Userid).WithMany(p => p.PtInfoRequestUserid).HasConstraintName("fk5_pt_info_request");

            entity.HasOne(d => d.UseridNavigation).WithMany(p => p.PtInfoRequestUseridNavigation).HasConstraintName("fk4_pt_info_request");

            entity.HasOne(d => d.PtVisit).WithMany(p => p.PtInfoRequest).HasConstraintName("fk6_pt_info_request");
        });

        modelBuilder.Entity<PtInsPrecert>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.FinancialInsId, e.InsPrecertId }).HasName("pkpt_ins_precert");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.ContactFax).IsFixedLength();
            entity.Property(e => e.ContactFirstName).IsFixedLength();
            entity.Property(e => e.ContactLastName).IsFixedLength();
            entity.Property(e => e.ContactTel).IsFixedLength();
            entity.Property(e => e.ContactTelExt).IsFixedLength();
            entity.Property(e => e.PrecertNo).IsFixedLength();
            entity.Property(e => e.StatusInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.ContactTelFmt).WithMany(p => p.PtInsPrecert).HasConstraintName("fk2_pt_ins_precert");

            entity.HasOne(d => d.FinancialIns).WithMany(p => p.PtInsPrecert)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_ins_precert");
        });

        modelBuilder.Entity<PtInsPrecertDet>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.FinancialInsId, e.InsPrecertId, e.InsPrecertDetId }).HasName("pkpt_ins_precert_det");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.AutoAdjustInd).IsFixedLength();
            entity.Property(e => e.PrecertRcvInd).IsFixedLength();
            entity.Property(e => e.PrecertReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InsPrecertTypNavigation).WithMany(p => p.PtInsPrecertDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_ins_precert_det");

            entity.HasOne(d => d.PtInsPrecert).WithMany(p => p.PtInsPrecertDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_ins_precert_det");
        });

        modelBuilder.Entity<PtInsPrecertDetHx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.FinancialInsId, e.InsPrecertId, e.InsPrecertDetId, e.InsPrecertDetHxId }).HasName("pkpt_ins_precert_det_hx");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.AutoAdjustInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PtInsPrecertHx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.FinancialInsId, e.InsPrecertId, e.InsPrecertHxId }).HasName("pkpt_ins_precert_hx");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.PrecertNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtInstAccess>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.InstId }).HasName("pkpt_inst_access");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveVisitInd).IsFixedLength();
            entity.Property(e => e.RestrictAccessInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtInstKey>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtInstKeyId }).HasName("pkpt_inst_key");

            entity.ToTable("pt_inst_key", tb => tb.HasTrigger("tI_pt_inst_key"));

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CurValueInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpperPtKeyValue).UseCollation("Latin1_General_100_CI_AI_SC");
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtKeyCdNavigation).WithMany(p => p.PtInstKey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_inst_key");
        });

        modelBuilder.Entity<PtInteraction>(entity =>
        {
            entity.HasKey(e => e.PtInteractionId).HasName("pkpt_interaction");

            entity.Property(e => e.PtInteractionId).ValueGeneratedNever();
            entity.Property(e => e.PtInteractionDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PtIv>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtIvId }).HasName("pkpt_iv");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.IvQstr).WithMany(p => p.PtIv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_iv");

            entity.HasOne(d => d.PtVisit).WithMany(p => p.PtIv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_iv");
        });

        modelBuilder.Entity<PtIvAbsorption>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtIvTherapyId, e.PtIvAbsorbId }).HasName("pkpt_iv_absorption");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtIvTherapy).WithMany(p => p.PtIvAbsorption)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_iv_absorption");
        });

        modelBuilder.Entity<PtIvResp>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtIvId, e.IvQstrCatId }).HasName("pkpt_iv_resp");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Resp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IvQstrCat).WithMany(p => p.PtIvResp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_iv_resp");

            entity.HasOne(d => d.PtIv).WithMany(p => p.PtIvResp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_iv_resp");
        });

        modelBuilder.Entity<PtIvRespItem>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtIvId, e.IvQstrCatId, e.IvCatRespId }).HasName("pkpt_iv_resp_item");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Resp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IvQstrResp).WithMany(p => p.PtIvRespItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_iv_resp_item");

            entity.HasOne(d => d.PtIvResp).WithMany(p => p.PtIvRespItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_iv_resp_item");
        });

        modelBuilder.Entity<PtIvTherapy>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtIvTherapyId }).HasName("pkpt_iv_therapy");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.GnrcIvFluidName).IsFixedLength();
            entity.Property(e => e.IvFluidCd).IsFixedLength();
            entity.Property(e => e.IvFluidName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgtDoseUnitNavigation).WithMany(p => p.PtIvTherapyAgtDoseUnitNavigation).HasConstraintName("fk2_pt_iv_therapy");

            entity.HasOne(d => d.InfusionTypNavigation).WithMany(p => p.PtIvTherapy).HasConstraintName("fk1_pt_iv_therapy");

            entity.HasOne(d => d.IvRateUnitNavigation).WithMany(p => p.PtIvTherapyIvRateUnitNavigation).HasConstraintName("fk3_pt_iv_therapy");
        });

        modelBuilder.Entity<PtKeyCd>(entity =>
        {
            entity.HasKey(e => e.PtKeyCd1).HasName("pkpt_key_cd");

            entity.Property(e => e.PtKeyCd1).ValueGeneratedNever();
            entity.Property(e => e.PtKeyDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtKeyScopeTypNavigation).WithMany(p => p.PtKeyCd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_key_cd");
        });

        modelBuilder.Entity<PtKeyCdCulture>(entity =>
        {
            entity.ToView("pt_key_cd_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
        });

        modelBuilder.Entity<PtKeyScopeTyp>(entity =>
        {
            entity.HasKey(e => e.PtKeyScopeTyp1).HasName("pkpt_key_scope_typ");

            entity.Property(e => e.PtKeyScopeTyp1).ValueGeneratedNever();
            entity.Property(e => e.ScopeTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PtKeyScopeTypCulture>(entity =>
        {
            entity.ToView("pt_key_scope_typ_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
        });

        modelBuilder.Entity<PtLabAsc>(entity =>
        {
            entity.Property(e => e.AscNo).IsFixedLength();
            entity.Property(e => e.AudtrFlag).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.PtLabAscSeqNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtLes>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtLesId }).HasName("pkpt_les");

            entity.ToTable("pt_les", tb =>
                {
                    tb.HasTrigger("tD_pt_les");
                    tb.HasTrigger("tU_pt_les");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.IcdoSiteCd).IsFixedLength();
            entity.Property(e => e.LesDesc).IsFixedLength();
            entity.Property(e => e.MeasInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TrackInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtDxCncr).WithMany(p => p.PtLes).HasConstraintName("fk1_pt_les");
        });

        modelBuilder.Entity<PtLesAsmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.LesAsmtId }).HasName("pkpt_les_asmt");

            entity.ToTable("pt_les_asmt", tb =>
                {
                    tb.HasTrigger("tD_pt_les_asmt");
                    tb.HasTrigger("tU_pt_les_asmt");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.SizeAsmt).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtCncrStatus).WithMany(p => p.PtLesAsmt).HasConstraintName("fk1_pt_les_asmt");
        });

        modelBuilder.Entity<PtLesAsmtMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.LesAsmtId, e.RevisionNo }).HasName("pkpt_les_asmt_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.SizeAsmt).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtCncrStatus).WithMany(p => p.PtLesAsmtMh).HasConstraintName("fk1_pt_les_asmt_mh");

            entity.HasOne(d => d.PtLes).WithMany(p => p.PtLesAsmtMh)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_les_asmt_mh");
        });

        modelBuilder.Entity<PtLesMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtLesId, e.RevisionNo }).HasName("pkpt_les_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.IcdoSiteCd).IsFixedLength();
            entity.Property(e => e.LesDesc).IsFixedLength();
            entity.Property(e => e.MeasInd).IsFixedLength();
            entity.Property(e => e.TrackInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtDxCncr).WithMany(p => p.PtLesMh).HasConstraintName("fk1_pt_les_mh");
        });

        modelBuilder.Entity<PtListQuery>(entity =>
        {
            entity.HasKey(e => e.PtListQueryId).HasName("pkpt_list_query");

            entity.Property(e => e.PtListQueryId).ValueGeneratedNever();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.IncludeDeceasedInd).IsFixedLength();
            entity.Property(e => e.LastRunInstId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtListQueryCriteria>(entity =>
        {
            entity.HasKey(e => e.PtListQueryCriteriaId).HasName("pkpt_list_query_criteria");

            entity.Property(e => e.PtListQueryCriteriaId).ValueGeneratedNever();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtListQuery).WithMany(p => p.PtListQueryCriteria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_list_query_criteria");
        });

        modelBuilder.Entity<PtListQueryCriteriaValue>(entity =>
        {
            entity.HasKey(e => new { e.PtListQueryCriteriaId, e.CriteriaValueTyp }).HasName("pkpt_list_query_criteria_value");

            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.PtListQueryCriteria).WithMany(p => p.PtListQueryCriteriaValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_list_query_criteria_val");
        });

        modelBuilder.Entity<PtMedHx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtMedId }).HasName("pkpt_med_hx");

            entity.ToTable("pt_med_hx", tb =>
                {
                    tb.HasTrigger("tD_pt_med_hx");
                    tb.HasTrigger("tU_pt_med_hx");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveDxInd).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.ProbDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TxDesc).IsFixedLength();
            entity.Property(e => e.TxInd).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtMedHxMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtMedId, e.RevisionNo }).HasName("pkpt_med_hx_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveDxInd).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.ProbDesc).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TxDesc).IsFixedLength();
            entity.Property(e => e.TxInd).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtMerge>(entity =>
        {
            entity.HasKey(e => e.PtIdMerged).HasName("pkpt_merge");

            entity.Property(e => e.PtIdMerged).IsFixedLength();
            entity.Property(e => e.PtIdDuplicate).IsFixedLength();
            entity.Property(e => e.PtIdMaster).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PtMuScore>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.CompliancePrdId }).HasName("pkpt_mu_score");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActualMedInd).IsFixedLength();
            entity.Property(e => e.AllergyInd).IsFixedLength();
            entity.Property(e => e.DemographicsInd).IsFixedLength();
            entity.Property(e => e.DobInd).IsFixedLength();
            entity.Property(e => e.DodInd).IsFixedLength();
            entity.Property(e => e.EducationInd).IsFixedLength();
            entity.Property(e => e.ElectronicNoteInd).IsFixedLength();
            entity.Property(e => e.EthnicityInd).IsFixedLength();
            entity.Property(e => e.FamilyHlthHstInd).IsFixedLength();
            entity.Property(e => e.GenderInd).IsFixedLength();
            entity.Property(e => e.LangInd).IsFixedLength();
            entity.Property(e => e.MedInd).IsFixedLength();
            entity.Property(e => e.MedReconInd).IsFixedLength();
            entity.Property(e => e.PghdInd).IsFixedLength();
            entity.Property(e => e.PortalAcctInd).IsFixedLength();
            entity.Property(e => e.PortalSendInd).IsFixedLength();
            entity.Property(e => e.PortalVdtInd).IsFixedLength();
            entity.Property(e => e.ProbInd).IsFixedLength();
            entity.Property(e => e.RaceInd).IsFixedLength();
            entity.Property(e => e.RemInfoReqInd).IsFixedLength();
            entity.Property(e => e.RemSentInd).IsFixedLength();
            entity.Property(e => e.SmokingInd).IsFixedLength();
            entity.Property(e => e.SmokingInfoReqInd).IsFixedLength();
            entity.Property(e => e.Stage1BmiInd).IsFixedLength();
            entity.Property(e => e.Stage1DiastolicInd).IsFixedLength();
            entity.Property(e => e.Stage1HtInd).IsFixedLength();
            entity.Property(e => e.Stage1SystolicInd).IsFixedLength();
            entity.Property(e => e.Stage1VitalsInd).IsFixedLength();
            entity.Property(e => e.Stage1VitalsInfoReqInd).IsFixedLength();
            entity.Property(e => e.Stage1WtInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VisitInd).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtMuScore)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_mu_score");
        });

        modelBuilder.Entity<PtName>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtNameId }).HasName("pkpt_name");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.FirstName).IsFixedLength();
            entity.Property(e => e.LastName).IsFixedLength();
            entity.Property(e => e.MiddleName).IsFixedLength();
            entity.Property(e => e.NameCd).IsFixedLength();
            entity.Property(e => e.NameSuffix).IsFixedLength();
            entity.Property(e => e.PtFirstNameSdx).IsFixedLength();
            entity.Property(e => e.PtLastNameSdx).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpperLastName)
                .IsFixedLength()
                .UseCollation("Latin1_General_100_CI_AI_SC");
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.NameCdNavigation).WithMany(p => p.PtName).HasConstraintName("fk1_pt_name");
        });

        modelBuilder.Entity<PtNonCncrDiagnosis>(entity =>
        {
            entity.ToView("PtNonCncrDiagnosis");

            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.Chemo).IsFixedLength();
            entity.Property(e => e.CncrStage1).IsFixedLength();
            entity.Property(e => e.CncrStage2).IsFixedLength();
            entity.Property(e => e.CritDesc1).IsFixedLength();
            entity.Property(e => e.CritDesc2).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.MedOncFirstName).IsFixedLength();
            entity.Property(e => e.MedOncLastName).IsFixedLength();
            entity.Property(e => e.MedOncMiddleName).IsFixedLength();
            entity.Property(e => e.MedOncTitle).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.SchemeName1).IsFixedLength();
            entity.Property(e => e.SchemeName2).IsFixedLength();
            entity.Property(e => e.StageBasis1).IsFixedLength();
            entity.Property(e => e.StageBasis2).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtOption>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtOptionId }).HasName("pkpt_option");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtVisit).WithMany(p => p.PtOption).HasConstraintName("fk1_pt_option");
        });

        modelBuilder.Entity<PtOptionComp>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtOptionId, e.OptionSeqNo }).HasName("pkpt_option_comp");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.Action).IsFixedLength();
            entity.Property(e => e.CompAttr).IsFixedLength();
            entity.Property(e => e.CompObj).IsFixedLength();
            entity.Property(e => e.CompObjDesc).IsFixedLength();
            entity.Property(e => e.CompTyp).IsFixedLength();
            entity.Property(e => e.CompValue).IsFixedLength();
            entity.Property(e => e.ConflictPref).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.RefRgm).IsFixedLength();
            entity.Property(e => e.RuleIdDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtOption).WithMany(p => p.PtOptionComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_option_comp");
        });

        modelBuilder.Entity<PtOptionCompDoseVrtn>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtOptionId, e.OptionSeqNo, e.DoseVrtnTyp }).HasName("pkpt_option_comp_dose_vrtn");

            entity.ToTable("pt_option_comp_dose_vrtn", tb =>
                {
                    tb.HasTrigger("tD_pt_option_comp_dose_vrtn");
                    tb.HasTrigger("tU_pt_option_comp_dose_vrtn");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtOptionCompDoseVrtnMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtOptionId, e.OptionSeqNo, e.DoseVrtnTyp, e.RevisionNo }).HasName("pkpt_option_comp_dose_vrtn_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtOptionTest>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtOptionId, e.PtResultId }).HasName("pkpt_option_test");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.NextInfInd).IsFixedLength();
            entity.Property(e => e.ResultPresentInd).IsFixedLength();
            entity.Property(e => e.ResultTypActual).IsFixedLength();
            entity.Property(e => e.ResultTypExpect).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.WasInfInd).IsFixedLength();
        });

        modelBuilder.Entity<PtOptionTrAsmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtOptionId, e.PtResultId }).HasName("pkpt_option_tr_asmt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.NextInfInd).IsFixedLength();
            entity.Property(e => e.ResultPresentInd).IsFixedLength();
            entity.Property(e => e.ResultTypActual).IsFixedLength();
            entity.Property(e => e.ResultTypExpect).IsFixedLength();
            entity.Property(e => e.TrCompName).IsFixedLength();
            entity.Property(e => e.TrSubCompName).IsFixedLength();
            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.WasInfInd).IsFixedLength();
        });

        modelBuilder.Entity<PtOverride>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtOverrideId }).HasName("pkpt_override");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RsnInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtPharm>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PharmId }).HasName("pkpt_pharm");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.PharmId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.PrimaryInd)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UseDesc).IsFixedLength();
        });

        modelBuilder.Entity<PtPic>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PicId }).HasName("pkpt_pic");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtPnComps>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.VisitNoteId, e.CompSeqNo }).HasName("pkpt_pn_comps");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TagCompName).IsFixedLength();
            entity.Property(e => e.TagName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidInd).IsFixedLength();
        });

        modelBuilder.Entity<PtPrefer>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtPreferTyp }).HasName("pkpt_prefer");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtPrefer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_prefer");

            entity.HasOne(d => d.PtPreferTypNavigation).WithMany(p => p.PtPrefer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_prefer");

            entity.HasOne(d => d.PtPreferValueTypNavigation).WithMany(p => p.PtPrefer).HasConstraintName("fk3_pt_prefer");
        });

        modelBuilder.Entity<PtPresumedImmunity>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DiseaseCd }).HasName("pkpt_presumed_immunity");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtProcedure>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.ProcedureId }).HasName("pkpt_procedure");

            entity.ToTable("pt_procedure", tb =>
                {
                    tb.HasTrigger("tD_pt_procedure");
                    tb.HasTrigger("tU_pt_procedure");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.DateApproxInd).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.ProcedureName).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntry).IsFixedLength();
        });

        modelBuilder.Entity<PtProcedureMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.ProcedureId, e.RevisionNo }).HasName("pkpt_procedure_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.DateApproxInd).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.ProcedureName).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntry).IsFixedLength();
        });

        modelBuilder.Entity<PtProf>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.InstId, e.UseridLink }).HasName("pkpt_prof");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.StkhConvFlag).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ProfReltnNavigation).WithMany(p => p.PtProf)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_prof");

            entity.HasOne(d => d.Userid).WithMany(p => p.PtProf)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_prof");
        });

        modelBuilder.Entity<PtProfExternal>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtProfExternalId }).HasName("pkpt_prof_external");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.StkhConvFlag).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtProfExternal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_prof_external");
        });

        modelBuilder.Entity<PtProvider>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtProviderId }).HasName("pkpt_provider");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.EndReasonCd).IsFixedLength();
            entity.Property(e => e.InternalInd).IsFixedLength();
            entity.Property(e => e.OrgStkhId).IsFixedLength();
            entity.Property(e => e.ProviderStkhId).IsFixedLength();
            entity.Property(e => e.RefCd).IsFixedLength();
            entity.Property(e => e.RefInternalStkhId).IsFixedLength();
            entity.Property(e => e.RefNote).IsFixedLength();
            entity.Property(e => e.SendCorspInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.OrgStkh).WithMany(p => p.PtProviderOrgStkh).HasConstraintName("fk3_pt_provider");

            entity.HasOne(d => d.ProviderStkh).WithMany(p => p.PtProviderProviderStkh).HasConstraintName("fk2_pt_provider");

            entity.HasOne(d => d.Pt).WithMany(p => p.PtProvider)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_provider");
        });

        modelBuilder.Entity<PtProviderMu>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.StkhId, e.CompliancePrdId }).HasName("pkpt_provider_mu");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.BmiInd).IsFixedLength();
            entity.Property(e => e.CareSumElectrTransmitInd).IsFixedLength();
            entity.Property(e => e.CareSumInd).IsFixedLength();
            entity.Property(e => e.CareTransInInd).IsFixedLength();
            entity.Property(e => e.CareTransOutInd).IsFixedLength();
            entity.Property(e => e.CpoeInd).IsFixedLength();
            entity.Property(e => e.DiastolicInd).IsFixedLength();
            entity.Property(e => e.ErxInd).IsFixedLength();
            entity.Property(e => e.HtInd).IsFixedLength();
            entity.Property(e => e.InfoRqstInd).IsFixedLength();
            entity.Property(e => e.LabInd).IsFixedLength();
            entity.Property(e => e.MessageInd).IsFixedLength();
            entity.Property(e => e.RemInfoReqInd).IsFixedLength();
            entity.Property(e => e.SystolicInd).IsFixedLength();
            entity.Property(e => e.TimelyPortalAccess).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VisitInd).IsFixedLength();
            entity.Property(e => e.VisitSumInd).IsFixedLength();
            entity.Property(e => e.VitalsInd).IsFixedLength();
            entity.Property(e => e.VitalsInfoReqInd).IsFixedLength();
            entity.Property(e => e.WtInd).IsFixedLength();

            entity.HasOne(d => d.CompliancePrd).WithMany(p => p.PtProviderMu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_pt_provider_mu");

            entity.HasOne(d => d.Pt).WithMany(p => p.PtProviderMu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_provider_mu");

            entity.HasOne(d => d.Stkh).WithMany(p => p.PtProviderMu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_provider_mu");
        });

        modelBuilder.Entity<PtQm>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.QmiId, e.QmcpId }).HasName("pkpt_qm");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.MetInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtQm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_qm");

            entity.HasOne(d => d.Qmcp).WithMany(p => p.PtQm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_qm");

            entity.HasOne(d => d.Qmi).WithMany(p => p.PtQm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_pt_qm");
        });

        modelBuilder.Entity<PtQmDetail>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtQmDetailId }).HasName("pkpt_qm_detail");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.NotDoneInd).IsFixedLength();
            entity.Property(e => e.QmEventCodeInd).IsFixedLength();
            entity.Property(e => e.StkhId)
                .HasDefaultValueSql("((0))")
                .IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtQmDetail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_qm_detail");

            entity.HasOne(d => d.Qmi).WithMany(p => p.PtQmDetail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_qm_detail");

            entity.HasOne(d => d.QrdaCat).WithMany(p => p.PtQmDetail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_pt_qm_detail");
        });

        modelBuilder.Entity<PtQmEventCode>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtQmEventCodeId }).HasName("pkpt_qm_event_code");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtQmEventCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_qm_event_code");

            entity.HasOne(d => d.QmEventCode).WithMany(p => p.PtQmEventCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_qm_event_code");
        });

        modelBuilder.Entity<PtQmEventCodeMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtQmEventCodeId, e.RevisionNo }).HasName("pkpt_qm_event_code_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtReconciliationHx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.ReconciliationHxId }).HasName("pkpt_reconciliation_hx");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CompleteReconInd).IsFixedLength();
            entity.Property(e => e.ManualUpdateInd).IsFixedLength();
            entity.Property(e => e.ReconciliationType).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtReconciliationHx)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_reconciliation_hx");
        });

        modelBuilder.Entity<PtRef>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtRefId }).HasName("pkpt_ref");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.RefFromInd).IsFixedLength();
            entity.Property(e => e.StkhConvFlag).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtResp>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.QstrName, e.QstrId, e.QuestionId }).HasName("pkpt_resp");

            entity.ToTable("pt_resp", tb =>
                {
                    tb.HasTrigger("tD_pt_resp");
                    tb.HasTrigger("tU_pt_resp");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.CorrectedEntryInd).IsFixedLength();
            entity.Property(e => e.QuestionNo).IsFixedLength();
            entity.Property(e => e.RespPick10Ind).IsFixedLength();
            entity.Property(e => e.RespPick11Ind).IsFixedLength();
            entity.Property(e => e.RespPick12Ind).IsFixedLength();
            entity.Property(e => e.RespPick13Ind).IsFixedLength();
            entity.Property(e => e.RespPick14Ind).IsFixedLength();
            entity.Property(e => e.RespPick15Ind).IsFixedLength();
            entity.Property(e => e.RespPick1Ind).IsFixedLength();
            entity.Property(e => e.RespPick2Ind).IsFixedLength();
            entity.Property(e => e.RespPick3Ind).IsFixedLength();
            entity.Property(e => e.RespPick4Ind).IsFixedLength();
            entity.Property(e => e.RespPick5Ind).IsFixedLength();
            entity.Property(e => e.RespPick6Ind).IsFixedLength();
            entity.Property(e => e.RespPick7Ind).IsFixedLength();
            entity.Property(e => e.RespPick8Ind).IsFixedLength();
            entity.Property(e => e.RespPick9Ind).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtRespHdr).WithMany(p => p.PtResp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_resp");
        });

        modelBuilder.Entity<PtRespHdr>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.QstrName, e.QstrId }).HasName("pkpt_resp_hdr");

            entity.ToTable("pt_resp_hdr", tb =>
                {
                    tb.HasTrigger("tD_pt_resp_hdr");
                    tb.HasTrigger("tU_pt_resp_hdr");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprFlag).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.AuthorStkhId).IsFixedLength();
            entity.Property(e => e.HxInd).IsFixedLength();
            entity.Property(e => e.PtEnteredInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtVisit).WithMany(p => p.PtRespHdr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_resp_hdr");
        });

        modelBuilder.Entity<PtRespHdrMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.QstrName, e.QstrId, e.RevisionNo }).HasName("pkpt_resp_hdr_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprFlag).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.AuthorStkhId).IsFixedLength();
            entity.Property(e => e.HxInd).IsFixedLength();
            entity.Property(e => e.PtEnteredInd).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtRespMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.QstrName, e.QstrId, e.QuestionId, e.RevisionNo }).HasName("pkpt_resp_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.CorrectedEntryInd).IsFixedLength();
            entity.Property(e => e.QuestionNo).IsFixedLength();
            entity.Property(e => e.RespPick10Ind).IsFixedLength();
            entity.Property(e => e.RespPick11Ind).IsFixedLength();
            entity.Property(e => e.RespPick12Ind).IsFixedLength();
            entity.Property(e => e.RespPick13Ind).IsFixedLength();
            entity.Property(e => e.RespPick14Ind).IsFixedLength();
            entity.Property(e => e.RespPick15Ind).IsFixedLength();
            entity.Property(e => e.RespPick1Ind).IsFixedLength();
            entity.Property(e => e.RespPick2Ind).IsFixedLength();
            entity.Property(e => e.RespPick3Ind).IsFixedLength();
            entity.Property(e => e.RespPick4Ind).IsFixedLength();
            entity.Property(e => e.RespPick5Ind).IsFixedLength();
            entity.Property(e => e.RespPick6Ind).IsFixedLength();
            entity.Property(e => e.RespPick7Ind).IsFixedLength();
            entity.Property(e => e.RespPick8Ind).IsFixedLength();
            entity.Property(e => e.RespPick9Ind).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtSelectConfig>(entity =>
        {
            entity.HasKey(e => e.PtSelectConfigId).HasName("pkpt_select_config");

            entity.Property(e => e.PtSelectConfigId).ValueGeneratedNever();
            entity.Property(e => e.CollapseHl7RowInd).IsFixedLength();
            entity.Property(e => e.PtSubmitAllInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PtSeq>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.SeqTyp }).HasName("pkpt_seq");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.SeqTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtSocHx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtSocHxId }).HasName("pkpt_soc_hx");

            entity.ToTable("pt_soc_hx", tb =>
                {
                    tb.HasTrigger("tD_pt_soc_hx");
                    tb.HasTrigger("tU_pt_soc_hx");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActivityDesc).IsFixedLength();
            entity.Property(e => e.AlcoholUseCd).IsFixedLength();
            entity.Property(e => e.DietDesc).IsFixedLength();
            entity.Property(e => e.HazMaterialDesc).IsFixedLength();
            entity.Property(e => e.HazardMatContactInd).IsFixedLength();
            entity.Property(e => e.ProdUseDesc).IsFixedLength();
            entity.Property(e => e.PtSocHxCmt).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.SmokingUseCd).IsFixedLength();
            entity.Property(e => e.SupportDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtSocHxDetail>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.SocHxDetailId }).HasName("pkpt_soc_hx_detail");

            entity.ToTable("pt_soc_hx_detail", tb =>
                {
                    tb.HasTrigger("tD_pt_soc_hx_detail");
                    tb.HasTrigger("tU_pt_soc_hx_detail");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.SocHxDetail).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtSocHxDetailMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.SocHxDetailId, e.RevisionNo }).HasName("pkpt_soc_hx_detail_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.SocHxDetail).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtSocHxMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtSocHxId, e.RevisionNo }).HasName("pkpt_soc_hx_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActivityDesc).IsFixedLength();
            entity.Property(e => e.AlcoholUseCd).IsFixedLength();
            entity.Property(e => e.DietDesc).IsFixedLength();
            entity.Property(e => e.HazMaterialDesc).IsFixedLength();
            entity.Property(e => e.HazardMatContactInd).IsFixedLength();
            entity.Property(e => e.ProdUseDesc).IsFixedLength();
            entity.Property(e => e.PtSocHxCmt).IsFixedLength();
            entity.Property(e => e.SmokingUseCd).IsFixedLength();
            entity.Property(e => e.SupportDesc).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtSocialHx>(entity =>
        {
            entity.ToView("PtSocialHx");

            entity.Property(e => e.ActivityDesc).IsFixedLength();
            entity.Property(e => e.AlcoholDesc).IsFixedLength();
            entity.Property(e => e.AlcoholUseCd).IsFixedLength();
            entity.Property(e => e.DietDesc).IsFixedLength();
            entity.Property(e => e.HazMaterialDesc).IsFixedLength();
            entity.Property(e => e.HazardMatContactInd).IsFixedLength();
            entity.Property(e => e.ProdUseDesc).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.PtSocHxCmt).IsFixedLength();
            entity.Property(e => e.SmokingUseCd).IsFixedLength();
            entity.Property(e => e.SupportDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtSpecificLinks>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtSpecificLinkId }).HasName("pkpt_specific_links");

            entity.ToTable("pt_specific_links", tb =>
                {
                    tb.HasTrigger("tD_pt_specific_links");
                    tb.HasTrigger("tU_pt_specific_links");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtSpecificLinksMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtSpecificLinkId, e.RevisionNo }).HasName("pkpt_specific_links_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtStatus>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtStatusId }).HasName("pkpt_status");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CurValueInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtStatusTyp).WithMany(p => p.PtStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_status");
        });

        modelBuilder.Entity<PtStatusIcon>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtStatusIconId }).HasName("pkpt_status_icon");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd)
                .HasDefaultValue("Y")
                .IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtStatusIcon)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_status_icon");

            entity.HasOne(d => d.StatusIcon).WithMany(p => p.PtStatusIcon)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_status_icon");
        });

        modelBuilder.Entity<PtStatusTyp>(entity =>
        {
            entity.HasKey(e => e.PtStatusTypId).HasName("pkpt_status_typ");

            entity.Property(e => e.PtStatusTypId).ValueGeneratedNever();
            entity.Property(e => e.PtStatusTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PtTp>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit }).HasName("pkpt_tp");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ClinicTrialFlag).IsFixedLength();
            entity.Property(e => e.ConsentReq).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.OrganDonor).IsFixedLength();
            entity.Property(e => e.ProtocolId).IsFixedLength();
            entity.Property(e => e.PtStudyNo).IsFixedLength();
            entity.Property(e => e.RightsAck).IsFixedLength();
            entity.Property(e => e.Site).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtTp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp");

            entity.HasOne(d => d.Userid).WithMany(p => p.PtTp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_tp");
        });

        modelBuilder.Entity<PtTpActionActual>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtEventId, e.PtVisitId, e.PtActualId, e.EventTyp }).HasName("pkpt_tp_action_actual");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTpCycleAction).WithMany(p => p.PtTpActionActual)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_action_actual");
        });

        modelBuilder.Entity<PtTpActionAgt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtActionId }).HasName("pkpt_tp_action_agt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TherapyItemAdmn).WithMany(p => p.PtTpActionAgt).HasConstraintName("fk2_pt_tp_action_agt");

            entity.HasOne(d => d.PtTpCycleAction).WithMany(p => p.PtTpActionAgt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_action_agt");
        });

        modelBuilder.Entity<PtTpActionAsmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtEventId }).HasName("pkpt_tp_action_asmt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTpCycleAction).WithOne(p => p.PtTpActionAsmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_tp_action_asmt");
        });

        modelBuilder.Entity<PtTpActionIv>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtEventId }).HasName("pkpt_tp_action_iv");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTpCycleAction).WithOne(p => p.PtTpActionIv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_tp_action_iv");

            entity.HasOne(d => d.PtIvTherapy).WithMany(p => p.PtTpActionIv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_action_iv");
        });

        modelBuilder.Entity<PtTpActionQstr>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtEventId }).HasName("pkpt_tp_action_qstr");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTpCycleAction).WithOne(p => p.PtTpActionQstr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_action_qstr");

            entity.HasOne(d => d.PtRespHdr).WithMany(p => p.PtTpActionQstr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_tp_action_qstr");
        });

        modelBuilder.Entity<PtTpActionTest>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtEventId }).HasName("pkpt_tp_action_test");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTpCycleAction).WithOne(p => p.PtTpActionTest)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_tp_action_test");
        });

        modelBuilder.Entity<PtTpActionTr>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtEventId }).HasName("pkpt_tp_action_tr");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTpCycleAction).WithOne(p => p.PtTpActionTr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_action_tr");
        });

        modelBuilder.Entity<PtTpAgt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.IntvId }).HasName("pkpt_tp_agt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.Brand).IsFixedLength();
            entity.Property(e => e.DoseStrength).IsFixedLength();
            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.IdealWt).IsFixedLength();
            entity.Property(e => e.MediActiveInd).IsFixedLength();
            entity.Property(e => e.Mod).IsFixedLength();
            entity.Property(e => e.RefillInd).IsFixedLength();
            entity.Property(e => e.Subs).IsFixedLength();
            entity.Property(e => e.TakeAsDirectedInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AdmnDosageUnitNavigation).WithMany(p => p.PtTpAgt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk4_pt_tp_agt");

            entity.HasOne(d => d.AdmnRouteNavigation).WithMany(p => p.PtTpAgt).HasConstraintName("fk1_pt_tp_agt");

            entity.HasOne(d => d.HydraFluid).WithMany(p => p.PtTpAgt).HasConstraintName("fk6_pt_tp_agt");

            entity.HasOne(d => d.InfusionTypNavigation).WithMany(p => p.PtTpAgt).HasConstraintName("fk2_pt_tp_agt");

            entity.HasOne(d => d.RxTypNavigation).WithMany(p => p.PtTpAgt).HasConstraintName("fk3_pt_tp_agt");

            entity.HasOne(d => d.PtTpIntv).WithOne(p => p.PtTpAgt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk5_pt_tp_agt");
        });

        modelBuilder.Entity<PtTpAgtCourse>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.IntvId, e.CourseNo }).HasName("pkpt_tp_agt_course");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.PrnInd).IsFixedLength();
            entity.Property(e => e.PrnRepeatInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTpAgt).WithMany(p => p.PtTpAgtCourse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_agt_course");
        });

        modelBuilder.Entity<PtTpAsmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.IntvId }).HasName("pkpt_tp_asmt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AsmtCompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTpIntv).WithOne(p => p.PtTpAsmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_asmt");
        });

        modelBuilder.Entity<PtTpCycleAction>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtEventId }).HasName("pkpt_tp_cycle_action");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AbnormalInd).IsFixedLength();
            entity.Property(e => e.AboveNormInd).IsFixedLength();
            entity.Property(e => e.BelowNormInd).IsFixedLength();
            entity.Property(e => e.CldrInd).IsFixedLength();
            entity.Property(e => e.CompletedTimeInd).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.NoteInd).IsFixedLength();
            entity.Property(e => e.NotifiedInd).IsFixedLength();
            entity.Property(e => e.RqstnInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtTpOrder).WithMany(p => p.PtTpCycleAction).HasConstraintName("fk1_pt_tp_cycle_action");

            entity.HasOne(d => d.PtTpTperiod).WithMany(p => p.PtTpCycleAction).HasConstraintName("fk2_pt_tp_cycle_action");
        });

        modelBuilder.Entity<PtTpDecParm>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.RxId, e.CompName }).HasName("pkpt_tp_dec_parm");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtTpEval>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtEvalId }).HasName("pkpt_tp_eval");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApplicableInd).IsFixedLength();
            entity.Property(e => e.EvalInd).IsFixedLength();
            entity.Property(e => e.IndividualizedInd).IsFixedLength();
            entity.Property(e => e.OffsetDesc).IsFixedLength();
            entity.Property(e => e.OffsetHhmm).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtTpOutcome).WithMany(p => p.PtTpEval)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_eval");
        });

        modelBuilder.Entity<PtTpFocus>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtFocusId }).HasName("pkpt_tp_focus");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.FocusDesc).IsFixedLength();
            entity.Property(e => e.IndividualizedInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtTpFocusStatus>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtFocusId, e.PtFocusStatusId }).HasName("pkpt_tp_focus_status");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.FocusStatusTypNavigation).WithMany(p => p.PtTpFocusStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_tp_focus_status");

            entity.HasOne(d => d.PtTpFocus).WithMany(p => p.PtTpFocusStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_focus_status");
        });

        modelBuilder.Entity<PtTpIntv>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.IntvId }).HasName("pkpt_tp_intv");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.ActualTimeReq).IsFixedLength();
            entity.Property(e => e.ChartSummaryInd).IsFixedLength();
            entity.Property(e => e.DoseCalcInd).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.GroupInd).IsFixedLength();
            entity.Property(e => e.IndividualizedInd).IsFixedLength();
            entity.Property(e => e.IntvName).IsFixedLength();
            entity.Property(e => e.IntvReq).IsFixedLength();
            entity.Property(e => e.NotificationReq).IsFixedLength();
            entity.Property(e => e.RqstnReq).IsFixedLength();
            entity.Property(e => e.RuleInd).IsFixedLength();
            entity.Property(e => e.SchInd).IsFixedLength();
            entity.Property(e => e.ThisVisitReqInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.EventTypNavigation).WithMany(p => p.PtTpIntv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_intv");

            entity.HasOne(d => d.PtTp).WithMany(p => p.PtTpIntv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_tp_intv");
        });

        modelBuilder.Entity<PtTpIntvCat>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.TpName, e.DateTpInit, e.IntvCatId }).HasName("pkpt_tp_intv_cat");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.IntvCatDesc).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtTpIntvCat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_intv_cat");
        });

        modelBuilder.Entity<PtTpIntvFocus>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.OrderId, e.FocusId }).HasName("pkpt_tp_intv_focus");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ExplcLinkInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtTpIntvStatus>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.IntvId, e.StatusId }).HasName("pkpt_tp_intv_status");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CurrentEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.StatusCatValue).WithMany(p => p.PtTpIntvStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_intv_status");
        });

        modelBuilder.Entity<PtTpIvTherapy>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.IntvId }).HasName("pkpt_tp_iv_therapy");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.GnrcIvFluidName).IsFixedLength();
            entity.Property(e => e.IvFluidCd).IsFixedLength();
            entity.Property(e => e.IvFluidName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgtDoseUnitNavigation).WithMany(p => p.PtTpIvTherapyAgtDoseUnitNavigation).HasConstraintName("fk4_pt_tp_iv_therapy");

            entity.HasOne(d => d.InfusionTypNavigation).WithMany(p => p.PtTpIvTherapy).HasConstraintName("fk1_pt_tp_iv_therapy");

            entity.HasOne(d => d.IvRateUnitNavigation).WithMany(p => p.PtTpIvTherapyIvRateUnitNavigation).HasConstraintName("fk3_pt_tp_iv_therapy");

            entity.HasOne(d => d.PtTpIntv).WithOne(p => p.PtTpIvTherapy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_tp_iv_therapy");
        });

        modelBuilder.Entity<PtTpOrder>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.OrderId }).HasName("pkpt_tp_order");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.ChartReqInd).IsFixedLength();
            entity.Property(e => e.ChartSummaryInd).IsFixedLength();
            entity.Property(e => e.ChartedInd).IsFixedLength();
            entity.Property(e => e.CldrInd).IsFixedLength();
            entity.Property(e => e.CyclicalInd).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.IndividualizedInd).IsFixedLength();
            entity.Property(e => e.MedMntrAsmtInd).IsFixedLength();
            entity.Property(e => e.OffsetDesc).IsFixedLength();
            entity.Property(e => e.OffsetHhmm).IsFixedLength();
            entity.Property(e => e.PrnInd).IsFixedLength();
            entity.Property(e => e.PrnRepeatInd).IsFixedLength();
            entity.Property(e => e.RenewableInd).IsFixedLength();
            entity.Property(e => e.TimeSuppressInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtTp).WithMany(p => p.PtTpOrder)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_order");
        });

        modelBuilder.Entity<PtTpOrderRenew>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.OrderId, e.RenewOrderTstamp }).HasName("pkpt_tp_order_renew");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTpOrder).WithMany(p => p.PtTpOrderRenew)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_order_renew");
        });

        modelBuilder.Entity<PtTpOutcome>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.TpName, e.DateTpInit, e.OutcomeId }).HasName("pkpt_tp_outcome");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.IndividualizedInd).IsFixedLength();
            entity.Property(e => e.OutcomeDesc).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTpFocus).WithMany(p => p.PtTpOutcome).HasConstraintName("fk1_pt_tp_outcome");
        });

        modelBuilder.Entity<PtTpPhase>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.PhaseSeqNo }).HasName("pkpt_tp_phase");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApplicableInd).IsFixedLength();
            entity.Property(e => e.ConsentReq).IsFixedLength();
            entity.Property(e => e.IndividualizedInd).IsFixedLength();
            entity.Property(e => e.LagInd).IsFixedLength();
            entity.Property(e => e.MgmtSupportInd).IsFixedLength();
            entity.Property(e => e.MidPlnInd).IsFixedLength();
            entity.Property(e => e.PhaseDesc).IsFixedLength();
            entity.Property(e => e.PlnViolatedFlag).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpSetupInd).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TrCsReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpdtAmendedTp).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PrcsTypNavigation).WithMany(p => p.PtTpPhase).HasConstraintName("fk1_pt_tp_phase");

            entity.HasOne(d => d.PtTp).WithMany(p => p.PtTpPhase)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_tp_phase");
        });

        modelBuilder.Entity<PtTpQstr>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.IntvId }).HasName("pkpt_tp_qstr");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTpIntv).WithOne(p => p.PtTpQstr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_qstr");
        });

        modelBuilder.Entity<PtTpRem>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.IntvId }).HasName("pkpt_tp_rem");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RemShortDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtTpSchGroup>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.GroupIntvId, e.CompIntvId }).HasName("pkpt_tp_sch_group");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTpIntv).WithMany(p => p.PtTpSchGroupPtTpIntv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_sch_group");

            entity.HasOne(d => d.PtTpIntvNavigation).WithMany(p => p.PtTpSchGroupPtTpIntvNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_pt_tp_sch_group");
        });

        modelBuilder.Entity<PtTpTest>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.IntvId }).HasName("pkpt_tp_test");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();

            entity.HasOne(d => d.PtTpIntv).WithOne(p => p.PtTpTest)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_test");
        });

        modelBuilder.Entity<PtTpTperiod>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.PhaseSeqNo, e.CycleNo, e.TperiodId, e.RepeatNo }).HasName("pkpt_tp_tperiod");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.ApplicableInd).IsFixedLength();
            entity.Property(e => e.DoseRecInd).IsFixedLength();
            entity.Property(e => e.IndividualizedInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TperiodDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtInteraction).WithMany(p => p.PtTpTperiod).HasConstraintName("fk2_pt_tp_tperiod");
        });

        modelBuilder.Entity<PtTpTr>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DateTpInit, e.IntvId }).HasName("pkpt_tp_tr");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TrCompName).IsFixedLength();
            entity.Property(e => e.TrSubCompName).IsFixedLength();
            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTpIntv).WithOne(p => p.PtTpTr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_tr");
        });

        modelBuilder.Entity<PtTpVrtnSource>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVrtnSourceId }).HasName("pkpt_tp_vrtn_source");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.VrtnSourceTypNavigation).WithMany(p => p.PtTpVrtnSource)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tp_vrtn_source");
        });

        modelBuilder.Entity<PtTumClsValues>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.TpClsTypId, e.TpClsValueId, e.AuthorCd, e.EffDate, e.CritCd, e.PtTumStgId }).HasName("pkpt_tum_cls_values");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CritCd).IsFixedLength();
            entity.Property(e => e.ApprFlag).IsFixedLength();
            entity.Property(e => e.Chronology).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtTumClsValues)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_tum_cls_values");
        });

        modelBuilder.Entity<PtTx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtTxId }).HasName("pkpt_tx");

            entity.ToTable("pt_tx", tb =>
                {
                    tb.HasTrigger("tD_pt_tx");
                    tb.HasTrigger("tU_pt_tx");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AckTpVersNo).IsFixedLength();
            entity.Property(e => e.AllergiesDocInd).IsFixedLength();
            entity.Property(e => e.AllergiesReqInd).IsFixedLength();
            entity.Property(e => e.AutoEndByUserInstId).IsFixedLength();
            entity.Property(e => e.AutoEndInd).IsFixedLength();
            entity.Property(e => e.CtInd).IsFixedLength();
            entity.Property(e => e.InternalInd).IsFixedLength();
            entity.Property(e => e.MedsDocInd).IsFixedLength();
            entity.Property(e => e.MedsReqInd).IsFixedLength();
            entity.Property(e => e.PathwayExistsInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtTxCt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtTxCtId }).HasName("pkpt_tx_ct");

            entity.ToTable("pt_tx_ct", tb =>
                {
                    tb.HasTrigger("tD_pt_tx_ct");
                    tb.HasTrigger("tU_pt_tx_ct");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.InstName).IsFixedLength();
            entity.Property(e => e.InternalInd).IsFixedLength();
            entity.Property(e => e.OrdByStkhId).IsFixedLength();
            entity.Property(e => e.ProvName).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.StudyNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtTxCtMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtTxCtId, e.RevisionNo }).HasName("pkpt_tx_ct_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.InstName).IsFixedLength();
            entity.Property(e => e.InternalInd).IsFixedLength();
            entity.Property(e => e.OrdByStkhId).IsFixedLength();
            entity.Property(e => e.ProvName).IsFixedLength();
            entity.Property(e => e.StudyNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtTxDec>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtTxDecId }).HasName("pkpt_tx_dec");

            entity.ToTable("pt_tx_dec", tb =>
                {
                    tb.HasTrigger("tD_pt_tx_dec");
                    tb.HasTrigger("tU_pt_tx_dec");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.DecInstId).IsFixedLength();
            entity.Property(e => e.DecRsnDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VrtnInd).IsFixedLength();
        });

        modelBuilder.Entity<PtTxDecMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtTxDecId, e.RevisionNo }).HasName("pkpt_tx_dec_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.DecInstId).IsFixedLength();
            entity.Property(e => e.DecRsnDesc).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VrtnInd).IsFixedLength();
        });

        modelBuilder.Entity<PtTxMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtTxId, e.RevisionNo }).HasName("pkpt_tx_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AckTpVersNo).IsFixedLength();
            entity.Property(e => e.AllergiesDocInd).IsFixedLength();
            entity.Property(e => e.AllergiesReqInd).IsFixedLength();
            entity.Property(e => e.AutoEndByUserInstId).IsFixedLength();
            entity.Property(e => e.AutoEndInd).IsFixedLength();
            entity.Property(e => e.CtInd).IsFixedLength();
            entity.Property(e => e.InternalInd).IsFixedLength();
            entity.Property(e => e.MedsDocInd).IsFixedLength();
            entity.Property(e => e.MedsReqInd).IsFixedLength();
            entity.Property(e => e.PathwayExistsInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtUnavl>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtUnavlId }).HasName("pkpt_unavl");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UnavlCmt).IsFixedLength();
            entity.Property(e => e.UnavlHdrInstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.PtUnavlDowNavigation).WithMany(p => p.PtUnavl).HasConstraintName("fk1_pt_unavl");

            entity.HasOne(d => d.PtVisit).WithMany(p => p.PtUnavl).HasConstraintName("fk2_pt_unavl");
        });

        modelBuilder.Entity<PtUserAccessLog>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAccessLogId }).HasName("pkpt_user_access_log");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AccessInstId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtUserDefined>(entity =>
        {
            entity.HasKey(e => e.PtId).HasName("pkpt_user_defined");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtUserDefinedLabel>(entity =>
        {
            entity.HasKey(e => e.InstId).HasName("pkpt_user_defined_label");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UserDefineLabel1).IsFixedLength();
            entity.Property(e => e.UserDefineLabel10).IsFixedLength();
            entity.Property(e => e.UserDefineLabel11).IsFixedLength();
            entity.Property(e => e.UserDefineLabel12).IsFixedLength();
            entity.Property(e => e.UserDefineLabel13).IsFixedLength();
            entity.Property(e => e.UserDefineLabel14).IsFixedLength();
            entity.Property(e => e.UserDefineLabel15).IsFixedLength();
            entity.Property(e => e.UserDefineLabel16).IsFixedLength();
            entity.Property(e => e.UserDefineLabel2).IsFixedLength();
            entity.Property(e => e.UserDefineLabel3).IsFixedLength();
            entity.Property(e => e.UserDefineLabel4).IsFixedLength();
            entity.Property(e => e.UserDefineLabel5).IsFixedLength();
            entity.Property(e => e.UserDefineLabel6).IsFixedLength();
            entity.Property(e => e.UserDefineLabel7).IsFixedLength();
            entity.Property(e => e.UserDefineLabel8).IsFixedLength();
            entity.Property(e => e.UserDefineLabel9).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible10Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible11Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible12Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible13Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible14Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible15Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible16Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible1Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible2Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible3Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible4Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible5Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible6Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible7Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible8Ind).IsFixedLength();
            entity.Property(e => e.UserDefinedVisible9Ind).IsFixedLength();
        });

        modelBuilder.Entity<PtVaccineRefusal>(entity =>
        {
            entity.HasKey(e => new { e.VaccineRefusalId, e.PtId }).HasName("pkpt_vaccine_refusal");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtVisit>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId }).HasName("pkpt_visit");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ExternalOrgStkhId).IsFixedLength();
            entity.Property(e => e.Hl7VisitId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.NewDeptInd).IsFixedLength();
            entity.Property(e => e.NewInstInd).IsFixedLength();
            entity.Property(e => e.NewProviderInd).IsFixedLength();
            entity.Property(e => e.PtArriveInd).IsFixedLength();
            entity.Property(e => e.PtAttendInd).IsFixedLength();
            entity.Property(e => e.TentativeInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VisitComplete).IsFixedLength();
            entity.Property(e => e.VisitImpInd).IsFixedLength();
            entity.Property(e => e.VisitInstId).IsFixedLength();
            entity.Property(e => e.VisitTrackingAbrv).IsFixedLength();

            entity.HasOne(d => d.Pt).WithMany(p => p.PtVisit)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_pt_visit");

            entity.HasOne(d => d.Userid).WithMany(p => p.PtVisit).HasConstraintName("fk1_pt_visit");

            entity.HasOne(d => d.VrblOrder).WithMany(p => p.PtVisit).HasConstraintName("fk2_pt_visit");
        });

        modelBuilder.Entity<PtVisitDetail>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.VisitDetailId }).HasName("pkpt_visit_detail");

            entity.ToTable("pt_visit_detail", tb =>
                {
                    tb.HasTrigger("tD_pt_visit_detail");
                    tb.HasTrigger("tU_pt_visit_detail");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.DetailInstId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtVisitDetailMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.VisitDetailId, e.RevisionNo }).HasName("pkpt_visit_detail_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.DetailInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtVisitDictation>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId }).HasName("pk_pt_visit_dictation");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.DictationCompleteInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtVisitHx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.HxCompTyp, e.TransLogInstId, e.TransLogUserid }).HasName("pkpt_visit_hx");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.HxChangedInd).IsFixedLength();
            entity.Property(e => e.HxReviewedInd).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<PtVisitProvider>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.UserInstId, e.Userid }).HasName("pkpt_visit_provider");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.PrimaryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtVisitReason>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId }).HasName("pkpt_visit_reason");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtVisitResch>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.CancelPtVisitId, e.ReschPtVisitId }).HasName("pkpt_visit_resch");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<PtVisitToday>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId }).HasName("pkpt_visit_today");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AllergyInd).IsFixedLength();
            entity.Property(e => e.ClinTrialInd).IsFixedLength();
            entity.Property(e => e.DirectivesInd).IsFixedLength();
            entity.Property(e => e.InfectionInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.NewDeptInd).IsFixedLength();
            entity.Property(e => e.NewInstInd).IsFixedLength();
            entity.Property(e => e.NewProviderInd).IsFixedLength();
            entity.Property(e => e.PtAlertInd).IsFixedLength();
            entity.Property(e => e.PtArriveInd).IsFixedLength();
            entity.Property(e => e.PtAttendInd).IsFixedLength();
            entity.Property(e => e.PtFirstName).IsFixedLength();
            entity.Property(e => e.PtInitial).IsFixedLength();
            entity.Property(e => e.PtInpatientInd).IsFixedLength();
            entity.Property(e => e.PtInstrCmt).IsFixedLength();
            entity.Property(e => e.PtLastName).IsFixedLength();
            entity.Property(e => e.PtTpAmend).IsFixedLength();
            entity.Property(e => e.SinSsn).IsFixedLength();
            entity.Property(e => e.TentativeInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.VisitFinancialStatusCmt).IsFixedLength();
            entity.Property(e => e.VisitInstId).IsFixedLength();
            entity.Property(e => e.VisitTrackingAbrv).IsFixedLength();
        });

        modelBuilder.Entity<PtVisitTracking>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtVisitTrackingId }).HasName("pkpt_visit_tracking");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
            entity.Property(e => e.VisitTrackingInstId).IsFixedLength();

            entity.HasOne(d => d.VisitTrackingTypNavigation).WithMany(p => p.PtVisitTracking)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_pt_visit_tracking");
        });

        modelBuilder.Entity<PtWinAccess>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.WindowLabel, e.TransLogTstamp }).HasName("pkpt_win_access");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.WindowLabel).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<PttrnRelatedNonSchActivity>(entity =>
        {
            entity.HasKey(e => new { e.ActivityPttrnPerCycleSer, e.ActivitySer }).HasName("XPKPttrnRelatedNonSchActivity");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_PttrnRelatedNonSchActivity");
                    tb.HasTrigger("tU_PttrnRelatedNonSchActivity");
                });

            
                
                

            entity.HasOne(d => d.ActivityPttrnPerCycleSerNavigation).WithMany(p => p.PttrnRelatedNonSchActivity).HasConstraintName("FKActivityPttrnPerCycle_PttrnRelatedNonSchActivity");

            entity.HasOne(d => d.ActivitySerNavigation).WithMany(p => p.PttrnRelatedNonSchActivity).HasConstraintName("FKActivity_PttrnRelatedNonSchActivity");
        });

        modelBuilder.Entity<PublicityCd>(entity =>
        {
            entity.HasKey(e => e.PublicityCdId).HasName("pkpublicity_cd");

            entity.Property(e => e.PublicityCdId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BaseTypNavigation).WithMany(p => p.PublicityCd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_publicity_cd");
        });

        modelBuilder.Entity<Qm>(entity =>
        {
            entity.HasKey(e => e.QmId).HasName("pkqm");

            entity.Property(e => e.QmId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.EpisodeOfCareInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<QmCriteria>(entity =>
        {
            entity.HasKey(e => e.QmcId).HasName("pkqm_criteria");

            entity.Property(e => e.QmcId).ValueGeneratedNever();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Qm).WithMany(p => p.QmCriteria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_qm_criteria");

            entity.HasOne(d => d.QmcpIdDenominatorNavigation).WithMany(p => p.QmCriteriaQmcpIdDenominatorNavigation).HasConstraintName("fk4_qm_criteria");

            entity.HasOne(d => d.QmcpIdExceptionNavigation).WithMany(p => p.QmCriteriaQmcpIdExceptionNavigation).HasConstraintName("fk6_qm_criteria");

            entity.HasOne(d => d.QmcpIdExclusionNavigation).WithMany(p => p.QmCriteriaQmcpIdExclusionNavigation).HasConstraintName("fk3_qm_criteria");

            entity.HasOne(d => d.QmcpIdNumeratorNavigation).WithMany(p => p.QmCriteriaQmcpIdNumeratorNavigation).HasConstraintName("fk5_qm_criteria");

            entity.HasOne(d => d.QmcpIdPopulationNavigation).WithMany(p => p.QmCriteriaQmcpIdPopulationNavigation).HasConstraintName("fk2_qm_criteria");
        });

        modelBuilder.Entity<QmCriteriaCulture>(entity =>
        {
            entity.HasKey(e => new { e.QmcId, e.CultureCd }).HasName("pkqm_criteria_culture");

            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Qmc).WithMany(p => p.QmCriteriaCulture)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_qm_criteria_culture");
        });

        modelBuilder.Entity<QmCriteriaInstance>(entity =>
        {
            entity.HasKey(e => e.QmciId).HasName("pkqm_criteria_instance");

            entity.Property(e => e.QmciId).ValueGeneratedNever();
            entity.Property(e => e.LastUpdatedInstId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Qmc).WithMany(p => p.QmCriteriaInstance)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_qm_criteria_instance");

            entity.HasOne(d => d.Qmi).WithMany(p => p.QmCriteriaInstance)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_qm_criteria_instance");
        });

        modelBuilder.Entity<QmCriteriaPart>(entity =>
        {
            entity.HasKey(e => e.QmcpId).HasName("pkqm_criteria_part");

            entity.Property(e => e.QmcpId).ValueGeneratedNever();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<QmCriteriaPartCulture>(entity =>
        {
            entity.HasKey(e => new { e.QmcpId, e.CultureCd }).HasName("pkqm_criteria_part_culture");

            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<QmCulture>(entity =>
        {
            entity.HasKey(e => new { e.QmId, e.CultureCd }).HasName("pkqm_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Qm).WithMany(p => p.QmCulture)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_qm_culture");
        });

        modelBuilder.Entity<QmEventCode>(entity =>
        {
            entity.HasKey(e => e.QmEventCodeId).HasName("pkqm_event_code");

            entity.Property(e => e.QmEventCodeId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ClsScheme).WithMany(p => p.QmEventCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_qm_event_code");
        });

        modelBuilder.Entity<QmEventCodeCulture>(entity =>
        {
            entity.HasKey(e => new { e.QmEventCodeId, e.CultureCd }).HasName("pkqm_event_code_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.QmEventCode).WithMany(p => p.QmEventCodeCulture)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_qm_event_code_culture");
        });

        modelBuilder.Entity<QmEventCodeFavorite>(entity =>
        {
            entity.HasKey(e => e.QmEventCodeFavoriteId).HasName("pkqm_event_code_favorite");

            entity.Property(e => e.QmEventCodeFavoriteId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.NotDoneQmValueSet).WithMany(p => p.QmEventCodeFavorite).HasConstraintName("fk1_qm_event_code_favorite");

            entity.HasOne(d => d.QmEventCode).WithMany(p => p.QmEventCodeFavorite)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_qm_event_code_favorite");
        });

        modelBuilder.Entity<QmInstance>(entity =>
        {
            entity.HasKey(e => e.QmiId).HasName("pkqm_instance");

            entity.Property(e => e.QmiId).ValueGeneratedNever();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.CompliancePrd).WithMany(p => p.QmInstance)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_qm_instance");

            entity.HasOne(d => d.Qm).WithMany(p => p.QmInstance)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_qm_instance");
        });

        modelBuilder.Entity<QmInstanceSubscription>(entity =>
        {
            entity.HasKey(e => new { e.QmiId, e.InstId }).HasName("pkqm_instance_subscription");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Qmi).WithMany(p => p.QmInstanceSubscription)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_qm_instance_subscription");
        });

        modelBuilder.Entity<QmRsnNotDoneValueSet>(entity =>
        {
            entity.HasKey(e => new { e.QmValueSetId, e.QmRsnNotDoneValueSetId }).HasName("pkqm_rsn_not_done_value_set");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.QmRsnNotDoneValueSetNavigation).WithMany(p => p.QmRsnNotDoneValueSetQmRsnNotDoneValueSetNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_qm_rsn_not_done_value_set");

            entity.HasOne(d => d.QmValueSet).WithMany(p => p.QmRsnNotDoneValueSetQmValueSet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_qm_rsn_not_done_value_set");
        });

        modelBuilder.Entity<QmValueSet>(entity =>
        {
            entity.HasKey(e => e.QmValueSetId).HasName("pkqm_value_set");

            entity.Property(e => e.QmValueSetId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<QmValueSetCulture>(entity =>
        {
            entity.HasKey(e => new { e.QmValueSetId, e.CultureCd }).HasName("pkqm_value_set_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.QmValueSet).WithMany(p => p.QmValueSetCulture)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_qm_value_set_culture");
        });

        modelBuilder.Entity<QmXrefAllergyRxnorm>(entity =>
        {
            entity.HasKey(e => e.AllergyRxnormId).HasName("pkqm_xref_allergy_rxnorm");

            entity.Property(e => e.AllergyRxnormId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<QrdaCat>(entity =>
        {
            entity.HasKey(e => e.QrdaCatId).HasName("pkqrda_cat");

            entity.Property(e => e.QrdaCatId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Qstr>(entity =>
        {
            entity.HasKey(e => e.QstrName).HasName("pkqstr");

            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.ApprFlag).IsFixedLength();
            entity.Property(e => e.PtEnterInd).IsFixedLength();
            entity.Property(e => e.Title).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.QstrTypNavigation).WithMany(p => p.Qstr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_qstr");
        });

        modelBuilder.Entity<QstrBill>(entity =>
        {
            entity.HasKey(e => new { e.QstrName, e.BillCd, e.BillCdTypId, e.BillInstanceId }).HasName("pkqstr_bill");

            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.QstrNameNavigation).WithMany(p => p.QstrBill)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_qstr_bill");
        });

        modelBuilder.Entity<QstrClsGroup>(entity =>
        {
            entity.HasKey(e => new { e.QstrName, e.TpClsTypId, e.TpClsValueId }).HasName("pkqstr_cls_group");

            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<QstrTyp>(entity =>
        {
            entity.HasKey(e => e.QstrTyp1).HasName("pkqstr_typ");

            entity.Property(e => e.QstrTyp1).ValueGeneratedNever();
            entity.Property(e => e.QstrDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<QstrUser>(entity =>
        {
            entity.HasKey(e => new { e.QstrName, e.UserInstId, e.Userid }).HasName("pkqstr_user");

            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => new { e.QstrName, e.QuestionId }).HasName("pkquestion");

            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.IndAttr1).IsFixedLength();
            entity.Property(e => e.IndAttr2).IsFixedLength();
            entity.Property(e => e.IndAttr3).IsFixedLength();
            entity.Property(e => e.QuestionNo).IsFixedLength();
            entity.Property(e => e.QuestionShareInd).IsFixedLength();
            entity.Property(e => e.QuestionTag).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.ScoreValues).IsFixedLength();
            entity.Property(e => e.StringAttr1).IsFixedLength();
            entity.Property(e => e.StringAttr2).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.QstrNameNavigation).WithMany(p => p.Question)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_question");

            entity.HasOne(d => d.QuestionTypNavigation).WithMany(p => p.Question).HasConstraintName("fk2_question");
        });

        modelBuilder.Entity<QuestionTyp>(entity =>
        {
            entity.HasKey(e => e.QuestionTyp1).HasName("pkquestion_typ");

            entity.Property(e => e.QuestionTyp1).ValueGeneratedNever();
            entity.Property(e => e.DisplayInd).IsFixedLength();
            entity.Property(e => e.QuestionDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<QuickNote>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.QuickNoteId }).HasName("pkquick_note");

            entity.ToTable("quick_note", tb =>
                {
                    tb.HasTrigger("tD_quick_note");
                    tb.HasTrigger("tU_quick_note");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprFlag).IsFixedLength();
            entity.Property(e => e.AuthorInstId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.QuickNoteTypNavigation).WithMany(p => p.QuickNote).HasConstraintName("fk1_quick_note");
        });

        modelBuilder.Entity<QuickNoteMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.QuickNoteId, e.RevisionNo }).HasName("pkquick_note_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprFlag).IsFixedLength();
            entity.Property(e => e.AuthorInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<QuickNoteTyp>(entity =>
        {
            entity.HasKey(e => e.QuickNoteTyp1).HasName("pkquick_note_typ");

            entity.Property(e => e.QuickNoteTyp1).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<RaceTyp>(entity =>
        {
            entity.HasKey(e => e.RaceTyp1).HasName("pkrace_typ");

            entity.Property(e => e.RaceTyp1).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.ArraHitechInd).IsFixedLength();
            entity.Property(e => e.DefaultInd).IsFixedLength();
            entity.Property(e => e.RaceDesc).IsFixedLength();
            entity.Property(e => e.RaceGroupCd).IsFixedLength();
            entity.Property(e => e.SingleSelectInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.MappedRaceTypNavigation).WithMany(p => p.InverseMappedRaceTypNavigation).HasConstraintName("fk_mapped_race_typ");
        });

        modelBuilder.Entity<Radiation>(entity =>
        {
            entity.HasKey(e => e.RadiationSer).HasName("XPKRadiation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Radiation");
                    tb.HasTrigger("tD_Radiation_PatientEditingLog");
                    tb.HasTrigger("tD_Radiation_VaBusinessLogic");
                    tb.HasTrigger("tI_Radiation");
                    tb.HasTrigger("tI_Radiation_PatientEditingLog");
                    tb.HasTrigger("tI_Radiation_VaBusinessLogic");
                    tb.HasTrigger("tU_Radiation");
                    tb.HasTrigger("tU_Radiation_PatientEditingLog");
                    tb.HasTrigger("tU_Radiation_VaBusinessLogic");
                });

            entity.Property(e => e.RadiationSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.Radiation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPlanSetup_Radiation");

            entity.HasOne(d => d.RefImageSerNavigation).WithMany(p => p.Radiation).HasConstraintName("FKImage_Radiation");

            entity.HasOne(d => d.RefImageSopclassSerNavigation).WithMany(p => p.Radiation).HasConstraintName("FKSOPClass_Radiation");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.Radiation).HasConstraintName("FKRadiationDevice_Radiation");
        });

        modelBuilder.Entity<RadiationDeliverySetupDevice>(entity =>
        {
            entity.HasKey(e => new { e.RadiationSer, e.DeliverySetupDeviceSer })
                .HasName("XPKRadiationDeliverySetupDevic")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_RadiationDeliverySetupDevic");
                    tb.HasTrigger("tU_RadiationDeliverySetupDevic");
                });

            
                
                

            entity.HasOne(d => d.DeliverySetupDeviceSerNavigation).WithMany(p => p.RadiationDeliverySetupDevice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKDeliverySetupDevice_RadiationDeliverySetupDevice");

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.RadiationDeliverySetupDevice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRadiation_RadiationDeliverySetupDevice");
        });

        modelBuilder.Entity<RadiationDevice>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKRadiationDevice");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_RadiationDevice");
                    tb.HasTrigger("tI_RadiationDevice");
                    tb.HasTrigger("tU_RadiationDevice");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.RadiationDevice).HasConstraintName("FKMachine_RadiationDevice");
        });

        modelBuilder.Entity<RadiationHstry>(entity =>
        {
            entity.HasKey(e => e.RadiationHstrySer)
                .HasName("XPKRadiationHstry")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_RadiationHstry");
                    tb.HasTrigger("tD_RadiationHstry_PatientEditingLog");
                    tb.HasTrigger("tD_RadiationHstry_VaBusinessLogic");
                    tb.HasTrigger("tI_RadiationHstry");
                    tb.HasTrigger("tI_RadiationHstry_PatientEditingLog");
                    tb.HasTrigger("tI_RadiationHstry_VaBusinessLogic");
                    tb.HasTrigger("tU_RadiationHstry");
                    tb.HasTrigger("tU_RadiationHstry_PatientEditingLog");
                    tb.HasTrigger("tU_RadiationHstry_VaBusinessLogic");
                });

            entity.Property(e => e.RadiationHstrySer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.RadiationHstry)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRadiation_RadiationHstry");

            entity.HasOne(d => d.TreatmentRecordSerNavigation).WithMany(p => p.RadiationHstry)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTreatmentRecord_RadiationHstry");
        });

        modelBuilder.Entity<RadiationRefPoint>(entity =>
        {
            entity.HasKey(e => new { e.RadiationSer, e.RefPointSer, e.RtplanSer })
                .HasName("XPKRadiationRefPoint")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_RadiationRefPoint_PatientEditingLog");
                    tb.HasTrigger("tI_RadiationRefPoint");
                    tb.HasTrigger("tI_RadiationRefPoint_PatientEditingLog");
                    tb.HasTrigger("tI_RadiationRefPoint_VaBusinessLogic");
                    tb.HasTrigger("tU_RadiationRefPoint");
                    tb.HasTrigger("tU_RadiationRefPoint_PatientEditingLog");
                    tb.HasTrigger("tU_RadiationRefPoint_VaBusinessLogic");
                });

            
                
                

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.RadiationRefPoint)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRadiation_RadiationRefPoint");

            entity.HasOne(d => d.RefPointSerNavigation).WithMany(p => p.RadiationRefPoint)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRefPoint_RadiationRefPoint");

            entity.HasOne(d => d.RtplanSerNavigation).WithMany(p => p.RadiationRefPoint)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPlan_RadiationRefPoint");
        });

        modelBuilder.Entity<RadioactiveSource>(entity =>
        {
            entity.HasKey(e => e.RadioactiveSourceSer).HasName("XPKBrachySource");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_RadioactiveSource");
                    tb.HasTrigger("tI_RadioactiveSource");
                    tb.HasTrigger("tU_RadioactiveSource");
                });

            entity.Property(e => e.RadioactiveSourceSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.RadioactiveSourceModelSerNavigation).WithMany(p => p.RadioactiveSource)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRadioactiveSourceModel_RadioactiveSource");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.RadioactiveSource).HasConstraintName("FKRadiationDevice_RadioactiveSource");
        });

        modelBuilder.Entity<RadioactiveSourceModel>(entity =>
        {
            entity.HasKey(e => e.RadioactiveSourceModelSer).HasName("XPKRadionuclid");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_RadioactiveSourceModel");
                    tb.HasTrigger("tD_RadioactiveSourceModel_VaBusinessLogic");
                    tb.HasTrigger("tU_RadioactiveSourceModel");
                });

            entity.Property(e => e.RadioactiveSourceModelSer).ValueGeneratedNever();
            entity.Property(e => e.ActiveSize).IsFixedLength();
            
                
                
            entity.Property(e => e.TotalSize).IsFixedLength();
        });

        modelBuilder.Entity<RangeModulator>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKRangeModulator");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_RangeModulator");
                    tb.HasTrigger("tU_RangeModulator");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithOne(p => p.RangeModulator).HasConstraintName("FKAddOn_RangeModulator");
        });

        modelBuilder.Entity<RangeShifter>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKRangeShifter");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_RangeShifter");
                    tb.HasTrigger("tU_RangeShifter");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithOne(p => p.RangeShifter).HasConstraintName("FKAddOn_RangeShifter");
        });

        modelBuilder.Entity<RbObj>(entity =>
        {
            entity.HasKey(e => e.ObjTyp).HasName("pkrb_obj");

            entity.Property(e => e.ObjTyp).ValueGeneratedNever();
            entity.Property(e => e.ObjDesc).IsFixedLength();
            entity.Property(e => e.ObjSubclsTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<RbObjAttr>(entity =>
        {
            entity.HasKey(e => new { e.ObjTyp, e.ObjAttrTyp }).HasName("pkrb_obj_attr");

            entity.Property(e => e.AttrShortDesc).IsFixedLength();
            entity.Property(e => e.ObjAttrDesc).IsFixedLength();
            entity.Property(e => e.PtSearchInd).IsFixedLength();
            entity.Property(e => e.RbUse).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.ObjTypNavigation).WithMany(p => p.RbObjAttr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_rb_obj");
        });

        modelBuilder.Entity<RbObjAttrCls>(entity =>
        {
            entity.HasKey(e => new { e.ObjTyp, e.ObjAttrTyp, e.RuleClsTyp, e.RbUse }).HasName("pkrb_obj_attr_cls");

            entity.Property(e => e.RbUse).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.UnitGrp).IsFixedLength();

            entity.HasOne(d => d.RuleClsTypNavigation).WithMany(p => p.RbObjAttrCls)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_rb_obj_attr_cls");

            entity.HasOne(d => d.RbObjAttr).WithMany(p => p.RbObjAttrCls)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_rb_obj_attr_cls");
        });

        modelBuilder.Entity<ReactionTyp>(entity =>
        {
            entity.HasKey(e => e.ReactionTyp1).HasName("pkreaction_typ");

            entity.Property(e => e.ReactionTyp1).ValueGeneratedNever();
            entity.Property(e => e.ReactionDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<RecCount>(entity =>
        {
            entity.HasKey(e => e.TableName).HasName("pkrec_count");

            entity.Property(e => e.TableName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Recipient>(entity =>
        {
            entity.HasKey(e => new { e.MessageSer, e.ResourceSer }).HasName("XPKRecipient");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_Recipient");
                    tb.HasTrigger("tU_Recipient");
                });

            
                
                

            entity.HasOne(d => d.MessageSerNavigation).WithMany(p => p.Recipient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKMessage_Recipient");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.Recipient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKResource_Recipient");
        });

        modelBuilder.Entity<RecurrenceElement>(entity =>
        {
            entity.HasKey(e => e.RecurrenceElementSer).HasName("XPKRecurrenceElement");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_RecurrenceElement");
                    tb.HasTrigger("tU_RecurrenceElement");
                });

            entity.Property(e => e.RecurrenceElementSer).ValueGeneratedNever();

            entity.HasOne(d => d.RecurrenceRuleSerNavigation).WithMany(p => p.RecurrenceElement).HasConstraintName("FKRecurrenceRule_RecurrenceElement");
        });

        modelBuilder.Entity<RecurrenceRule>(entity =>
        {
            entity.HasKey(e => e.RecurrenceRuleSer).HasName("XPKRecurrenceRule");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_RecurrenceRule");
                    tb.HasTrigger("tU_RecurrenceRule");
                });

            entity.Property(e => e.RecurrenceRuleSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<RefCls>(entity =>
        {
            entity.HasKey(e => e.RefClsId).HasName("pkref_cls");

            entity.Property(e => e.RefClsId).ValueGeneratedNever();
            entity.Property(e => e.RefClsDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<RefDef>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.RefId }).HasName("pkref_def");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.RefId).IsFixedLength();
            entity.Property(e => e.ActualTblName).IsFixedLength();
            entity.Property(e => e.AllowDelCdVal).IsFixedLength();
            entity.Property(e => e.AllowModCdVal).IsFixedLength();
            entity.Property(e => e.Desc1ColDesc).IsFixedLength();
            entity.Property(e => e.Desc1ColName).IsFixedLength();
            entity.Property(e => e.Desc2ColDesc).IsFixedLength();
            entity.Property(e => e.Desc2ColName).IsFixedLength();
            entity.Property(e => e.Key1ColDesc).IsFixedLength();
            entity.Property(e => e.Key1ColName).IsFixedLength();
            entity.Property(e => e.Key2ColDesc).IsFixedLength();
            entity.Property(e => e.Key2ColName).IsFixedLength();
            entity.Property(e => e.Key3ColDesc).IsFixedLength();
            entity.Property(e => e.Key3ColName).IsFixedLength();
            entity.Property(e => e.Key4ColDesc).IsFixedLength();
            entity.Property(e => e.Key4ColName).IsFixedLength();
            entity.Property(e => e.Key5ColDesc).IsFixedLength();
            entity.Property(e => e.Key5ColName).IsFixedLength();
            entity.Property(e => e.TblTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpperCaseInd).IsFixedLength();
        });

        modelBuilder.Entity<RefPoint>(entity =>
        {
            entity.HasKey(e => e.RefPointSer).HasName("XPKRefPoint");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_RefPoint");
                    tb.HasTrigger("tD_RefPoint_PatientEditingLog");
                    tb.HasTrigger("tI_RefPoint");
                    tb.HasTrigger("tI_RefPoint_PatientEditingLog");
                    tb.HasTrigger("tU_RefPoint");
                    tb.HasTrigger("tU_RefPoint_PatientEditingLog");
                });

            entity.Property(e => e.RefPointSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PatientVolumeSerNavigation).WithMany(p => p.RefPoint)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatientVolume_RefPoint");
        });

        modelBuilder.Entity<RefPointDeliveredDose>(entity =>
        {
            entity.ToView("RefPointDeliveredDose");
        });

        modelBuilder.Entity<RefPointHstry>(entity =>
        {
            entity.HasKey(e => e.RefPointHstrySer)
                .HasName("XPKRefPointHstry")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_RefPointHstry");
                    tb.HasTrigger("tU_RefPointHstry");
                });

            entity.Property(e => e.RefPointHstrySer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.RadiationHstrySerNavigation).WithMany(p => p.RefPointHstry)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRadiationHstry_RefPointHstry");

            entity.HasOne(d => d.RefPointSerNavigation).WithMany(p => p.RefPointHstry)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRefPoint_RefPointHstry");
        });

        modelBuilder.Entity<RefPointLocation>(entity =>
        {
            entity.HasKey(e => new { e.ImageSer, e.RefPointSer }).HasName("XPKRefPointLocation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_RefPointLocation");
                    tb.HasTrigger("tU_RefPointLocation");
                });

            
                
                
            entity.Property(e => e.Location).IsFixedLength();

            entity.HasOne(d => d.ImageSerNavigation).WithMany(p => p.RefPointLocation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKImage_RefPointLocation");

            entity.HasOne(d => d.RefPointSerNavigation).WithMany(p => p.RefPointLocation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRefPoint_RefPointLocation");
        });

        modelBuilder.Entity<RefPointLog>(entity =>
        {
            entity.HasKey(e => e.RefPointLogSer)
                .HasName("XPKRefPointLog")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_RefPointLog");
                    tb.HasTrigger("tD_RefPointLog_PatientEditingLog");
                    tb.HasTrigger("tI_RefPointLog");
                    tb.HasTrigger("tI_RefPointLog_PatientEditingLog");
                    tb.HasTrigger("tU_RefPointLog");
                    tb.HasTrigger("tU_RefPointLog_PatientEditingLog");
                });

            entity.Property(e => e.RefPointLogSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DoseCorrectionLogSerNavigation).WithMany(p => p.RefPointLog).HasConstraintName("FKDoseCorrectionLog_RefPointLog");

            entity.HasOne(d => d.RefPointSerNavigation).WithMany(p => p.RefPointLog)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRefPoint_RefPointLog");
        });

        modelBuilder.Entity<RefWaveformField>(entity =>
        {
            entity.HasKey(e => new { e.RefWaveformRelationSer, e.RadiationSer })
                .HasName("XPKRefWaveformField")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_RefWaveformField");
                    tb.HasTrigger("tU_RefWaveformField");
                });

            
                
                

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.RefWaveformField)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKExternalFieldCommon_RefWaveformField");

            entity.HasOne(d => d.RefWaveformRelationSerNavigation).WithMany(p => p.RefWaveformField)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRefWaveFormRelation_RefWaveformField");
        });

        modelBuilder.Entity<RefWaveformRelation>(entity =>
        {
            entity.HasKey(e => e.RefWaveformRelationSer)
                .HasName("XPKRefWaveformRelation")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_RefWaveformRelation");
                    tb.HasTrigger("tI_RefWaveformRelation");
                    tb.HasTrigger("tU_RefWaveformRelation");
                    tb.HasTrigger("tU_RefWaveformRelation_VaBusinessLogic");
                });

            entity.Property(e => e.RefWaveformRelationSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ReferenceWaveformSerNavigation).WithMany(p => p.RefWaveformRelationReferenceWaveformSerNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTracking_RefWaveformRelation1");

            entity.HasOne(d => d.TrackingSerNavigation).WithMany(p => p.RefWaveformRelationTrackingSerNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTracking_RefWaveformRelation2");
        });

        modelBuilder.Entity<RefXref>(entity =>
        {
            entity.HasKey(e => new { e.AInstId, e.ARefId, e.BInstId, e.BRefId }).HasName("pkref_xref");

            entity.Property(e => e.AInstId).IsFixedLength();
            entity.Property(e => e.ARefId).IsFixedLength();
            entity.Property(e => e.BInstId).IsFixedLength();
            entity.Property(e => e.BRefId).IsFixedLength();
            entity.Property(e => e.ReltnTyp).IsFixedLength();
            entity.Property(e => e.SingleMulti).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.RefDef).WithMany(p => p.RefXrefRefDef)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_ref_xref");

            entity.HasOne(d => d.RefDefNavigation).WithMany(p => p.RefXrefRefDefNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_ref_xref");
        });

        modelBuilder.Entity<RefusalReason>(entity =>
        {
            entity.HasKey(e => e.RefusalReasonId).HasName("pkrefusal_reason");

            entity.Property(e => e.RefusalReasonId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BaseTypNavigation).WithMany(p => p.RefusalReason)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_refusal_reason");
        });

        modelBuilder.Entity<RegTaskStatus>(entity =>
        {
            entity.HasKey(e => new { e.RegTrackId, e.RegTaskTyp }).HasName("pkreg_track_status");

            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<RegTaskTyp>(entity =>
        {
            entity.HasKey(e => e.RegTaskId).HasName("pkreg_task_typ");

            entity.Property(e => e.RegTaskId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.RegTaskReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<RegTrack>(entity =>
        {
            entity.HasKey(e => e.RegTrackId).HasName("pkreg_track");

            entity.Property(e => e.RegTrackId).ValueGeneratedNever();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.OnSiteInd).IsFixedLength();
            entity.Property(e => e.PiReadySignInd).IsFixedLength();
            entity.Property(e => e.PiSignInd).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ReportInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<RegTrackCorsp>(entity =>
        {
            entity.HasKey(e => e.RegTrackCorspId).HasName("pkreg_track_corsp");

            entity.Property(e => e.RegTrackCorspId).ValueGeneratedNever();
            entity.Property(e => e.CorspDesc).IsFixedLength();
            entity.Property(e => e.DcmntInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<RegTrackTask>(entity =>
        {
            entity.HasKey(e => e.RegTrackTaskId).HasName("pkreg_track_task");

            entity.Property(e => e.RegTrackTaskId).ValueGeneratedNever();
            entity.Property(e => e.DcmntExistInd).IsFixedLength();
            entity.Property(e => e.TaskReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Religions>(entity =>
        {
            entity.HasKey(e => e.ReligionId).HasName("pkreligions");

            entity.Property(e => e.ReligionId).ValueGeneratedNever();
            entity.Property(e => e.ReligionCd).IsFixedLength();
            entity.Property(e => e.ReligionDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Rem>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RemSeqNo }).HasName("pkrem");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CompletedInd).IsFixedLength();
            entity.Property(e => e.PlnGeneratedInd).IsFixedLength();
            entity.Property(e => e.RcpntInstId).IsFixedLength();
            entity.Property(e => e.RcpntUserInstId).IsFixedLength();
            entity.Property(e => e.RemAttachInd).IsFixedLength();
            entity.Property(e => e.RemName).IsFixedLength();
            entity.Property(e => e.RemPrcsInd).IsFixedLength();
            entity.Property(e => e.RemStatus).IsFixedLength();
            entity.Property(e => e.RemTyp).IsFixedLength();
            entity.Property(e => e.Req).IsFixedLength();
            entity.Property(e => e.SendApprInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<RemAttach>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RemAttachId, e.RemSeqNo }).HasName("pkrem_attach");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Rem).WithMany(p => p.RemAttach)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_rem_attach");
        });

        modelBuilder.Entity<RemRcpnt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RemSeqNo, e.RemRcpntId }).HasName("pkrem_rcpnt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RcpntUserInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Rem).WithMany(p => p.RemRcpnt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_rem_rcpnt");
        });

        modelBuilder.Entity<Reminder>(entity =>
        {
            entity.HasKey(e => e.ReminderId).HasName("pkreminder");

            entity.Property(e => e.ReminderId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.MaxFreqUnit).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ReminderAck>(entity =>
        {
            entity.HasKey(e => e.ReminderAckSer).HasName("XPKReminderAck");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ReminderAck");
                    tb.HasTrigger("tU_ReminderAck");
                });

            entity.Property(e => e.ReminderAckSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.AttendeeSerNavigation).WithMany(p => p.ReminderAck)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKAttendee_ReminderAck");
        });

        modelBuilder.Entity<ReminderPtListQueryXref>(entity =>
        {
            entity.HasKey(e => new { e.ReminderId, e.PtListQueryId }).HasName("pkreminder_pt_list_query_xref");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.ReportSer).HasName("XPKReport");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Report");
                    tb.HasTrigger("tI_Report");
                    tb.HasTrigger("tU_Report");
                });

            entity.Property(e => e.ReportSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.AppUserSerNavigation).WithMany(p => p.Report).HasConstraintName("FKAppUser_Report");

            entity.HasOne(d => d.DerivedFromReportSerNavigation).WithMany(p => p.InverseDerivedFromReportSerNavigation).HasConstraintName("FKReport_Report");
        });

        modelBuilder.Entity<ReportLinkage>(entity =>
        {
            entity.HasKey(e => e.ReportLinkageSer).HasName("XPKReportLinkage");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ReportLinkage");
                    tb.HasTrigger("tU_ReportLinkage");
                });

            entity.Property(e => e.ReportLinkageSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ReportSerNavigation).WithMany(p => p.ReportLinkageReportSerNavigation).HasConstraintName("FKReport_ReportLinkage2");

            entity.HasOne(d => d.SubReportSerNavigation).WithMany(p => p.ReportLinkageSubReportSerNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKReport_ReportLinkage1");
        });

        modelBuilder.Entity<ReportParameter>(entity =>
        {
            entity.HasKey(e => e.ReportParameterSer).HasName("XPKReportParameter");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ReportParameter");
                    tb.HasTrigger("tU_ReportParameter");
                });

            entity.Property(e => e.ReportParameterSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ParameterTypeSerNavigation).WithMany(p => p.ReportParameter).HasConstraintName("FKParameterType_ReportParameter");

            entity.HasOne(d => d.ReportSerNavigation).WithMany(p => p.ReportParameter).HasConstraintName("FKReport_ReportParameter");
        });

        modelBuilder.Entity<ResolutionTyp>(entity =>
        {
            entity.HasKey(e => e.ResolutionTyp1).HasName("pkresolution_typ");

            entity.Property(e => e.ResolutionTyp1).ValueGeneratedNever();
            entity.Property(e => e.ResolutionDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Resource>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKResource");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Resource");
                    tb.HasTrigger("tI_Resource");
                    tb.HasTrigger("tU_Resource");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DicomcodeValueSerNavigation).WithMany(p => p.Resource).HasConstraintName("FKDICOMCodeValue_Resource");

            entity.HasOne(d => d.ResourceTypeNumNavigation).WithMany(p => p.Resource)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKResourceType_Resource");
        });

        modelBuilder.Entity<ResourceActivity>(entity =>
        {
            entity.ToView("ResourceActivity");

            
                
                
        });

        modelBuilder.Entity<ResourceAddress>(entity =>
        {
            entity.HasKey(e => new { e.ResourceSer, e.AddressSer }).HasName("XPKResourceAddress");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ResourceAddress");
                    tb.HasTrigger("tU_ResourceAddress");
                });

            
                
                

            entity.HasOne(d => d.AddressSerNavigation).WithMany(p => p.ResourceAddress).HasConstraintName("FKAddress_ResourceAddress");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.ResourceAddress)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKResource_ResourceAddress");
        });

        modelBuilder.Entity<ResourceDepartment>(entity =>
        {
            entity.HasKey(e => e.ResourceDepartmentSer).HasName("XPKResourceRTDepartment");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ResourceDepartment");
                    tb.HasTrigger("tI_ResourceDepartment");
                    tb.HasTrigger("tU_ResourceDepartment");
                });

            entity.Property(e => e.ResourceDepartmentSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.ResourceDepartment)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKDepartment_ResourceDepartment");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.ResourceDepartment)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKResource_ResourceDepartment");
        });

        modelBuilder.Entity<ResourceDirect>(entity =>
        {
            entity.HasKey(e => e.ResourceDirectSer).HasName("XPKResourceDirectSer");

            entity.Property(e => e.ResourceDirectSer).ValueGeneratedNever();
            entity.Property(e => e.InstId).IsFixedLength();
        });

        modelBuilder.Entity<ResourceEmergencyGroup>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("pk_ResourceEmergencyGroup");

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.ResourceEmergencyGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ResourceEmergencyGroup");
        });

        modelBuilder.Entity<ResourceGroup>(entity =>
        {
            entity.HasKey(e => e.ResourceGroupSer).HasName("XPKResourceGroup");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ResourceGroup");
                    tb.HasTrigger("tI_ResourceGroup");
                    tb.HasTrigger("tU_ResourceGroup");
                });

            entity.Property(e => e.ResourceGroupSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.ResourceGroup).HasConstraintName("FKDepartment_ResourceGroup");

            entity.HasOne(d => d.DicomcodeValueSerNavigation).WithMany(p => p.ResourceGroup).HasConstraintName("FKDICOMCodeValue_ResourceGroup");
        });

        modelBuilder.Entity<ResourceIdentifier>(entity =>
        {
            entity.HasKey(e => e.ResourceIdentifierSer).HasName("XPKResourceIdentifier");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ResourceIdentifier");
                    tb.HasTrigger("tU_ResourceIdentifier");
                });

            entity.Property(e => e.ResourceIdentifierSer).ValueGeneratedNever();
            
                
                
            entity.Property(e => e.UpperKeyValue).UseCollation("Latin1_General_100_CI_AI_SC");

            entity.HasOne(d => d.ResourceIdentifierTypeSerNavigation).WithMany(p => p.ResourceIdentifier)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKResourceIdentifierType_ResourceIdentifier");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.ResourceIdentifier).HasConstraintName("FKResource_ResourceIdentifier");
        });

        modelBuilder.Entity<ResourceIdentifierCode>(entity =>
        {
            entity.Property(e => e.CodeValue).IsFixedLength();
            entity.Property(e => e.CodeDesc).IsFixedLength();
            
                
                
        });

        modelBuilder.Entity<ResourceIdentifierType>(entity =>
        {
            entity.HasKey(e => e.ResourceIdentifierTypeSer).HasName("XPKResourceIdentifierType");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ResourceIdentifierType");
                    tb.HasTrigger("tI_ResourceIdentifierType");
                    tb.HasTrigger("tU_ResourceIdentifierType");
                });

            entity.Property(e => e.ResourceIdentifierTypeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ResourceTypeNumNavigation).WithMany(p => p.ResourceIdentifierType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKResourceType_ResourceIdentifierType");
        });

        modelBuilder.Entity<ResourceType>(entity =>
        {
            entity.HasKey(e => e.ResourceTypeNum)
                .HasName("XPKResourceType")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ResourceType");
                    tb.HasTrigger("tU_ResourceType");
                });

            entity.Property(e => e.ResourceTypeNum).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<ResourceVenue>(entity =>
        {
            entity.HasKey(e => new { e.ResourceSer, e.VenueResourceSer }).HasName("XPKAuxiliaryVenue");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ResourceVenue");
                    tb.HasTrigger("tU_ResourceVenue");
                });

            
                
                

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.ResourceVenue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKResource_ResourceVenue");

            entity.HasOne(d => d.VenueResourceSerNavigation).WithMany(p => p.ResourceVenue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKVenue_ResourceVenue");
        });

        modelBuilder.Entity<ResultMeasTyp>(entity =>
        {
            entity.HasKey(e => e.ResultMeasTyp1).HasName("pkresult_meas_typ");

            entity.Property(e => e.ResultMeasTyp1).ValueGeneratedNever();
            entity.Property(e => e.ResultMeasDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ResultMeasUnit>(entity =>
        {
            entity.HasKey(e => e.ResultMeasUnit1).HasName("pkresult_meas_unit");

            entity.Property(e => e.ResultMeasUnit1).ValueGeneratedNever();
            entity.Property(e => e.ResultMeasDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ResultUseTyp>(entity =>
        {
            entity.HasKey(e => e.ResultUseTyp1).HasName("pkresult_use_typ");

            entity.Property(e => e.ResultUseTyp1).ValueGeneratedNever();
            entity.Property(e => e.ResultUseDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<RgmSiteSeq>(entity =>
        {
            entity.HasKey(e => e.RgmSiteSeqId).HasName("pkrgm_site_seq");

            entity.ToTable("rgm_site_seq", tb =>
                {
                    tb.HasTrigger("tD_rgm_site_seq");
                    tb.HasTrigger("tU_rgm_site_seq");
                });

            entity.Property(e => e.RgmSiteSeqId).ValueGeneratedNever();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.EvidenceLvlPlnTypNavigation).WithMany(p => p.RgmSiteSeq).HasConstraintName("fk5_rgm_site_seq");

            entity.HasOne(d => d.TpClsTyp).WithMany(p => p.RgmSiteSeq)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_rgm_site_seq");

            entity.HasOne(d => d.TxPln).WithMany(p => p.RgmSiteSeq)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_rgm_site_seq");
        });

        modelBuilder.Entity<RgmSiteSeqMh>(entity =>
        {
            entity.HasKey(e => new { e.RgmSiteSeqId, e.RevisionNo }).HasName("pkrgm_site_seq_mh");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<RgnGrp>(entity =>
        {
            entity.HasKey(e => e.RgnGrpId).HasName("pkrgn_grp");

            entity.Property(e => e.RgnGrpId).ValueGeneratedNever();
            entity.Property(e => e.RgnDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<RgnPcZip>(entity =>
        {
            entity.HasKey(e => new { e.RgnGrpId, e.PcZip }).HasName("pkrgn_pc_zip");

            entity.Property(e => e.PcZip).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<RoomBedUse>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.CareUnitId, e.RoomBedId }).HasName("pkroom_bed_use");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UseCmt).IsFixedLength();

            entity.HasOne(d => d.BedUseTypNavigation).WithMany(p => p.RoomBedUse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_room_bed_use");

            entity.HasOne(d => d.PtAdt).WithMany(p => p.RoomBedUse).HasConstraintName("fk1_room_bed_use");

            entity.HasOne(d => d.InstCareBed).WithOne(p => p.RoomBedUse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_room_bed_use");
        });

        modelBuilder.Entity<RoomTyp>(entity =>
        {
            entity.HasKey(e => e.RoomTyp1).HasName("pkroom_typ");

            entity.Property(e => e.RoomTyp1).ValueGeneratedNever();
            entity.Property(e => e.RoomDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<RoundFactor>(entity =>
        {
            entity.HasKey(e => e.RoundFactor1).HasName("pkround_factor");

            entity.Property(e => e.RoundFactor1).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<RtappExtension>(entity =>
        {
            entity.Property(e => e.RtappExtensionSer).ValueGeneratedNever();
            entity.Property(e => e.CheckSum).IsFixedLength();
            
                
                
        });

        modelBuilder.Entity<RtappExtensionLog>(entity =>
        {
            entity.Property(e => e.RtappExtensionLogSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.RtappExtensionLog)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RTAppExtensionLog_Slice");

            entity.HasOne(d => d.RtappExtensionSerNavigation).WithMany(p => p.RtappExtensionLog)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RTAppExtensionLog_RTAppExtension");

            entity.HasOne(d => d.StructureSetSerNavigation).WithMany(p => p.RtappExtensionLog)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RTAppExtensionLog_StructureSet");
        });

        modelBuilder.Entity<Rtplan>(entity =>
        {
            entity.HasKey(e => e.RtplanSer).HasName("XPKRTPlan");

            entity.ToTable("RTPlan", tb =>
                {
                    tb.HasTrigger("tD_RTPlan");
                    tb.HasTrigger("tD_RTPlan_PatientEditingLog");
                    tb.HasTrigger("tD_RTPlan_VaBusinessLogic");
                    tb.HasTrigger("tI_RTPlan");
                    tb.HasTrigger("tI_RTPlan_PatientEditingLog");
                    tb.HasTrigger("tI_RTPlan_VaBusinessLogic");
                    tb.HasTrigger("tU_RTPlan");
                    tb.HasTrigger("tU_RTPlan_PatientEditingLog");
                    tb.HasTrigger("tU_RTPlan_VaBusinessLogic");
                });

            entity.Property(e => e.RtplanSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.Rtplan)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPlanSetup_RTPlan");

            entity.HasOne(d => d.PlanSopclassSerNavigation).WithMany(p => p.Rtplan)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSOPClass_RTPlan");

            entity.HasOne(d => d.SeriesSerNavigation).WithMany(p => p.Rtplan)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSeries_RTPlan");
        });

        modelBuilder.Entity<RuleBody>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.RuleId, e.RuleIdDesc }).HasName("pkrule_body");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.RuleIdDesc).IsFixedLength();
            entity.Property(e => e.Appr).IsFixedLength();
            entity.Property(e => e.OrigInstId).IsFixedLength();
            entity.Property(e => e.RuleExpl).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<RuleCls>(entity =>
        {
            entity.HasKey(e => e.RuleClsTyp).HasName("pkrule_cls");

            entity.Property(e => e.RuleClsTyp).ValueGeneratedNever();
            entity.Property(e => e.RuleClsDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<RuleComp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.RuleId, e.RuleIdDesc, e.CompTyp, e.CompSeqNo }).HasName("pkrule_comp");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.RuleIdDesc).IsFixedLength();
            entity.Property(e => e.CompTyp).IsFixedLength();
            entity.Property(e => e.Action).IsFixedLength();
            entity.Property(e => e.CompAttr).IsFixedLength();
            entity.Property(e => e.CompObj).IsFixedLength();
            entity.Property(e => e.CompObjDesc).IsFixedLength();
            entity.Property(e => e.CompValue).IsFixedLength();
            entity.Property(e => e.Conj).IsFixedLength();
            entity.Property(e => e.RefRgm).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.RuleBody).WithMany(p => p.RuleComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_rule_comp");
        });

        modelBuilder.Entity<Rx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RxId }).HasName("pkrx");

            entity.ToTable("rx", tb =>
                {
                    tb.HasTrigger("tD_rx");
                    tb.HasTrigger("tU_rx");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AllergiesDocInd).IsFixedLength();
            entity.Property(e => e.AllergiesReqInd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.CompletedInd).IsFixedLength();
            entity.Property(e => e.DispensedInd).IsFixedLength();
            entity.Property(e => e.InteractChkInd).IsFixedLength();
            entity.Property(e => e.MedsDocInd).IsFixedLength();
            entity.Property(e => e.MedsReqInd).IsFixedLength();
            entity.Property(e => e.NotDispensedInd).IsFixedLength();
            entity.Property(e => e.OrdByInstId).IsFixedLength();
            entity.Property(e => e.PathwayExistsInd).IsFixedLength();
            entity.Property(e => e.PharmApprInstId).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.PromptTxStartDateInd).IsFixedLength();
            entity.Property(e => e.ReorderCmtInd).IsFixedLength();
            entity.Property(e => e.ReorderReviewInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.RxPrintInstId).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.SupervisorInstId).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.RxTypNavigation).WithMany(p => p.Rx)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_rx");
        });

        modelBuilder.Entity<RxHydra>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RxId, e.RxHydraId }).HasName("pkrx_hydra");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.BagCalcTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.HydraFluid).WithMany(p => p.RxHydra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_rx_hydra");
        });

        modelBuilder.Entity<RxHydraDisp>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RxId, e.RxHydraDispId }).HasName("pkrx_hydra_disp");

            entity.ToTable("rx_hydra_disp", tb =>
                {
                    tb.HasTrigger("tD_rx_hydra_disp");
                    tb.HasTrigger("tU_rx_hydra_disp");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.BagCalcTyp).IsFixedLength();
            entity.Property(e => e.DispApprInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<RxHydraDispMh>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.BagCalcTyp).IsFixedLength();
            entity.Property(e => e.DispApprInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<RxMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RxId, e.RevisionNo }).HasName("pkrx_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AllergiesDocInd).IsFixedLength();
            entity.Property(e => e.AllergiesReqInd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.CompletedInd).IsFixedLength();
            entity.Property(e => e.DispensedInd).IsFixedLength();
            entity.Property(e => e.InteractChkInd).IsFixedLength();
            entity.Property(e => e.MedsDocInd).IsFixedLength();
            entity.Property(e => e.MedsReqInd).IsFixedLength();
            entity.Property(e => e.NotDispensedInd).IsFixedLength();
            entity.Property(e => e.OrdByInstId).IsFixedLength();
            entity.Property(e => e.PathwayExistsInd).IsFixedLength();
            entity.Property(e => e.PharmApprInstId).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.PromptTxStartDateInd).IsFixedLength();
            entity.Property(e => e.ReorderCmtInd).IsFixedLength();
            entity.Property(e => e.ReorderReviewInd).IsFixedLength();
            entity.Property(e => e.RxPrintInstId).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.SupervisorInstId).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<RxTyp>(entity =>
        {
            entity.HasKey(e => e.RxTyp1).HasName("pkrx_typ");

            entity.Property(e => e.RxTyp1).ValueGeneratedNever();
            entity.Property(e => e.RxDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Rxnatomarchive>(entity =>
        {
            entity.HasKey(e => e.RxnatomarchiveId).HasName("pkRXNATOMARCHIVE");

            entity.Property(e => e.RxnatomarchiveId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Rxnconso>(entity =>
        {
            entity.HasKey(e => new { e.Rxcui, e.Rxaui }).HasName("pkRXNCONSO");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Rxnconsoocd>(entity =>
        {
            entity.HasKey(e => new { e.Rxcui, e.Rxaui }).HasName("pkRXNCONSOOCD");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Rxncui>(entity =>
        {
            entity.HasKey(e => new { e.Cui1, e.Cui2 }).HasName("pkRXNCUI");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Rxncuichanges>(entity =>
        {
            entity.HasKey(e => new { e.Rxaui, e.OldRxcui, e.NewRxcui }).HasName("pkRXNCUICHANGES");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Rxndoc>(entity =>
        {
            entity.HasKey(e => e.RxndocId).HasName("pkRXNDOC");

            entity.Property(e => e.RxndocId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Rxnrel>(entity =>
        {
            entity.HasKey(e => new { e.Rxaui1, e.Rxaui2, e.Rui }).HasName("pkRXNREL");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Rxnsab>(entity =>
        {
            entity.HasKey(e => e.Vcui).HasName("pkRXNSAB");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Rxnsat>(entity =>
        {
            entity.HasKey(e => e.RxnsatId).HasName("pkRXNSAT");

            entity.Property(e => e.RxnsatId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Rxnsatocd>(entity =>
        {
            entity.HasKey(e => e.RxnsatocdId).HasName("pkRXNSATOCD");

            entity.Property(e => e.RxnsatocdId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Rxnsty>(entity =>
        {
            entity.HasKey(e => new { e.Rxcui, e.Tui }).HasName("pkRXNSTY");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Rxnstyocd>(entity =>
        {
            entity.HasKey(e => new { e.Rxcui, e.Tui }).HasName("pkRXNSTYOCD");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ScanPaperQuality>(entity =>
        {
            entity.HasKey(e => e.PaperQualityCd).HasName("pkscan_paper_quality");

            entity.Property(e => e.PaperQualityCd).IsFixedLength();
            entity.Property(e => e.PaperQualityDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ScanPaperSize>(entity =>
        {
            entity.HasKey(e => e.PaperSizeCd).HasName("pkscan_paper_size");

            entity.Property(e => e.PaperSizeCd).IsFixedLength();
            entity.Property(e => e.PaperSizeDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ScheduleHoliday>(entity =>
        {
            entity.HasKey(e => e.HolidaySer)
                .HasName("XPKScheduleHoliday")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ScheduleHoliday");
                    tb.HasTrigger("tU_ScheduleHoliday");
                });

            entity.Property(e => e.HolidaySer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.ScheduleHoliday).HasConstraintName("FKDepartment_ScheduleHoliday");

            entity.HasOne(d => d.RecurrenceRuleSerNavigation).WithMany(p => p.ScheduleHoliday)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRecurrenceRule_ScheduleHoliday");
        });

        modelBuilder.Entity<ScheduledActivity>(entity =>
        {
            entity.HasKey(e => e.ScheduledActivitySer).HasName("XPKEvent");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ScheduledActivity");
                    tb.HasTrigger("tI_ScheduledActivity");
                    tb.HasTrigger("tU_ScheduledActivity");
                });

            entity.Property(e => e.ScheduledActivitySer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityInstanceSerNavigation).WithMany(p => p.ScheduledActivity).HasConstraintName("FKActivityInstance_ScheduledActivity");

            entity.HasOne(d => d.CreatedByResourceSerNavigation).WithMany(p => p.ScheduledActivity)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKResource_ScheduledActivity");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.ScheduledActivity)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKPatient_ScheduledActivity");

            entity.HasOne(d => d.RecurrenceRuleSerNavigation).WithMany(p => p.ScheduledActivity).HasConstraintName("FKRecurrenceRule_ScheduledActivity");
        });

        modelBuilder.Entity<ScheduledActivityMh>(entity =>
        {
            entity.HasKey(e => new { e.ScheduledActivitySer, e.ScheduledActivityRevCount }).HasName("XPKScheduledActivityMH");

            entity.ToTable("ScheduledActivityMH", tb =>
                {
                    tb.HasTrigger("tD_ScheduledActivityMH");
                    tb.HasTrigger("tI_ScheduledActivityMH");
                    tb.HasTrigger("tU_ScheduledActivityMH");
                });

            
                
                

            entity.HasOne(d => d.ScheduledActivitySerNavigation).WithMany(p => p.ScheduledActivityMh).HasConstraintName("FKScheduledActivity_ScheduledActivityMH");
        });

        modelBuilder.Entity<ScheduledExport>(entity =>
        {
            entity.HasKey(e => e.ScheduledExportId).HasName("pkscheduled_export");

            entity.Property(e => e.ScheduledExportId).ValueGeneratedNever();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ExportName).IsFixedLength();
            entity.Property(e => e.FailureAcknowledged).IsFixedLength();
            entity.Property(e => e.HasScheduleChanges).IsFixedLength();
            entity.Property(e => e.Password).IsFixedLength();
            entity.Property(e => e.SelectionTyp).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<ScheduledExportLog>(entity =>
        {
            entity.HasKey(e => e.ScheduledExportLogId).HasName("pkscheduled_export_log");

            entity.Property(e => e.ScheduledExportLogId).ValueGeneratedNever();
            entity.Property(e => e.EventCode).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<ScheduledExportPatient>(entity =>
        {
            entity.HasKey(e => new { e.ScheduledExportId, e.PtId }).HasName("pkscheduled_export_patient");

            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<ScheduledExportProgress>(entity =>
        {
            entity.HasKey(e => new { e.ScheduledExportId, e.IdType, e.IdValue }).HasName("pkscheduled_export_progress");

            entity.Property(e => e.IdType).IsFixedLength();
            entity.Property(e => e.IdValue).IsFixedLength();
        });

        modelBuilder.Entity<ScheduledObjectPointer>(entity =>
        {
            entity.HasKey(e => new { e.ScheduledProcedureSer, e.ObjectPointerSer }).HasName("XPKScheduledObjectPointer");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ScheduledObjectPointer");
                    tb.HasTrigger("tU_ScheduledObjectPointer");
                });

            
                
                

            entity.HasOne(d => d.ObjectPointerSerNavigation).WithMany(p => p.ScheduledObjectPointer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKObjectPointer_ScheduledObjectPointer");

            entity.HasOne(d => d.ScheduledProcedureSerNavigation).WithMany(p => p.ScheduledObjectPointer).HasConstraintName("FKScheduledProcedure_ScheduledObjectPointer");
        });

        modelBuilder.Entity<ScheduledPerformedProcedure>(entity =>
        {
            entity.HasKey(e => new { e.ScheduledProcedureSer, e.PerformedProcedureSer }).HasName("XPKScheduledPerformedProcedure");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ScheduledPerformedProcedure");
                    tb.HasTrigger("tU_ScheduledPerformedProcedure");
                });

            
                
                

            entity.HasOne(d => d.PerformedProcedureSerNavigation).WithMany(p => p.ScheduledPerformedProcedure).HasConstraintName("FKPerformedProcedure_ScheduledPerformedProcedure");

            entity.HasOne(d => d.ScheduledProcedureSerNavigation).WithMany(p => p.ScheduledPerformedProcedure).HasConstraintName("FKScheduledProcedure_ScheduledPerformedProcedure");
        });

        modelBuilder.Entity<ScheduledProcedure>(entity =>
        {
            entity.HasKey(e => e.ScheduledProcedureSer).HasName("XPKScheduledProcedure");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_ScheduledProcedure");
                    tb.HasTrigger("tI_ScheduledProcedure");
                    tb.HasTrigger("tU_ScheduledProcedure");
                });

            entity.Property(e => e.ScheduledProcedureSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActivityInstanceSerNavigation).WithMany(p => p.ScheduledProcedure).HasConstraintName("FKActivityInstance_ScheduledProcedure");

            entity.HasOne(d => d.AttendeeSerNavigation).WithMany(p => p.ScheduledProcedure).HasConstraintName("FKAttendee_ScheduledProcedure");
        });

        modelBuilder.Entity<ScheduledProcedureItem>(entity =>
        {
            entity.HasKey(e => e.ScheduledProcedureItemSer).HasName("XPKScheduledProcedureItem");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ScheduledProcedureItem");
                    tb.HasTrigger("tU_ScheduledProcedureItem");
                });

            entity.Property(e => e.ScheduledProcedureItemSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ProcedureItemSerNavigation).WithMany(p => p.ScheduledProcedureItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKProcedureItem_ScheduledProcedureItem");

            entity.HasOne(d => d.ScheduledProcedureSerNavigation).WithMany(p => p.ScheduledProcedureItem).HasConstraintName("FKScheduledProcedure_ScheduledProcedureItem");
        });

        modelBuilder.Entity<SchemeTyp>(entity =>
        {
            entity.HasKey(e => e.SchemeTyp1).HasName("pkscheme_typ");

            entity.Property(e => e.SchemeTyp1).ValueGeneratedNever();
            entity.Property(e => e.SchemeDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<SecndryDiagnosis>(entity =>
        {
            entity.ToView("SecndryDiagnosis");
        });

        modelBuilder.Entity<SeqNo>(entity =>
        {
            entity.HasKey(e => e.NoTyp).HasName("pkseq_no");

            entity.Property(e => e.NoTyp).IsFixedLength();
        });

        modelBuilder.Entity<SeqTyp>(entity =>
        {
            entity.HasKey(e => new { e.SeqTyp1, e.SeqTableName }).HasName("pkseq_typ");

            entity.Property(e => e.SeqTyp1).IsFixedLength();
            entity.Property(e => e.SeqTableName).IsFixedLength();
            entity.Property(e => e.DataTableName).IsFixedLength();
            entity.Property(e => e.SeqTableColumnName).IsFixedLength();
            entity.Property(e => e.SeqTypColumnName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Series>(entity =>
        {
            entity.HasKey(e => e.SeriesSer).HasName("XPKSeries");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Series");
                    tb.HasTrigger("tI_Series");
                    tb.HasTrigger("tU_Series");
                    tb.HasTrigger("tU_Series_VaBusinessLogic");
                });

            entity.Property(e => e.SeriesSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.RelatedCourseSerNavigation).WithMany(p => p.Series).HasConstraintName("FKCourse_Series");

            entity.HasOne(d => d.RelatedPlanSetupSerNavigation).WithMany(p => p.Series).HasConstraintName("FKPlanSetup_Series");

            entity.HasOne(d => d.RelatedRadiationSerNavigation).WithMany(p => p.Series).HasConstraintName("FKExternalField_Series");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.Series).HasConstraintName("FKMachine_Series");

            entity.HasOne(d => d.StudySerNavigation).WithMany(p => p.Series).HasConstraintName("FKStudy_Series");
        });

        modelBuilder.Entity<ServiceControl>(entity =>
        {
            entity.HasKey(e => new { e.ActivityName, e.ActivityDateTime }).HasName("XPKServiceControl");

            
                
                
        });

        modelBuilder.Entity<Session>(entity =>
        {
            entity.HasKey(e => e.SessionSer).HasName("XPKSession");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Session");
                    tb.HasTrigger("tD_Session_VaBusinessLogic");
                    tb.HasTrigger("tI_Session");
                    tb.HasTrigger("tI_Session_VaBusinessLogic");
                    tb.HasTrigger("tU_Session");
                    tb.HasTrigger("tU_Session_VaBusinessLogic");
                });

            entity.Property(e => e.SessionSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.CourseSerNavigation).WithMany(p => p.Session)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKCourse_Session");
        });

        modelBuilder.Entity<SessionProcedure>(entity =>
        {
            entity.HasKey(e => e.SessionProcedureSer).HasName("XPKSessionProcedure");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_SessionProcedure");
                    tb.HasTrigger("tD_SessionProcedure_PatientEditingLog");
                    tb.HasTrigger("tI_SessionProcedure");
                    tb.HasTrigger("tI_SessionProcedure_PatientEditingLog");
                    tb.HasTrigger("tU_SessionProcedure");
                    tb.HasTrigger("tU_SessionProcedure_PatientEditingLog");
                });

            entity.Property(e => e.SessionProcedureSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ProcedureItemSerNavigation).WithMany(p => p.SessionProcedure).HasConstraintName("FKProcedureItem_SessionProcedure");

            entity.HasOne(d => d.SeriesSerNavigation).WithMany(p => p.SessionProcedure)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSeries_SessionProcedure");

            entity.HasOne(d => d.SessionSerNavigation).WithMany(p => p.SessionProcedure)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSession_SessionProcedure");
        });

        modelBuilder.Entity<SessionProcedurePart>(entity =>
        {
            entity.HasKey(e => e.SessionProcedurePartSer).HasName("XPKSessionProcedurePart");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_SessionProcedurePart");
                    tb.HasTrigger("tU_SessionProcedurePart");
                });

            entity.Property(e => e.SessionProcedurePartSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.SessionProcedurePart).HasConstraintName("FKRadation_SessionProcedurePart");

            entity.HasOne(d => d.RtplanSerNavigation).WithMany(p => p.SessionProcedurePart).HasConstraintName("FKRTPlan_SessionProcedurePart");

            entity.HasOne(d => d.SessionProcedureSerNavigation).WithMany(p => p.SessionProcedurePart)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSessionProcedure_SessionProcedurePart");
        });

        modelBuilder.Entity<SessionProcedureTemplate>(entity =>
        {
            entity.HasKey(e => e.SessionProcedureTemplateSer).HasName("XPKSessionProcedureTemplate");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_SessionProcedureTemplate");
                    tb.HasTrigger("tU_SessionProcedureTemplate");
                });

            entity.Property(e => e.SessionProcedureTemplateSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<SessionProcedureTemplatePart>(entity =>
        {
            entity.HasKey(e => e.SessionProcedureTemplatePartSer).HasName("XPKSessionProcedureTemplatePart");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_SessionProcedureTemplatePar");
                    tb.HasTrigger("tU_SessionProcedureTemplatePar");
                });

            entity.Property(e => e.SessionProcedureTemplatePartSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.SessionProcedureTemplateSerNavigation).WithMany(p => p.SessionProcedureTemplatePart)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSessionProcedureTemplate_SessionProcedureTemplatePart");
        });

        modelBuilder.Entity<SessionRtplan>(entity =>
        {
            entity.HasKey(e => e.SessionRtplanSer).HasName("XPKSessionPlan");

            entity.ToTable("SessionRTPlan", tb =>
                {
                    tb.HasTrigger("tD_SessionRTPlan_PatientEditingLog");
                    tb.HasTrigger("tI_SessionRTPlan");
                    tb.HasTrigger("tI_SessionRTPlan_PatientEditingLog");
                    tb.HasTrigger("tU_SessionRTPlan");
                    tb.HasTrigger("tU_SessionRTPlan_PatientEditingLog");
                });

            entity.Property(e => e.SessionRtplanSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.RtplanSerNavigation).WithMany(p => p.SessionRtplan)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRTPlan_SessionPlan");

            entity.HasOne(d => d.SessionSerNavigation).WithMany(p => p.SessionRtplan)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSession_SessionRTPlan");
        });

        modelBuilder.Entity<SexCd>(entity =>
        {
            entity.HasKey(e => e.SexCd1).HasName("pksex_cd");

            entity.Property(e => e.SexCd1).IsFixedLength();
            entity.Property(e => e.SexDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<SexualOrientation>(entity =>
        {
            entity.HasKey(e => e.SexualOrientationId).HasName("PK__sexual_o__13AF41B5F838ABAA");

            entity.Property(e => e.SexualOrientationId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.DefaultInd).IsFixedLength();
            entity.Property(e => e.FreeTextInd).IsFixedLength();
            entity.Property(e => e.SexualOrientationCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<SimulationImager>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKImageIntensifier");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_SimulationImager");
                    tb.HasTrigger("tU_SimulationImager");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.SimulationImager).HasConstraintName("FKImagingDevice_SimulatorImager");

            entity.HasOne(d => d.SimulatorResourceSerNavigation).WithOne(p => p.SimulationImager)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSimulator_SimulationImager");
        });

        modelBuilder.Entity<Simulator>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKSimulator");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Simulator");
                    tb.HasTrigger("tI_Simulator");
                    tb.HasTrigger("tU_Simulator");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.Simulator).HasConstraintName("FKRadiationDevice_Simulator");
        });

        modelBuilder.Entity<Slice>(entity =>
        {
            entity.HasKey(e => e.SliceSer).HasName("XPKSlice");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Slice");
                    tb.HasTrigger("tI_Slice");
                    tb.HasTrigger("tI_Slice_VaBusinessLogic");
                    tb.HasTrigger("tU_Slice");
                    tb.HasTrigger("tU_Slice_VaBusinessLogic");
                });

            entity.Property(e => e.SliceSer).ValueGeneratedNever();
            
                
                
            entity.Property(e => e.Transformation).IsFixedLength();

            entity.HasOne(d => d.ContributingEquipmentSerNavigation).WithMany(p => p.SliceContributingEquipmentSerNavigation).HasConstraintName("FKEquipment_Slice_ContributingEquipment");

            entity.HasOne(d => d.DctransferSyntaxSerNavigation).WithMany(p => p.Slice)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKDCTransferSyntax_Slice");

            entity.HasOne(d => d.EquipmentSerNavigation).WithMany(p => p.SliceEquipmentSerNavigation).HasConstraintName("FKEquipment_Slice");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.Slice).HasConstraintName("FKMachine_Slice");

            entity.HasOne(d => d.SeriesSerNavigation).WithMany(p => p.Slice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSeries_Slice");

            entity.HasOne(d => d.SopclassSerNavigation).WithMany(p => p.Slice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSOPClass_Slice");
        });

        modelBuilder.Entity<SliceCt>(entity =>
        {
            entity.HasKey(e => e.SliceSer).HasName("XPKSliceCT");

            entity.ToTable("SliceCT", tb =>
                {
                    tb.HasTrigger("tI_SliceCT");
                    tb.HasTrigger("tU_SliceCT");
                    tb.HasTrigger("tU_SliceCT_VaBusinessLogic");
                });

            entity.Property(e => e.SliceSer).ValueGeneratedNever();
            entity.Property(e => e.DataCollectionCenterX).HasComment("The x coordinate (in the patient coordinate system) of the center of the region in which data were collected in [mm]. Maps to DICOM tag (0018,9313).");
            entity.Property(e => e.DataCollectionCenterY).HasComment("The y coordinate (in the patient coordinate system) of the center of the region in which data were collected in [mm]. Maps to DICOM tag (0018,9313).");
            entity.Property(e => e.DataCollectionCenterZ).HasComment("The z coordinate (in the patient coordinate system) of the center of the region in which data were collected in [mm]. Maps to DICOM tag (0018,9313).");

            entity.HasOne(d => d.SliceSerNavigation).WithOne(p => p.SliceCt).HasConstraintName("FKSlice_SliceCT");
        });

        modelBuilder.Entity<SliceMr>(entity =>
        {
            entity.HasKey(e => e.SliceSer).HasName("XPKSliceMR");

            entity.ToTable("SliceMR", tb =>
                {
                    tb.HasTrigger("tI_SliceMR");
                    tb.HasTrigger("tU_SliceMR");
                    tb.HasTrigger("tU_SliceMR_VaBusinessLogic");
                });

            entity.Property(e => e.SliceSer).ValueGeneratedNever();

            entity.HasOne(d => d.SliceSerNavigation).WithOne(p => p.SliceMr).HasConstraintName("FKSlice_SliceMR");
        });

        modelBuilder.Entity<SlicePortalDoseAnalysis>(entity =>
        {
            entity.HasKey(e => e.SlicePortalDoseAnalysisSer).HasName("XPKSlicePortalDoseAnalysis");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_SlicePortalDoseAnalysis");
                    tb.HasTrigger("tU_SlicePortalDoseAnalysis");
                });

            entity.Property(e => e.SlicePortalDoseAnalysisSer).ValueGeneratedNever();

            entity.HasOne(d => d.PortalDoseAnalysisSerNavigation).WithMany(p => p.SlicePortalDoseAnalysis)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPortalDoseAnalysis_SlicePortalDoseAnalysis");

            entity.HasOne(d => d.SliceSerNavigation).WithMany(p => p.SlicePortalDoseAnalysis)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSlice_SlicePortalDoseAnalysis");
        });

        modelBuilder.Entity<SliceRt>(entity =>
        {
            entity.HasKey(e => e.SliceSer).HasName("XPKSliceRT");

            entity.ToTable("SliceRT", tb =>
                {
                    tb.HasTrigger("tI_SliceRT");
                    tb.HasTrigger("tI_SliceRT_VaBusinessLogic");
                    tb.HasTrigger("tU_SliceRT");
                    tb.HasTrigger("tU_SliceRT_VaBusinessLogic");
                });

            entity.Property(e => e.SliceSer).ValueGeneratedNever();

            entity.HasOne(d => d.DoubleExposureSerNavigation).WithMany(p => p.SliceRt).HasConstraintName("FKImage_SliceRT");

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.SliceRt)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKPlanSetup_SliceRT");

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.SliceRt)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKRadiation_SliceRT");

            entity.HasOne(d => d.SliceSerNavigation).WithOne(p => p.SliceRt).HasConstraintName("FKSlice_SliceRT");
        });

        modelBuilder.Entity<Slot>(entity =>
        {
            entity.HasKey(e => e.SlotSer)
                .HasName("XPKSlot")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Slot");
                    tb.HasTrigger("tI_Slot");
                    tb.HasTrigger("tU_Slot");
                });

            entity.HasIndex(e => new { e.ResourceSer, e.SlotNumber }, "XAK1Slot")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.SlotSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.Slot)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRadiationDevice_Slot");
        });

        modelBuilder.Entity<SlotAddOn>(entity =>
        {
            entity.HasKey(e => new { e.AddOnSer, e.SlotSer }).HasName("XPKSlotAddOn");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_SlotAddOn");
                    tb.HasTrigger("tU_SlotAddOn");
                });

            
                
                

            entity.HasOne(d => d.AddOnSerNavigation).WithMany(p => p.SlotAddOn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKAddOn_SlotAddOn");

            entity.HasOne(d => d.SlotSerNavigation).WithMany(p => p.SlotAddOn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSlot_SlotAddOn");
        });

        modelBuilder.Entity<SmokingUseCd>(entity =>
        {
            entity.HasKey(e => e.SmokingUseCd1).HasName("pksmoking_use_cd");

            entity.Property(e => e.SmokingUseCd1).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Snout>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKSnout");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_Snout");
                    tb.HasTrigger("tU_Snout");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithOne(p => p.Snout).HasConstraintName("FKAddOn_Snout");
        });

        modelBuilder.Entity<Sopclass>(entity =>
        {
            entity.HasKey(e => e.SopclassSer).HasName("XPKSOPClass");

            entity.ToTable("SOPClass", tb =>
                {
                    tb.HasTrigger("tD_SOPClass");
                    tb.HasTrigger("tU_SOPClass");
                });

            entity.Property(e => e.SopclassSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<SourcePosition>(entity =>
        {
            entity.HasKey(e => e.SourcePositionSer).HasName("XPKSourcePosition");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_SourcePosition_PatientEditingLog");
                    tb.HasTrigger("tI_SourcePosition");
                    tb.HasTrigger("tI_SourcePosition_PatientEditingLog");
                    tb.HasTrigger("tI_SourcePosition_VaBusinessLogic");
                    tb.HasTrigger("tU_SourcePosition");
                    tb.HasTrigger("tU_SourcePosition_PatientEditingLog");
                    tb.HasTrigger("tU_SourcePosition_VaBusinessLogic");
                });

            entity.Property(e => e.SourcePositionSer).ValueGeneratedNever();
            entity.Property(e => e.DwellTimeLockedFlag).HasComment("Identifies if the dwell time of this dwell position is locked. 1 = locked; it is not allowed to change the dwell time, \r\nunless the plan is e.g. normalized, or dwell times are rounded to machine resolution. 0 = unlocked; it is allowed to change the dwell time.");
            
                
                

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.SourcePosition)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKBrachyField_SourcePosition");

            entity.HasOne(d => d.RadioactiveSourceSerNavigation).WithMany(p => p.SourcePosition).HasConstraintName("FKRadioactiveSource_SourcePosition");

            entity.HasOne(d => d.StructureSerNavigation).WithMany(p => p.SourcePosition).HasConstraintName("FKStructure_SourcePosition");
        });

        modelBuilder.Entity<SourceTyp>(entity =>
        {
            entity.HasKey(e => e.SourceTyp1).HasName("pksource_typ");

            entity.Property(e => e.SourceTyp1).ValueGeneratedNever();
            entity.Property(e => e.SourceDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<SpatialRegistration>(entity =>
        {
            entity.HasKey(e => e.SpatialRegistrationSer).HasName("XPKSpatialRegistration");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_SpatialRegistration");
                    tb.HasTrigger("tI_SpatialRegistration");
                    tb.HasTrigger("tU_SpatialRegistration");
                });

            entity.Property(e => e.SpatialRegistrationSer).ValueGeneratedNever();
            
                
                
            entity.Property(e => e.Transformation).IsFixedLength();

            entity.HasOne(d => d.SpatialRegistrationIodserNavigation).WithMany(p => p.SpatialRegistration).HasConstraintName("FKSpatialRegistrationIOD_SpatialRegistration");
        });

        modelBuilder.Entity<SpatialRegistrationImage>(entity =>
        {
            entity.HasKey(e => e.SpatialRegistrationImageSer).HasName("XPKSpatialRegistrationImage");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_SpatialRegistrationImage");
                    tb.HasTrigger("tU_SpatialRegistrationImage");
                });

            entity.Property(e => e.SpatialRegistrationImageSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ImageSerNavigation).WithMany(p => p.SpatialRegistrationImage).HasConstraintName("FKImage_SpatialRegistrationImage");

            entity.HasOne(d => d.SpatialRegistrationSerNavigation).WithMany(p => p.SpatialRegistrationImage).HasConstraintName("FKSpatialRegistration_SpatialRegistrationImage");
        });

        modelBuilder.Entity<SpatialRegistrationIod>(entity =>
        {
            entity.HasKey(e => e.SpatialRegistrationIodser).HasName("XPKSpatialRegistrationIOD");

            entity.ToTable("SpatialRegistrationIOD", tb =>
                {
                    tb.HasTrigger("tD_SpatialRegistrationIOD");
                    tb.HasTrigger("tI_SpatialRegistrationIOD");
                    tb.HasTrigger("tU_SpatialRegistrationIOD");
                });

            entity.Property(e => e.SpatialRegistrationIodser).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.EquipmentSerNavigation).WithMany(p => p.SpatialRegistrationIod).HasConstraintName("FKEquipment_SpatialRegistrationIOD");

            entity.HasOne(d => d.SeriesSerNavigation).WithMany(p => p.SpatialRegistrationIod).HasConstraintName("FKSeries_SpatialRegistrationIOD");
        });

        modelBuilder.Entity<SpcmnAction>(entity =>
        {
            entity.HasKey(e => e.SpcmnActionId).HasName("pkspcmn_action");

            entity.Property(e => e.SpcmnActionId).ValueGeneratedNever();
            entity.Property(e => e.SpcmnActionCd).IsFixedLength();
            entity.Property(e => e.SpcmnActionDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<SpcmnCond>(entity =>
        {
            entity.HasKey(e => e.SpcmnCondId).HasName("pkspcmn_cond");

            entity.Property(e => e.SpcmnCondId).ValueGeneratedNever();
            entity.Property(e => e.SpcmnCondCd).IsFixedLength();
            entity.Property(e => e.SpcmnCondDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<SpcmnRejectReason>(entity =>
        {
            entity.HasKey(e => e.SpcmnRejectReasonId).HasName("pkspcmn_reject_reason");

            entity.Property(e => e.SpcmnRejectReasonId).ValueGeneratedNever();
            entity.Property(e => e.SpcmnRejectReasonCd).IsFixedLength();
            entity.Property(e => e.SpcmnRejectReasonDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<SpcmnSource>(entity =>
        {
            entity.HasKey(e => e.SpcmnSourceId).HasName("pkspcmn_source");

            entity.Property(e => e.SpcmnSourceId).ValueGeneratedNever();
            entity.Property(e => e.SpcmnSourceCd).IsFixedLength();
            entity.Property(e => e.SpcmnSourceDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<SpcmnTyp>(entity =>
        {
            entity.HasKey(e => e.SpcmnTypId).HasName("pkspcmn_typ");

            entity.Property(e => e.SpcmnTypId).ValueGeneratedNever();
            entity.Property(e => e.SpcmnTypCd).IsFixedLength();
            entity.Property(e => e.SpcmnTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Spsr>(entity =>
        {
            entity.HasKey(e => e.Spsr1).HasName("pkspsr");

            entity.Property(e => e.Spsr1).ValueGeneratedNever();
            entity.Property(e => e.SpsrDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<SsCodeTable>(entity =>
        {
            entity.HasKey(e => new { e.CodeTyp, e.SsCodeVal, e.InternalTyp }).HasName("pkss_code_table");

            entity.Property(e => e.SsCodeVal).IsFixedLength();
            entity.Property(e => e.SsDataTag).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<SsPharmLoad>(entity =>
        {
            entity.HasKey(e => e.Ncpdpid).HasName("pkss_pharm_load");

            entity.Property(e => e.Ncpdpid).IsFixedLength();
            entity.Property(e => e.ActiveEndDt).IsFixedLength();
            entity.Property(e => e.ActiveStartDt).IsFixedLength();
            entity.Property(e => e.Addr1).IsFixedLength();
            entity.Property(e => e.Addr2).IsFixedLength();
            entity.Property(e => e.City).IsFixedLength();
            entity.Property(e => e.CrossSt).IsFixedLength();
            entity.Property(e => e.Email).IsFixedLength();
            entity.Property(e => e.Fax).IsFixedLength();
            entity.Property(e => e.LastModDt).IsFixedLength();
            entity.Property(e => e.Npi).IsFixedLength();
            entity.Property(e => e.OldSrvcLvl).IsFixedLength();
            entity.Property(e => e.Open24hrFlag).IsFixedLength();
            entity.Property(e => e.PartnerAcct).IsFixedLength();
            entity.Property(e => e.PharmTyp).IsFixedLength();
            entity.Property(e => e.Phone1).IsFixedLength();
            entity.Property(e => e.PhoneAlt1).IsFixedLength();
            entity.Property(e => e.PhoneAlt1Qual).IsFixedLength();
            entity.Property(e => e.PhoneAlt2).IsFixedLength();
            entity.Property(e => e.PhoneAlt2Qual).IsFixedLength();
            entity.Property(e => e.PhoneAlt3).IsFixedLength();
            entity.Property(e => e.PhoneAlt3Qual).IsFixedLength();
            entity.Property(e => e.PhoneAlt4).IsFixedLength();
            entity.Property(e => e.PhoneAlt4Qual).IsFixedLength();
            entity.Property(e => e.PhoneAlt5).IsFixedLength();
            entity.Property(e => e.PhoneAlt5Qual).IsFixedLength();
            entity.Property(e => e.RecChg).IsFixedLength();
            entity.Property(e => e.RefNo1).IsFixedLength();
            entity.Property(e => e.RefNo1Qual).IsFixedLength();
            entity.Property(e => e.SrvcLvl).IsFixedLength();
            entity.Property(e => e.SrvcLvlTxt).IsFixedLength();
            entity.Property(e => e.SrvcLvlTxtChg).IsFixedLength();
            entity.Property(e => e.State).IsFixedLength();
            entity.Property(e => e.StoreName).IsFixedLength();
            entity.Property(e => e.StoreNo).IsFixedLength();
            entity.Property(e => e.Version).IsFixedLength();
            entity.Property(e => e.ZipCd).IsFixedLength();
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKStaff");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Staff");
                    tb.HasTrigger("tI_Staff");
                    tb.HasTrigger("tU_Staff");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();
            entity.Property(e => e.Sex).IsFixedLength();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.Staff).HasConstraintName("FKResource_Staff");
        });

        modelBuilder.Entity<StaffMh>(entity =>
        {
            entity.HasKey(e => new { e.ResourceSer, e.ResourceRevCount }).HasName("XPKStaffMH");

            entity.ToTable("StaffMH", tb =>
                {
                    tb.HasTrigger("tD_StaffMH");
                    tb.HasTrigger("tI_StaffMH");
                    tb.HasTrigger("tU_StaffMH");
                });

            
                
                
            entity.Property(e => e.Sex).IsFixedLength();

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.StaffMh).HasConstraintName("FKStaff_StaffMH");
        });

        modelBuilder.Entity<Stage>(entity =>
        {
            entity.ToView("Stage");
        });

        modelBuilder.Entity<StageBasis>(entity =>
        {
            entity.HasKey(e => e.StageBasis1).HasName("pkstage_basis");

            entity.Property(e => e.StageBasis1).IsFixedLength();
            entity.Property(e => e.StageBasisDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<StageDefCulture>(entity =>
        {
            entity.HasKey(e => new { e.CultureCd, e.StageCd }).HasName("pk_stage_def_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.StageCd).IsFixedLength();
            entity.Property(e => e.StageDesc).IsFixedLength();
            entity.Property(e => e.StageDescEn).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<StageTrans>(entity =>
        {
            entity.HasKey(e => new { e.StageDefn, e.Stage }).HasName("pkstage_trans");

            entity.Property(e => e.StageDefn).IsFixedLength();
            entity.Property(e => e.Stage).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<StandardWedge>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKStandardWedge");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_StandardWedge");
                    tb.HasTrigger("tU_StandardWedge");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithOne(p => p.StandardWedge).HasConstraintName("FKWedge_StandardWedge");
        });

        modelBuilder.Entity<StatusCat>(entity =>
        {
            entity.HasKey(e => e.StatusCatId).HasName("pkstatus_cat");

            entity.Property(e => e.StatusCatId).ValueGeneratedNever();
            entity.Property(e => e.StatusCatDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<StatusCatValue>(entity =>
        {
            entity.HasKey(e => new { e.StatusCatId, e.StatusValueId }).HasName("pkstatus_cat_value");

            entity.Property(e => e.StatusValueDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.StatusCat).WithMany(p => p.StatusCatValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_status_cat_value");
        });

        modelBuilder.Entity<StatusIcon>(entity =>
        {
            entity.HasKey(e => e.StatusIconId).HasName("pkstatus_icon");

            entity.Property(e => e.StatusIconId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd)
                .HasDefaultValue("Y")
                .IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<StatusTyp>(entity =>
        {
            entity.HasKey(e => e.StatusTyp1).HasName("pkstatus_typ");

            entity.Property(e => e.StatusTyp1).ValueGeneratedNever();
            entity.Property(e => e.FalseDesc).IsFixedLength();
            entity.Property(e => e.NullDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TrueDesc).IsFixedLength();
        });

        modelBuilder.Entity<StatusTypCulture>(entity =>
        {
            entity.HasKey(e => new { e.StatusTyp, e.CultureCd }).HasName("pkstatus_typ_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.LookupDescFalse).IsFixedLength();
            entity.Property(e => e.LookupDescNull).IsFixedLength();
            entity.Property(e => e.LookupDescTrue).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<StgAllTreatmentChanges1>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Status).HasDefaultValue(0);
        });

        modelBuilder.Entity<StgBillEventTyp>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgCalcTyp>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgCancelReasonTyp>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgCancerType>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgDimCellType>(entity =>
        {
            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.MorphCd).IsFixedLength();
        });

        modelBuilder.Entity<StgDimCellType1>(entity =>
        {
            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.MorphCd).IsFixedLength();
        });

        modelBuilder.Entity<StgDimDiagnosisCode>(entity =>
        {
            entity.Property(e => e.IcdCd).IsFixedLength();
        });

        modelBuilder.Entity<StgDimDiagnosisCode1>(entity =>
        {
            entity.Property(e => e.IcdCd).IsFixedLength();
        });

        modelBuilder.Entity<StgDimIcdosite>(entity =>
        {
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.IcdoSiteCd).IsFixedLength();
        });

        modelBuilder.Entity<StgDimIcdosite1>(entity =>
        {
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.IcdoSiteCd).IsFixedLength();
        });

        modelBuilder.Entity<StgDimMedOncPlanSummary>(entity =>
        {
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
        });

        modelBuilder.Entity<StgDimMedoncPlan>(entity =>
        {
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
        });

        modelBuilder.Entity<StgDimMedoncPlanInterval>(entity =>
        {
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
        });

        modelBuilder.Entity<StgDimMedoncPlanPhase>(entity =>
        {
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
        });

        modelBuilder.Entity<StgDimPatientDiseaseResponse>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgDimPatientDiseaseResponseErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgDimPatientEnm>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgDimPatientJournalErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgDimPatientPerformanceStatus>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgDimPatientPerformanceStatusErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgDimPatientVisitTrackingErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgDimPayorMo>(entity =>
        {
            entity.Property(e => e.InstId).IsFixedLength();
        });

        modelBuilder.Entity<StgDimPrescription1>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<StgDimQuestionnaires>(entity =>
        {
            entity.Property(e => e.QstrName).IsFixedLength();
        });

        modelBuilder.Entity<StgDimVisitEventDetailErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgDoseLevel>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgDoseVrtnTyp>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgFactActivityBillingErrorDataMo>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactActivityBillingMo>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientAllergy>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientAllergyErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientExam>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientExamErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientFamilyHistory>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientFamilyHistory1>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientFamilyHistoryErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientLabResult>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientLabResult1>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientLabResultErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientMedicalHistory>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientMedicalHistory1>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientMedoncTreatment>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientMedoncTreatmentErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientSocialHistory>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientSocialHistoryErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientToxicity>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientToxicity1>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPatientToxicityErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPhysicianOrder>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactPhysicianOrderErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactQuestionnaires>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.QstrName).IsFixedLength();
        });

        modelBuilder.Entity<StgFactQuestionnairesErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.QstrName).IsFixedLength();
        });

        modelBuilder.Entity<StgFactRxDispSyringe>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactRxDispSyringeErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactRxDispensary>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactRxDispensaryErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactVisitNote>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFactVisitNoteErrorData>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgFlatPatientDiagnosisSite>(entity =>
        {
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<StgImage1>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Status).HasDefaultValue(0);
        });

        modelBuilder.Entity<StgInfusionTyp>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgPatientAdmissionStatus>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<StgPrtyOfSrv>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgStkhProfTyp>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgStkhRoleTyp>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgTestRequestTyp>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgTpClsValue>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgVvLookupCdCulture>(entity =>
        {
            entity.Property(e => e.LookupCd).IsFixedLength();
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgVvLookupCdCulture1>(entity =>
        {
            entity.Property(e => e.LookupCd).IsFixedLength();
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgVvLookupTypCulture>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgVvLookupTypCulture1>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgVvStageDefCulture>(entity =>
        {
            entity.Property(e => e.StageCd).IsFixedLength();
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgVvStageDefCulture1>(entity =>
        {
            entity.Property(e => e.StageCd).IsFixedLength();
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgVvStatusTypCulture>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgVvStatusTypCulture1>(entity =>
        {
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgVvTpClsValue>(entity =>
        {
            entity.Property(e => e.Lookuptype).IsFixedLength();
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgXrefTpCls>(entity =>
        {
            entity.Property(e => e.LookupCd).IsFixedLength();
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<StgXrefTpCls1>(entity =>
        {
            entity.Property(e => e.LookupCd).IsFixedLength();
            entity.Property(e => e.TableName).IsFixedLength();
        });

        modelBuilder.Entity<Stgstkh>(entity =>
        {
            entity.Property(e => e.StkhId).IsFixedLength();
        });

        modelBuilder.Entity<Stkh>(entity =>
        {
            entity.HasKey(e => e.StkhId).HasName("pkstkh");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.AllowSigInd).IsFixedLength();
            entity.Property(e => e.City).IsFixedLength();
            entity.Property(e => e.EndReasonCd).IsFixedLength();
            entity.Property(e => e.InternalInd).IsFixedLength();
            entity.Property(e => e.InternalSysInd).IsFixedLength();
            entity.Property(e => e.PrefCorspMthdCd).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DisciplineTypNavigation).WithMany(p => p.Stkh).HasConstraintName("fk3_stkh");

            entity.HasOne(d => d.OrgTypNavigation).WithMany(p => p.Stkh).HasConstraintName("fk2_stkh");

            entity.HasOne(d => d.ProfTypNavigation).WithMany(p => p.Stkh).HasConstraintName("fk1_stkh");
        });

        modelBuilder.Entity<StkhAddress>(entity =>
        {
            entity.HasKey(e => new { e.StkhId, e.StkhAddressId }).HasName("pkstkh_address");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.Address1).IsFixedLength();
            entity.Property(e => e.Address2).IsFixedLength();
            entity.Property(e => e.Address3).IsFixedLength();
            entity.Property(e => e.AddressCd).IsFixedLength();
            entity.Property(e => e.City).IsFixedLength();
            entity.Property(e => e.County).IsFixedLength();
            entity.Property(e => e.EndReasonCd).IsFixedLength();
            entity.Property(e => e.PcZip).IsFixedLength();
            entity.Property(e => e.PrefInd).IsFixedLength();
            entity.Property(e => e.PrvState).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PcZipFmt).WithMany(p => p.StkhAddress).HasConstraintName("fk3_stkh_address");

            entity.HasOne(d => d.Stkh).WithMany(p => p.StkhAddress)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_stkh_address");

            entity.HasOne(d => d.AddressCdNavigation).WithMany(p => p.StkhAddress)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_stkh_address");
        });

        modelBuilder.Entity<StkhDesignation>(entity =>
        {
            entity.HasKey(e => new { e.StkhId, e.DesignationTyp }).HasName("pkstkh_designation");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Stkh).WithMany(p => p.StkhDesignation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_stkh_designation");
        });

        modelBuilder.Entity<StkhEmail>(entity =>
        {
            entity.HasKey(e => new { e.StkhId, e.StkhEmailId }).HasName("pkstkh_email");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.EmailCd).IsFixedLength();
            entity.Property(e => e.EndReasonCd).IsFixedLength();
            entity.Property(e => e.PrefInd).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.StkhStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Stkh).WithMany(p => p.StkhEmail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_stkh_email");

            entity.HasOne(d => d.EmailCdNavigation).WithMany(p => p.StkhEmail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_stkh_email");
        });

        modelBuilder.Entity<StkhInstKeyCd>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.StkhKeyCd }).HasName("pkstkh_inst_key_cd");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.EndVal).IsFixedLength();
            entity.Property(e => e.FormatMask).IsFixedLength();
            entity.Property(e => e.InstLabel).IsFixedLength();
            entity.Property(e => e.NextSeq).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.RxPrintInd).IsFixedLength();
            entity.Property(e => e.StartVal).IsFixedLength();
            entity.Property(e => e.SysGnrtInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UniqueHistInd).IsFixedLength();
            entity.Property(e => e.UniqueInd).IsFixedLength();
            entity.Property(e => e.VisibleInd).IsFixedLength();

            entity.HasOne(d => d.StkhKeyCdNavigation).WithMany(p => p.StkhInstKeyCd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_stkh_inst_key_cd");
        });

        modelBuilder.Entity<StkhKey>(entity =>
        {
            entity.HasKey(e => new { e.StkhId, e.StkhKeyId }).HasName("pkstkh_key");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.CurValueInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.KeyValue).IsFixedLength();
            entity.Property(e => e.KeyValueUnformat).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpperKeyValue)
                .IsFixedLength()
                .UseCollation("Latin1_General_100_CI_AI_SC");
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.Stkh).WithMany(p => p.StkhKey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_stkh_key");

            entity.HasOne(d => d.StkhKeyCdNavigation).WithMany(p => p.StkhKey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_stkh_key");
        });

        modelBuilder.Entity<StkhKeyCd>(entity =>
        {
            entity.HasKey(e => e.StkhKeyCd1).HasName("pkstkh_key_cd");

            entity.Property(e => e.StkhKeyCd1).ValueGeneratedNever();
            entity.Property(e => e.KeyLabel).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.KeyScopeTypNavigation).WithMany(p => p.StkhKeyCd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_stkh_key_cd");

            entity.HasOne(d => d.RoleTypNavigation).WithMany(p => p.StkhKeyCd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_stkh_key_cd");
        });

        modelBuilder.Entity<StkhName>(entity =>
        {
            entity.HasKey(e => new { e.StkhId, e.StkhNameId }).HasName("pkstkh_name");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.DspName).IsFixedLength();
            entity.Property(e => e.EndReasonCd).IsFixedLength();
            entity.Property(e => e.FirstName).IsFixedLength();
            entity.Property(e => e.Initial).IsFixedLength();
            entity.Property(e => e.LastName).IsFixedLength();
            entity.Property(e => e.NameCd).IsFixedLength();
            entity.Property(e => e.OrgName).IsFixedLength();
            entity.Property(e => e.PrefInd).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpperFirstName)
                .IsFixedLength()
                .UseCollation("Latin1_General_100_CI_AI_SC");
            entity.Property(e => e.UpperName)
                .IsFixedLength()
                .UseCollation("Latin1_General_100_CI_AI_SC");

            entity.HasOne(d => d.Stkh).WithMany(p => p.StkhName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_stkh_name");

            entity.HasOne(d => d.NameCdNavigation).WithMany(p => p.StkhName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_stkh_name");
        });

        modelBuilder.Entity<StkhPhone>(entity =>
        {
            entity.HasKey(e => new { e.StkhId, e.StkhPhoneId }).HasName("pkstkh_phone");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.EndReasonCd).IsFixedLength();
            entity.Property(e => e.ExtNo).IsFixedLength();
            entity.Property(e => e.PhoneCd).IsFixedLength();
            entity.Property(e => e.PhoneNo).IsFixedLength();
            entity.Property(e => e.PrefInd).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.StkhStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PhoneNoFmt).WithMany(p => p.StkhPhone).HasConstraintName("fk3_stkh_phone");

            entity.HasOne(d => d.Stkh).WithMany(p => p.StkhPhone)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_stkh_phone");

            entity.HasOne(d => d.PhoneCdNavigation).WithMany(p => p.StkhPhone)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_stkh_phone");
        });

        modelBuilder.Entity<StkhRole>(entity =>
        {
            entity.HasKey(e => new { e.StkhId, e.StkhRoleId }).HasName("pkstkh_role");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.EndReasonCd).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.RoleTypNavigation).WithMany(p => p.StkhRole)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_stkh_role");

            entity.HasOne(d => d.Stkh).WithMany(p => p.StkhRole)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_stkh_role");
        });

        modelBuilder.Entity<StkhRoleReltn>(entity =>
        {
            entity.HasKey(e => e.RoleReltnTyp).HasName("pkstkh_role_reltn");

            entity.Property(e => e.RoleReltnTyp).ValueGeneratedNever();
            entity.Property(e => e.FromStkhCd).IsFixedLength();
            entity.Property(e => e.ToStkhCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.FromRoleTypNavigation).WithMany(p => p.StkhRoleReltnFromRoleTypNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_stkh_role_reltn");

            entity.HasOne(d => d.ToRoleTypNavigation).WithMany(p => p.StkhRoleReltnToRoleTypNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_stkh_role_reltn");
        });

        modelBuilder.Entity<StkhRoleTyp>(entity =>
        {
            entity.HasKey(e => e.RoleTyp).HasName("pkstkh_role_typ");

            entity.Property(e => e.RoleTyp).ValueGeneratedNever();
            entity.Property(e => e.RoleDesc).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<StkhSeq>(entity =>
        {
            entity.HasKey(e => new { e.StkhId, e.SeqTyp }).HasName("pkstkh_seq");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.SeqTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<StkhStkhXref>(entity =>
        {
            entity.HasKey(e => e.StkhStkhId).HasName("pkstkh_stkh_xref");

            entity.Property(e => e.StkhStkhId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.EndReasonCd).IsFixedLength();
            entity.Property(e => e.FromStkhId).IsFixedLength();
            entity.Property(e => e.LocDesc).IsFixedLength();
            entity.Property(e => e.PrefCorspMthdCd).IsFixedLength();
            entity.Property(e => e.PrefEmailInd).IsFixedLength();
            entity.Property(e => e.PrefFaxInd).IsFixedLength();
            entity.Property(e => e.PrefMailInd).IsFixedLength();
            entity.Property(e => e.ToStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.FromStkh).WithMany(p => p.StkhStkhXrefFromStkh)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_stkh_stkh_xref");

            entity.HasOne(d => d.RoleReltnTypNavigation).WithMany(p => p.StkhStkhXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_stkh_stkh_xref");

            entity.HasOne(d => d.ToStkh).WithMany(p => p.StkhStkhXrefToStkh)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_stkh_stkh_xref");
        });

        modelBuilder.Entity<StockItemBatch>(entity =>
        {
            entity.HasKey(e => e.StockItemBatchId).HasName("pkstock_item_batch");

            entity.Property(e => e.StockItemBatchId).ValueGeneratedNever();
            entity.Property(e => e.GrpInd).IsFixedLength();
            entity.Property(e => e.LotNo).IsFixedLength();
            entity.Property(e => e.SerialNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Product).WithMany(p => p.StockItemBatch)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_stock_item_batch");
        });

        modelBuilder.Entity<StockItemBatchLocXref>(entity =>
        {
            entity.HasKey(e => new { e.StockBatchId, e.StorageLocId }).HasName("pkstock_item_batch_loc_xref");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.StockBatch).WithMany(p => p.StockItemBatchLocXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_stock_item_batch_loc_xref");

            entity.HasOne(d => d.StorageLoc).WithMany(p => p.StockItemBatchLocXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_stock_item_batch_loc_xref");
        });

        modelBuilder.Entity<StockTrx>(entity =>
        {
            entity.HasKey(e => e.StockTrxId).HasName("pkstock_trx");

            entity.Property(e => e.StockTrxId).ValueGeneratedNever();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.DrugBatchDiluentInd).IsFixedLength();
            entity.Property(e => e.ProductSize).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.DrugBatchAgt).WithMany(p => p.StockTrx).HasConstraintName("fk2_stock_trx");

            entity.HasOne(d => d.DrugBatch).WithMany(p => p.StockTrx).HasConstraintName("fk1_stock_trx");
        });

        modelBuilder.Entity<StorageLoc>(entity =>
        {
            entity.HasKey(e => e.StorageLocId).HasName("pkstorage_loc");

            entity.Property(e => e.StorageLocId).ValueGeneratedNever();
            entity.Property(e => e.ProductStorageInd).IsFixedLength();
            entity.Property(e => e.StorageLocLabel).IsFixedLength();
            entity.Property(e => e.StorageLocMapId).IsFixedLength();
            entity.Property(e => e.StorageLocName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DispLoc).WithMany(p => p.StorageLoc).HasConstraintName("fk1_storage_loc");
        });

        modelBuilder.Entity<Structure>(entity =>
        {
            entity.HasKey(e => e.StructureSer).HasName("XPKStructure");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Structure");
                    tb.HasTrigger("tI_Structure");
                    tb.HasTrigger("tU_Structure");
                });

            entity.Property(e => e.StructureSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.MaterialSerNavigation).WithMany(p => p.Structure).HasConstraintName("FKMaterial_Structure");

            entity.HasOne(d => d.PatientVolumeSerNavigation).WithMany(p => p.Structure).HasConstraintName("FKPatientVolume_Structure");

            entity.HasOne(d => d.StructureSetSerNavigation).WithMany(p => p.Structure)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKStructureSet_Structure");

            entity.HasOne(d => d.StructureTypeSerNavigation).WithMany(p => p.Structure)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKStructureType_Structure");
        });

        modelBuilder.Entity<StructureCode>(entity =>
        {
            entity.HasKey(e => e.StructureCodeSer).HasName("XPKStructureCode");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_StructureCode");
                    tb.HasTrigger("tI_StructureCode");
                    tb.HasTrigger("tU_StructureCode");
                });

            entity.Property(e => e.StructureCodeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.DicomcodeValueSerNavigation).WithMany(p => p.StructureCodeDicomcodeValueSerNavigation).HasConstraintName("FKDICOMCodeValue_StructureCode");

            entity.HasOne(d => d.PurposeDicomcodeValueSerNavigation).WithMany(p => p.StructureCodePurposeDicomcodeValueSerNavigation).HasConstraintName("FKPurposeDICOMCodeValue_StructureCode");
        });

        modelBuilder.Entity<StructureDetectionData>(entity =>
        {
            entity.HasKey(e => e.StructureDetectionDataSer)
                .HasName("PKStructureDetectionData")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasComment("The structure detection data scheme Holds data acquired on HET for a given RT Image.");
                    tb.HasTrigger("tU_StructureDetectionData");
                });

            entity.HasIndex(e => e.ImageSer, "CLIX_StructureDetectionData_ImageSer")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.StructureDetectionDataSer)
                .ValueGeneratedNever()
                .HasComment("Internal Identification (Serial Number which is the non-clustered Primary Key to the Table).\r\n	The vp_syGetNextKey procedure retrieves the key from the NextKeyTable.\r\n	At the moment this field is just for compatibility with automatic stored procedures generator.");
            entity.Property(e => e.Data).HasComment("Blob of data not interpretable at database level.");
            entity.Property(e => e.ImageSer).HasComment("Foreign key specifying the image linked to these data.\r\n	It is defined as unique field, since only one set per image can exist.");

            entity.HasOne(d => d.ImageSerNavigation).WithOne(p => p.StructureDetectionData).HasConstraintName("FKStructureDetectionData_ImageSer");
        });

        modelBuilder.Entity<StructureIdStructureCode>(entity =>
        {
            entity.HasKey(e => e.StructureIdStructureCodeSer).HasName("XPKStructureIdStructureCode");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_StructureIdStructureCode");
                    tb.HasTrigger("tU_StructureIdStructureCode");
                });

            entity.Property(e => e.StructureIdStructureCodeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.TargetStructureCodeSerNavigation).WithMany(p => p.StructureIdStructureCode).HasConstraintName("FK_StructureCode_StructureIdStructureCode");
        });

        modelBuilder.Entity<StructureSet>(entity =>
        {
            entity.HasKey(e => e.StructureSetSer).HasName("XPKStructureSet");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_StructureSet");
                    tb.HasTrigger("tI_StructureSet");
                    tb.HasTrigger("tU_StructureSet");
                });

            entity.Property(e => e.StructureSetSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.EquipmentSerNavigation).WithMany(p => p.StructureSet).HasConstraintName("FKEquipment_StructureSet");

            entity.HasOne(d => d.ImageSerNavigation).WithMany(p => p.StructureSet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKImage_StructureSet");

            entity.HasOne(d => d.SeriesSerNavigation).WithMany(p => p.StructureSet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSeries_StructureSet");
        });

        modelBuilder.Entity<StructureStructureCode>(entity =>
        {
            entity.HasKey(e => new { e.StructureSer, e.StructureCodeSer }).HasName("XPKStructureStructureCode");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_StructureStructureCode");
                    tb.HasTrigger("tU_StructureStructureCode");
                });

            
                
                

            entity.HasOne(d => d.StructureCodeSerNavigation).WithMany(p => p.StructureStructureCode).HasConstraintName("FKStructureCode_StructureStructureCode");

            entity.HasOne(d => d.StructureSerNavigation).WithMany(p => p.StructureStructureCode).HasConstraintName("FKStructure_StructureStructureCode");
        });

        modelBuilder.Entity<StructureType>(entity =>
        {
            entity.HasKey(e => e.StructureTypeSer).HasName("XPKStructureType");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_StructureType");
                    tb.HasTrigger("tI_StructureType");
                    tb.HasTrigger("tU_StructureType");
                });

            entity.Property(e => e.StructureTypeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.MaterialSerNavigation).WithMany(p => p.StructureType).HasConstraintName("FKMaterial_StructureType");
        });

        modelBuilder.Entity<Sttfile>(entity =>
        {
            entity.HasKey(e => e.SttfileSer).HasName("XPKSTTFile");

            entity.ToTable("STTFile", tb =>
                {
                    tb.HasTrigger("tI_STTFile");
                    tb.HasTrigger("tU_STTFile");
                });

            entity.Property(e => e.SttfileSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.AddOnSerNavigation).WithMany(p => p.Sttfile).HasConstraintName("FKDynamicWedge_STTFile");
        });

        modelBuilder.Entity<Study>(entity =>
        {
            entity.HasKey(e => e.StudySer).HasName("XPKStudy");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Study");
                    tb.HasTrigger("tI_Study");
                    tb.HasTrigger("tU_Study");
                    tb.HasTrigger("tU_Study_VaBusinessLogic");
                });

            entity.Property(e => e.StudySer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.Study)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_Study");

            entity.HasOne(d => d.RelatedCourseSerNavigation).WithMany(p => p.Study).HasConstraintName("FKCourse_Study");
        });

        modelBuilder.Entity<SymbolCd>(entity =>
        {
            entity.HasKey(e => e.SymbolCd1).HasName("pksymbol_cd");

            entity.Property(e => e.SymbolCd1).IsFixedLength();
            entity.Property(e => e.SymbolDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<SystemRoot>(entity =>
        {
            entity.HasKey(e => e.SystemRootSer).HasName("XPKSystemRoot");

            entity.Property(e => e.SystemRootSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<TableView>(entity =>
        {
            entity.Property(e => e.PbtTnam).IsFixedLength();
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.TaskId).HasName("pktask");

            entity.Property(e => e.TaskId).ValueGeneratedNever();
            entity.Property(e => e.TaskCatInd).IsFixedLength();
            entity.Property(e => e.TaskName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TaskAreaTyp>(entity =>
        {
            entity.HasKey(e => e.TaskAreaTyp1).HasName("pktask_area_typ");

            entity.Property(e => e.TaskAreaTyp1).ValueGeneratedNever();
            entity.Property(e => e.TaskAreaDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TaskCat>(entity =>
        {
            entity.HasKey(e => e.TaskCatId).HasName("pktask_cat");

            entity.Property(e => e.TaskCatId).ValueGeneratedNever();
            entity.Property(e => e.TaskCatDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TaskFcnUser>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.UserInstId, e.InstId, e.VisitReasonId, e.CatNameTyp }).HasName("pktask_fcn_user");

            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.CatNameTypNavigation).WithMany(p => p.TaskFcnUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_task_fcn_user");
        });

        modelBuilder.Entity<Technique>(entity =>
        {
            entity.HasKey(e => e.TechniqueSer).HasName("XPKTechnique");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Technique");
                    tb.HasTrigger("tI_Technique");
                    tb.HasTrigger("tU_Technique");
                });

            entity.Property(e => e.TechniqueSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.Technique)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKExternalBeam_Technique");
        });

        modelBuilder.Entity<TelecomEquipCd>(entity =>
        {
            entity.HasKey(e => e.TelecomEquipCdId).HasName("pktelecom_equip_cd");

            entity.Property(e => e.TelecomEquipCdId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BaseTypNavigation).WithMany(p => p.TelecomEquipCd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_telecom_equip_cd");
        });

        modelBuilder.Entity<TelecomUseCd>(entity =>
        {
            entity.HasKey(e => e.TelecomUseCdId).HasName("pktelecom_use_cd");

            entity.Property(e => e.TelecomUseCdId).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BaseTypNavigation).WithMany(p => p.TelecomUseCd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_telecom_use_cd");
        });

        modelBuilder.Entity<TempAgt>(entity =>
        {
            entity.HasKey(e => e.DrugDescId).HasName("pktemp_agt");

            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.Gpi).IsFixedLength();
            entity.Property(e => e.UpperAgtName).IsFixedLength();
        });

        modelBuilder.Entity<Template>(entity =>
        {
            entity.HasKey(e => e.TemplateSer).HasName("XPKTreatmentStrategyTemplate");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Template");
                    tb.HasTrigger("tI_Template");
                    tb.HasTrigger("tU_Template");
                });

            entity.Property(e => e.TemplateSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.CourseSerNavigation).WithMany(p => p.Template)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKCourse_Template");

            entity.HasOne(d => d.DepartmentSerNavigation).WithMany(p => p.Template).HasConstraintName("FKDepartment_Template");

            entity.HasOne(d => d.DerivedFromSerNavigation).WithMany(p => p.InverseDerivedFromSerNavigation).HasConstraintName("FKTemplate_Template");

            entity.HasOne(d => d.DiagnosisStageSerNavigation).WithMany(p => p.Template)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKDiagnosisStage_Template");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.Template)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKPatient_Template");

            entity.HasOne(d => d.PayorSerNavigation).WithMany(p => p.Template)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKPayor_Template");

            entity.HasOne(d => d.ResourceSerNavigation).WithMany(p => p.Template)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKResource_Template");
        });

        modelBuilder.Entity<TemplateCycle>(entity =>
        {
            entity.HasKey(e => e.TemplateCycleSer).HasName("XPKTemplateCycle");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_TemplateCycle");
                    tb.HasTrigger("tI_TemplateCycle");
                    tb.HasTrigger("tU_TemplateCycle");
                });

            entity.Property(e => e.TemplateCycleSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.CycleSerNavigation).WithMany(p => p.TemplateCycle)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTreatmentCycle_TemplateCycle");

            entity.HasOne(d => d.TemplateSerNavigation).WithMany(p => p.TemplateCycle)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTemplate_TemplateCycle");
        });

        modelBuilder.Entity<TemplateCycleMh>(entity =>
        {
            entity.HasKey(e => new { e.TemplateCycleSer, e.TemplateCycleRevCount }).HasName("XPKTemplateCycleMH");

            entity.ToTable("TemplateCycleMH", tb =>
                {
                    tb.HasTrigger("tD_TemplateCycleMH");
                    tb.HasTrigger("tI_TemplateCycleMH");
                    tb.HasTrigger("tU_TemplateCycleMH");
                });

            
                
                

            entity.HasOne(d => d.TemplateCycleSerNavigation).WithMany(p => p.TemplateCycleMh).HasConstraintName("FKTemplateCycle_TemplateCycleMH");
        });

        modelBuilder.Entity<TemplateDiagnosis>(entity =>
        {
            entity.HasKey(e => e.TemplateDiagnosisSer).HasName("XPKTemplateDiagnosis");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_TemplateDiagnosis");
                    tb.HasTrigger("tU_TemplateDiagnosis");
                });

            entity.Property(e => e.TemplateDiagnosisSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.TemplateSerNavigation).WithMany(p => p.TemplateDiagnosis)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTemplate_TemplateDiagnosis");
        });

        modelBuilder.Entity<TemplateMh>(entity =>
        {
            entity.HasKey(e => new { e.TemplateSer, e.TemplateRevCount }).HasName("XPKTemplateMH");

            entity.ToTable("TemplateMH", tb =>
                {
                    tb.HasTrigger("tD_TemplateMH");
                    tb.HasTrigger("tI_TemplateMH");
                    tb.HasTrigger("tU_TemplateMH");
                });

            
                
                

            entity.HasOne(d => d.TemplateSerNavigation).WithMany(p => p.TemplateMh).HasConstraintName("FKTemplate_TemplateMH");
        });

        modelBuilder.Entity<TemplateUseCd>(entity =>
        {
            entity.HasKey(e => e.TemplateUseCd1).HasName("pktemplate_use_cd");

            entity.Property(e => e.TemplateUseCd1).IsFixedLength();
            entity.Property(e => e.TemplateUseDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<Test>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId }).HasName("pktest");

            entity.ToTable("test", tb =>
                {
                    tb.HasTrigger("tD_test");
                    tb.HasTrigger("tU_test");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AscNo).IsFixedLength();
            entity.Property(e => e.AuditInd).IsFixedLength();
            entity.Property(e => e.CancelInd).IsFixedLength();
            entity.Property(e => e.CertStkhId).IsFixedLength();
            entity.Property(e => e.FacRqstnDesc).IsFixedLength();
            entity.Property(e => e.FacRqstnNo).IsFixedLength();
            entity.Property(e => e.GnrcRqstnInd).IsFixedLength();
            entity.Property(e => e.IncludeSpcmn).IsFixedLength();
            entity.Property(e => e.InsCoInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.IntfPrcsInd).IsFixedLength();
            entity.Property(e => e.OrderApprInd).IsFixedLength();
            entity.Property(e => e.OrderCmtInd).IsFixedLength();
            entity.Property(e => e.PartialInd).IsFixedLength();
            entity.Property(e => e.PrintRqstnFlag).IsFixedLength();
            entity.Property(e => e.ProducerStkhId).IsFixedLength();
            entity.Property(e => e.PublishInd)
                .HasDefaultValue("Y")
                .IsFixedLength();
            entity.Property(e => e.ReadOnlyInd).IsFixedLength();
            entity.Property(e => e.ResultApprInd).IsFixedLength();
            entity.Property(e => e.ResultInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.RqstnInstId).IsFixedLength();
            entity.Property(e => e.RqstnStkhId).IsFixedLength();
            entity.Property(e => e.SendStatus).IsFixedLength();
            entity.Property(e => e.SentFlag).IsFixedLength();
            entity.Property(e => e.SpcmnCollcInd).IsFixedLength();
            entity.Property(e => e.TestCmtInd).IsFixedLength();
            entity.Property(e => e.TestInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
            entity.Property(e => e.VitalsInd).IsFixedLength();

            entity.HasOne(d => d.PrtyOfSrvNavigation).WithMany(p => p.Test).HasConstraintName("fk2_test");

            entity.HasOne(d => d.TestRequestTypNavigation).WithMany(p => p.Test).HasConstraintName("fk4_test");

            entity.HasOne(d => d.BillAcct).WithMany(p => p.Test).HasConstraintName("fk3_test");

            entity.HasOne(d => d.FacRqstn).WithMany(p => p.Test).HasConstraintName("fk1_test");
        });

        modelBuilder.Entity<TestAsmtDesc>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.InstId, e.TypOfTest, e.CompName, e.CompAsmtDesc }).HasName("pktest_asmt_desc");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.CompAsmtDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TestCmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId }).HasName("pktest_cmt");

            entity.ToTable("test_cmt", tb =>
                {
                    tb.HasTrigger("tD_test_cmt");
                    tb.HasTrigger("tU_test_cmt");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestCmtMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.RevisionNo }).HasName("pktest_cmt_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestComp>(entity =>
        {
            entity.HasKey(e => new { e.TypOfTest, e.CompName }).HasName("pktest_comp");

            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.GroupOnlyInd).IsFixedLength();
            entity.Property(e => e.LoincCd).IsFixedLength();
            entity.Property(e => e.SexCd).IsFixedLength();
            entity.Property(e => e.TestGroup).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UomReqInd).IsFixedLength();

            entity.HasOne(d => d.CompTypNavigation).WithMany(p => p.TestComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_test_comp");

            entity.HasOne(d => d.StatusTypNavigation).WithMany(p => p.TestComp).HasConstraintName("fk3_test_comp");

            entity.HasOne(d => d.TypOfTestNavigation).WithMany(p => p.TestComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_test_comp");
        });

        modelBuilder.Entity<TestCompCulture>(entity =>
        {
            entity.HasKey(e => new { e.TypOfTest, e.CompName, e.CultureCd }).HasName("pktest_comp_culture");

            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TestGroup).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestDx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DxId, e.PtVisitId, e.TestId }).HasName("pktest_dx");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtDx).WithMany(p => p.TestDx)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_test_dx");
        });

        modelBuilder.Entity<TestDxOvride>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId }).HasName("pktest_dx_ovride");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.OvrideInstId).IsFixedLength();
            entity.Property(e => e.OvrideRsnCmt).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestGroup>(entity =>
        {
            entity.HasKey(e => new { e.TypOfTest, e.TestGroupName }).HasName("pktest_group");

            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.TestGroupName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestGroupComp>(entity =>
        {
            entity.HasKey(e => new { e.TypOfTest, e.TestGroupName, e.CompName }).HasName("pktest_group_comp");

            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.TestGroupName).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.RevisionNo }).HasName("pktest_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AscNo).IsFixedLength();
            entity.Property(e => e.AuditInd).IsFixedLength();
            entity.Property(e => e.CancelInd).IsFixedLength();
            entity.Property(e => e.CertStkhId).IsFixedLength();
            entity.Property(e => e.FacRqstnDesc).IsFixedLength();
            entity.Property(e => e.FacRqstnNo).IsFixedLength();
            entity.Property(e => e.GnrcRqstnInd).IsFixedLength();
            entity.Property(e => e.IncludeSpcmn).IsFixedLength();
            entity.Property(e => e.InsCoInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.IntfPrcsInd).IsFixedLength();
            entity.Property(e => e.OrderApprInd).IsFixedLength();
            entity.Property(e => e.OrderCmtInd).IsFixedLength();
            entity.Property(e => e.PartialInd).IsFixedLength();
            entity.Property(e => e.PrintRqstnFlag).IsFixedLength();
            entity.Property(e => e.ProducerStkhId).IsFixedLength();
            entity.Property(e => e.PublishInd).IsFixedLength();
            entity.Property(e => e.ReadOnlyInd).IsFixedLength();
            entity.Property(e => e.ResultApprInd).IsFixedLength();
            entity.Property(e => e.ResultInd).IsFixedLength();
            entity.Property(e => e.RqstnInstId).IsFixedLength();
            entity.Property(e => e.RqstnStkhId).IsFixedLength();
            entity.Property(e => e.SendStatus).IsFixedLength();
            entity.Property(e => e.SentFlag).IsFixedLength();
            entity.Property(e => e.SpcmnCollcInd).IsFixedLength();
            entity.Property(e => e.TestCmtInd).IsFixedLength();
            entity.Property(e => e.TestInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
            entity.Property(e => e.VitalsInd).IsFixedLength();
        });

        modelBuilder.Entity<TestOrderCmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId }).HasName("pktest_order_cmt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestOrderDriver>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAtoId, e.TypOfTest, e.CompName }).HasName("pktest_order_driver");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.FacRqstnNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TestRequestTyp>(entity =>
        {
            entity.HasKey(e => e.TestRequestTyp1).HasName("pktest_request_typ");

            entity.Property(e => e.TestRequestTyp1).ValueGeneratedNever();
            entity.Property(e => e.TestRequestDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TestResult>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId, e.TestResultId }).HasName("pktest_result");

            entity.ToTable("test_result", tb =>
                {
                    tb.HasTrigger("tD_test_result");
                    tb.HasTrigger("tI_test_result");
                    tb.HasTrigger("tU_test_result");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AbnormalFlagCd).IsFixedLength();
            entity.Property(e => e.AlertAutoInd).IsFixedLength();
            entity.Property(e => e.AlertHxInd).IsFixedLength();
            entity.Property(e => e.AlertInd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AuditInd).IsFixedLength();
            entity.Property(e => e.CalcPrcsCd).IsFixedLength();
            entity.Property(e => e.CalcReltnCd).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.CompSubId).IsFixedLength();
            entity.Property(e => e.CorrectedEntryInd).IsFixedLength();
            entity.Property(e => e.DoseCalcInd).IsFixedLength();
            entity.Property(e => e.DspRefRange).IsFixedLength();
            entity.Property(e => e.DspRefRangeUninterpInd).IsFixedLength();
            entity.Property(e => e.FacCompName).IsFixedLength();
            entity.Property(e => e.LoincCd).IsFixedLength();
            entity.Property(e => e.ProducerStkhId).IsFixedLength();
            entity.Property(e => e.PublishInd)
                .HasDefaultValue("Y")
                .IsFixedLength();
            entity.Property(e => e.ReadOnlyInd).IsFixedLength();
            entity.Property(e => e.ReqFlag).IsFixedLength();
            entity.Property(e => e.ResultApprInd).IsFixedLength();
            entity.Property(e => e.ResultCmtInd).IsFixedLength();
            entity.Property(e => e.ResultInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.RuleInd).IsFixedLength();
            entity.Property(e => e.SymbolCd).IsFixedLength();
            entity.Property(e => e.TestValueStatusCd).IsFixedLength();
            entity.Property(e => e.TestValueTxtInd).IsFixedLength();
            entity.Property(e => e.ThisVisitReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.UnitDesc).IsFixedLength();
            entity.Property(e => e.UnsolInd).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.CalcTypNavigation).WithMany(p => p.TestResult).HasConstraintName("fk4_test_result");

            entity.HasOne(d => d.SymbolCdNavigation).WithMany(p => p.TestResult).HasConstraintName("fk3_test_result");
        });

        modelBuilder.Entity<TestResultAlert>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId, e.TestResultId, e.AlertId }).HasName("pktest_result_alert");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TestResultCmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId, e.TestResultId }).HasName("pktest_result_cmt");

            entity.ToTable("test_result_cmt", tb =>
                {
                    tb.HasTrigger("tD_test_result_cmt");
                    tb.HasTrigger("tU_test_result_cmt");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestResultCmtMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId, e.TestResultId, e.RevisionNo }).HasName("pktest_result_cmt_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestResultGroup>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId }).HasName("pktest_result_group");

            entity.ToTable("test_result_group", tb =>
                {
                    tb.HasTrigger("tD_test_result_group");
                    tb.HasTrigger("tU_test_result_group");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AuditInd).IsFixedLength();
            entity.Property(e => e.CancelInd).IsFixedLength();
            entity.Property(e => e.FacGroupName).IsFixedLength();
            entity.Property(e => e.FacRqstnCatDesc).IsFixedLength();
            entity.Property(e => e.GroupInd).IsFixedLength();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.OrderApprInd).IsFixedLength();
            entity.Property(e => e.OrderCmtInd).IsFixedLength();
            entity.Property(e => e.OrderReasonDesc).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.ProducerStkhId).IsFixedLength();
            entity.Property(e => e.ReadOnlyInd).IsFixedLength();
            entity.Property(e => e.ResultApprInd).IsFixedLength();
            entity.Property(e => e.ResultCmtInd).IsFixedLength();
            entity.Property(e => e.ResultInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.SpcmnCollcInd).IsFixedLength();
            entity.Property(e => e.SpsrStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TestResultGroupCmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId }).HasName("pktest_result_group_cmt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestResultGroupMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId, e.RevisionNo }).HasName("pktest_result_group_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AuditInd).IsFixedLength();
            entity.Property(e => e.CancelInd).IsFixedLength();
            entity.Property(e => e.FacGroupName).IsFixedLength();
            entity.Property(e => e.FacRqstnCatDesc).IsFixedLength();
            entity.Property(e => e.GroupInd).IsFixedLength();
            entity.Property(e => e.IntfAppParmId).IsFixedLength();
            entity.Property(e => e.IntfFillerNo).IsFixedLength();
            entity.Property(e => e.OrderApprInd).IsFixedLength();
            entity.Property(e => e.OrderCmtInd).IsFixedLength();
            entity.Property(e => e.OrderReasonDesc).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.ProducerStkhId).IsFixedLength();
            entity.Property(e => e.ReadOnlyInd).IsFixedLength();
            entity.Property(e => e.ResultApprInd).IsFixedLength();
            entity.Property(e => e.ResultCmtInd).IsFixedLength();
            entity.Property(e => e.ResultInd).IsFixedLength();
            entity.Property(e => e.SpcmnCollcInd).IsFixedLength();
            entity.Property(e => e.SpsrStkhId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TestResultGroupOrderCmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId }).HasName("pktest_result_group_order_cmt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestResultGroupSpcmn>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId, e.TestSpcmnId }).HasName("pktest_result_group_spcmn");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestResultImage>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId, e.TestResultId }).HasName("pktest_result_image");

            entity.ToTable("test_result_image", tb =>
                {
                    tb.HasTrigger("tD_test_result_image");
                    tb.HasTrigger("tI_test_result_image");
                    tb.HasTrigger("tU_test_result_image");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ImageInd).IsFixedLength();
            entity.Property(e => e.IntfInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestResultImageMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId, e.TestResultId, e.RevisionNo }).HasName("pktest_result_image_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ImageInd).IsFixedLength();
            entity.Property(e => e.IntfInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestResultMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId, e.TestResultId, e.RevisionNo }).HasName("pktest_result_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AbnormalFlagCd).IsFixedLength();
            entity.Property(e => e.AlertAutoInd).IsFixedLength();
            entity.Property(e => e.AlertHxInd).IsFixedLength();
            entity.Property(e => e.AlertInd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AuditInd).IsFixedLength();
            entity.Property(e => e.CalcPrcsCd).IsFixedLength();
            entity.Property(e => e.CalcReltnCd).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.CompSubId).IsFixedLength();
            entity.Property(e => e.CorrectedEntryInd).IsFixedLength();
            entity.Property(e => e.DoseCalcInd).IsFixedLength();
            entity.Property(e => e.DspRefRange).IsFixedLength();
            entity.Property(e => e.DspRefRangeUninterpInd).IsFixedLength();
            entity.Property(e => e.FacCompName).IsFixedLength();
            entity.Property(e => e.LoincCd).IsFixedLength();
            entity.Property(e => e.ProducerStkhId).IsFixedLength();
            entity.Property(e => e.PublishInd).IsFixedLength();
            entity.Property(e => e.ReadOnlyInd).IsFixedLength();
            entity.Property(e => e.ReqFlag).IsFixedLength();
            entity.Property(e => e.ResultApprInd).IsFixedLength();
            entity.Property(e => e.ResultCmtInd).IsFixedLength();
            entity.Property(e => e.ResultInd).IsFixedLength();
            entity.Property(e => e.RuleInd).IsFixedLength();
            entity.Property(e => e.SymbolCd).IsFixedLength();
            entity.Property(e => e.TestValueStatusCd).IsFixedLength();
            entity.Property(e => e.TestValueTxtInd).IsFixedLength();
            entity.Property(e => e.ThisVisitReqInd).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.UnitDesc).IsFixedLength();
            entity.Property(e => e.UnsolInd).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TestResultVisitNote>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestResultGroupId, e.TestResultId }).HasName("pktest_result_visit_note");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TestSpcmn>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TestId, e.TestSpcmnId }).HasName("pktest_spcmn");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CollcId).IsFixedLength();
            entity.Property(e => e.DangerCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.CollcVol).WithMany(p => p.TestSpcmn).HasConstraintName("fk1_test_spcmn");

            entity.HasOne(d => d.SpcmnAction).WithMany(p => p.TestSpcmn).HasConstraintName("fk2_test_spcmn");

            entity.HasOne(d => d.SpcmnCond).WithMany(p => p.TestSpcmn).HasConstraintName("fk5_test_spcmn");

            entity.HasOne(d => d.SpcmnRejectReason).WithMany(p => p.TestSpcmn).HasConstraintName("fk4_test_spcmn");

            entity.HasOne(d => d.SpcmnSource).WithMany(p => p.TestSpcmn).HasConstraintName("fk3_test_spcmn");

            entity.HasOne(d => d.SpcmnTyp).WithMany(p => p.TestSpcmn).HasConstraintName("fk6_test_spcmn");
        });

        modelBuilder.Entity<TfhaddOn>(entity =>
        {
            entity.HasKey(e => new { e.RadiationHstrySer, e.AddOnNumber }).HasName("XPKTFHAddOn");

            entity.ToTable("TFHAddOn", tb =>
                {
                    tb.HasTrigger("tI_TFHAddOn");
                    tb.HasTrigger("tU_TFHAddOn");
                    tb.HasTrigger("tU_TFHAddOn_VaBusinessLogic");
                });

            entity.HasOne(d => d.RadiationHstrySerNavigation).WithMany(p => p.TfhaddOn).HasConstraintName("FKExternalFieldCommonHistory_TFHAddOn");
        });

        modelBuilder.Entity<TherapyItemAdmn>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.AdmnId }).HasName("pktherapy_item_admn");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AdHocEntryInd).IsFixedLength();
            entity.Property(e => e.AdmnAsAdvised).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.CorrectedEntryInd).IsFixedLength();
            entity.Property(e => e.CourseAdjInd).IsFixedLength();
            entity.Property(e => e.DisclosedFlag)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.DispensedInd).IsFixedLength();
            entity.Property(e => e.DoseAppr).IsFixedLength();
            entity.Property(e => e.DrugLotNo).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.NotDispensedInd).IsFixedLength();
            entity.Property(e => e.OnHoldInd).IsFixedLength();
            entity.Property(e => e.PreparedInd).IsFixedLength();
            entity.Property(e => e.RefusedInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
            entity.Property(e => e.VarianceInd).IsFixedLength();

            entity.HasOne(d => d.DispLoc).WithMany(p => p.TherapyItemAdmn).HasConstraintName("fk3_therapy_item_admn");

            entity.HasOne(d => d.VrblOrder).WithMany(p => p.TherapyItemAdmn).HasConstraintName("fk2_therapy_item_admn");
        });

        modelBuilder.Entity<TherapyItemAdmnAgtLevel>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RxId, e.ItemNo, e.AgtLevelId }).HasName("pktherapy_item_admn_agt_level");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.AgtRx).WithMany(p => p.TherapyItemAdmnAgtLevel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1therapy_item_admn_agt_level");
        });

        modelBuilder.Entity<TherapyItemAdmnDetail>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.AdmnId, e.AdmnDetailId }).HasName("pktherapy_item_admn_detail");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprUserinstid).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.TherapyItemAdmn).WithMany(p => p.TherapyItemAdmnDetail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_therapy_item_admn_details");
        });

        modelBuilder.Entity<TherapyReaction>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.ReactionTyp, e.AgtName, e.DosageForm, e.DoseLevel }).HasName("pktherapy_reaction");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TickerChannel>(entity =>
        {
            entity.HasKey(e => e.TickerChannelSer).HasName("XPKTickerChannel");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_TickerChannel");
                    tb.HasTrigger("tU_TickerChannel");
                });

            entity.Property(e => e.TickerChannelSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<TickerMessage>(entity =>
        {
            entity.HasKey(e => e.TickerMessageSer).HasName("XPKTickerMessage");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_TickerMessage");
                    tb.HasTrigger("tU_TickerMessage");
                });

            entity.Property(e => e.TickerMessageSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<TickerMessageChannel>(entity =>
        {
            entity.HasKey(e => e.TickerMessageChannelSer).HasName("XPKTickerMessageChannel");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_TickerMessageChannel");
                    tb.HasTrigger("tU_TickerMessageChannel");
                });

            entity.Property(e => e.TickerMessageChannelSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.TickerChannelSerNavigation).WithMany(p => p.TickerMessageChannel).HasConstraintName("FKTickerChannel_TickerMessageChannel");

            entity.HasOne(d => d.TickerMessageSerNavigation).WithMany(p => p.TickerMessageChannel).HasConstraintName("FKTickerMessage_TickerMessageChannel");
        });

        modelBuilder.Entity<TimeFrame>(entity =>
        {
            entity.HasKey(e => e.TimeFrameTyp).HasName("pktime_frame");

            entity.Property(e => e.TimeFrameTyp).ValueGeneratedNever();
            entity.Property(e => e.TimeFrameDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TimeUnit>(entity =>
        {
            entity.HasKey(e => e.TimeUnit1).HasName("pktime_unit");

            entity.Property(e => e.TimeUnit1).ValueGeneratedNever();
            entity.Property(e => e.TimeDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TimeZone>(entity =>
        {
            entity.HasKey(e => e.TimeZoneId).HasName("pktime_zone");

            entity.Property(e => e.DstObservedInd).IsFixedLength();
            entity.Property(e => e.GmtOffsetAmt).IsFixedLength();
            entity.Property(e => e.GmtOffsetCd).IsFixedLength();
            entity.Property(e => e.TimeZoneDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TitleTyp>(entity =>
        {
            entity.HasKey(e => e.TitleId).HasName("pktitle_typ");

            entity.Property(e => e.TitleId).ValueGeneratedNever();
            entity.Property(e => e.TitleDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TlbrIcons>(entity =>
        {
            entity.HasKey(e => e.FileName).HasName("pktlbr_icons");

            entity.Property(e => e.FileName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TlbrItem>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("pktlbr_item");

            entity.Property(e => e.ItemId).ValueGeneratedNever();
            entity.Property(e => e.DfltIcon).IsFixedLength();
            entity.Property(e => e.ItemAbrv).IsFixedLength();
            entity.Property(e => e.ItemName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TlbrUserItem>(entity =>
        {
            entity.HasKey(e => new { e.UserInstId, e.Userid, e.ItemId }).HasName("pktlbr_user_item");

            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UserIcon).IsFixedLength();

            entity.HasOne(d => d.Item).WithMany(p => p.TlbrUserItem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tlbr_user_item");
        });

        modelBuilder.Entity<Tolerance>(entity =>
        {
            entity.HasKey(e => e.ToleranceSer).HasName("XPKTolerance");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Tolerance");
                    tb.HasTrigger("tU_Tolerance");
                });

            entity.Property(e => e.ToleranceSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<ToleranceLimit>(entity =>
        {
            entity.HasKey(e => e.ToleranceLimitSer).HasName("XPKToleranceLimit");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_ToleranceLimit");
                    tb.HasTrigger("tU_ToleranceLimit");
                });

            entity.Property(e => e.ToleranceLimitSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ToleranceSerNavigation).WithMany(p => p.ToleranceLimit).HasConstraintName("FKTolerance_ToleranceLimit");
        });

        modelBuilder.Entity<TpAccessInst>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.TpAccessInstId }).HasName("pktp_access_inst");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpAccessUser>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.TpAccessUserId }).HasName("pktp_access_user");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpAccrualGradeCd>(entity =>
        {
            entity.HasKey(e => new { e.TpAccrualGradeCd1, e.CultureCd }).HasName("pktp_accrual_grade_cd");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TpAccrualGradeDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpAccrualPrd>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.ActivityId }).HasName("pktp_accrual_prd");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpAccrualPrdDiversity>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.ActivityId, e.SexCd, e.Race }).HasName("pktp_accrual_prd_diversity");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.SexCd).IsFixedLength();
            entity.Property(e => e.Race).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpAgt>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IntvId }).HasName("pktp_agt");

            entity.ToTable("tp_agt", tb => tb.HasTrigger("tU_tp_agt"));

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.AdmnDurDesc).IsFixedLength();
            entity.Property(e => e.AdmnSchedDesc).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.AgtPlchldrInd).IsFixedLength();
            entity.Property(e => e.AgtPlchldrUsed).IsFixedLength();
            entity.Property(e => e.Brand).IsFixedLength();
            entity.Property(e => e.DecCd).IsFixedLength();
            entity.Property(e => e.DoseStrength).IsFixedLength();
            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.IdealWt).IsFixedLength();
            entity.Property(e => e.InitState).IsFixedLength();
            entity.Property(e => e.MediActiveInd).IsFixedLength();
            entity.Property(e => e.Mod).IsFixedLength();
            entity.Property(e => e.RefillInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.Subs).IsFixedLength();
            entity.Property(e => e.TakeAsDirectedInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TxDur).IsFixedLength();

            entity.HasOne(d => d.AdmnDosageUnitNavigation).WithMany(p => p.TpAgt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk4_tp_agt");

            entity.HasOne(d => d.AdmnRouteNavigation).WithMany(p => p.TpAgt).HasConstraintName("fk1_tp_agt");

            entity.HasOne(d => d.HydraFluid).WithMany(p => p.TpAgt).HasConstraintName("fk6_tp_agt");

            entity.HasOne(d => d.InfusionTypNavigation).WithMany(p => p.TpAgt).HasConstraintName("fk2_tp_agt");

            entity.HasOne(d => d.IntvUseTypNavigation).WithMany(p => p.TpAgt).HasConstraintName("fk8_tp_agt");

            entity.HasOne(d => d.RxTypNavigation).WithMany(p => p.TpAgt).HasConstraintName("fk3_tp_agt");

            entity.HasOne(d => d.TxTframeTypNavigation).WithMany(p => p.TpAgt).HasConstraintName("fk7_tp_agt");

            entity.HasOne(d => d.TpIntv).WithOne(p => p.TpAgt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk5_tp_agt");
        });

        modelBuilder.Entity<TpAgtCourse>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IntvId, e.CourseNo }).HasName("pktp_agt_course");

            entity.ToTable("tp_agt_course", tb => tb.HasTrigger("tU_tp_agt_course"));

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.PrnInd).IsFixedLength();
            entity.Property(e => e.PrnRepeatInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TpAgt).WithMany(p => p.TpAgtCourse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_agt_course");
        });

        modelBuilder.Entity<TpAgtDoseBand>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IntvId, e.DoseBandId }).HasName("pktp_agt_dose_band");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpAgtDoseDec>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IntvId, e.DoseDecId }).HasName("pktp_agt_dose_dec");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.DecCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpAsmt>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IntvId }).HasName("pktp_asmt");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.AsmtCompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AsmtCompNameNavigation).WithMany(p => p.TpAsmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_asmt");

            entity.HasOne(d => d.TpIntv).WithOne(p => p.TpAsmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tp_asmt");
        });

        modelBuilder.Entity<TpAsmtSch>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IntvId, e.AsmtCompName, e.SchIntvId }).HasName("pktp_asmt_sch");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.AsmtCompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpAuthor>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.AuthorId }).HasName("pktp_author");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.AuthorCd).IsFixedLength();
            entity.Property(e => e.AuthorEmail).IsFixedLength();
            entity.Property(e => e.AuthorInstId).IsFixedLength();
            entity.Property(e => e.AuthorName).IsFixedLength();
            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AuthorTypNavigation).WithMany(p => p.TpAuthor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_author");
        });

        modelBuilder.Entity<TpAuthorshipCd>(entity =>
        {
            entity.HasKey(e => new { e.TpAuthorshipCd1, e.CultureCd }).HasName("pktp_authorship_cd");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TpAuthorshipDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpAwardTyp>(entity =>
        {
            entity.HasKey(e => new { e.TpAwardTypId, e.CultureCd }).HasName("pktp_award_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TpAwardTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpCategoryCd>(entity =>
        {
            entity.HasKey(e => new { e.TpCategoryCd1, e.CultureCd }).HasName("pktp_category_cd");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TpCategoryDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpCategoryTyp>(entity =>
        {
            entity.HasKey(e => new { e.TpCategoryTyp1, e.CultureCd }).HasName("pktp_category_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TpTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TpClsGroup>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.TpClsTypId, e.TpClsValueId }).HasName("pktp_cls_group");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TpClsValue).WithMany(p => p.TpClsGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_cls_group");

            entity.HasOne(d => d.TxPln).WithMany(p => p.TpClsGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tp_cls_group");
        });

        modelBuilder.Entity<TpClsTyp>(entity =>
        {
            entity.HasKey(e => e.TpClsTypId).HasName("pktp_cls_typ");

            entity.Property(e => e.TpClsTypId).ValueGeneratedNever();
            entity.Property(e => e.TpClsActiveInd).IsFixedLength();
            entity.Property(e => e.TpClsTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpClsValue>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId }).HasName("pktp_cls_value");

            entity.Property(e => e.SexCd).IsFixedLength();
            entity.Property(e => e.TpClsValueDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TpClsTyp).WithMany(p => p.TpClsValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_cls_value");
        });

        modelBuilder.Entity<TpClsValueCulture>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.CultureCd }).HasName("pktp_cls_value_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpCmtee>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.CmteeId }).HasName("pktp_cmtee");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpCmteeIssue>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.CmteeId, e.CmteeIssueTyp }).HasName("pktp_cmtee_issue");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.MonitorReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpCoauthor>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.InstId, e.AuthorUserid }).HasName("pktp_coauthor");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TxPln).WithMany(p => p.TpCoauthor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_coauthor");
        });

        modelBuilder.Entity<TpConsent>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.PhaseSeqNo }).HasName("pktp_consent");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpCrrefCd>(entity =>
        {
            entity.HasKey(e => new { e.TpCrrefCd1, e.CultureCd }).HasName("pktp_crref_cd");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TpCrrefDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpCt>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo }).HasName("pktp_ct");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.AgtDevInd).IsFixedLength();
            entity.Property(e => e.ExportCtInd).IsFixedLength();
            entity.Property(e => e.PdqNo).IsFixedLength();
            entity.Property(e => e.PtMatMovedInd).IsFixedLength();
            entity.Property(e => e.StudyMatMovedInd).IsFixedLength();
            entity.Property(e => e.TpStdOfCareInd).IsFixedLength();
            entity.Property(e => e.TpTissueAccessInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpCtExptdDurAccrual>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.TpAccrualId }).HasName("pktp_ct_exptd_dur_accrual");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpCtTracking>(entity =>
        {
            entity.HasKey(e => new { e.TpCtTrackingId, e.TpName, e.TpVersNo }).HasName("pktp_ct_tracking");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.PtMatOffsiteBox).IsFixedLength();
            entity.Property(e => e.PtMatOffsiteLoc).IsFixedLength();
            entity.Property(e => e.StudyMatOffsiteBox).IsFixedLength();
            entity.Property(e => e.StudyMatOffsiteLoc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpDoseMgmt>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.CompName }).HasName("pktp_dose_mgmt");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ValueUpdateTypNavigation).WithMany(p => p.TpDoseMgmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tp_dose_mgmt");

            entity.HasOne(d => d.TxPln).WithMany(p => p.TpDoseMgmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_dose_mgmt");
        });

        modelBuilder.Entity<TpEval>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.OutcomeId, e.EvalId }).HasName("pktp_eval");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.OffsetDesc).IsFixedLength();
            entity.Property(e => e.OffsetTime).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TpOutcome).WithMany(p => p.TpEval)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_eval");
        });

        modelBuilder.Entity<TpExternalName>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.InstId, e.ExternalTpName }).HasName("pktp_external_name");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ExternalTpName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpFcn>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.FcnCls }).HasName("pktp_fcn");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpFinancial>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.TpFinancialId }).HasName("pktp_financial");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.CtBillCompleteInd).IsFixedLength();
            entity.Property(e => e.GrantAwardedCd).IsFixedLength();
            entity.Property(e => e.GrantPmStkhId).IsFixedLength();
            entity.Property(e => e.GrantTypCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpFocus>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.FocusId }).HasName("pktp_focus");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TxPln).WithMany(p => p.TpFocus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_focus");
        });

        modelBuilder.Entity<TpGrantItem>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.TpGrantId }).HasName("pktp_grant_item");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.GrantCmt).IsFixedLength();
            entity.Property(e => e.RptIncludeInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TpHolderCd>(entity =>
        {
            entity.HasKey(e => new { e.TpHolderCd1, e.CultureCd }).HasName("pktp_holder_cd");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TpHolderDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpIdeNo>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.TpIdeNoId }).HasName("pktp_ide_no");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.IdeNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpIndNo>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.TpIndNoId }).HasName("pktp_ind_no");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.IndNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpInstKey>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.TpInstKeyId }).HasName("pktp_inst_key");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.CurValueInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TpKeyValue).IsFixedLength();
            entity.Property(e => e.TpUnfmtKeyValue).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UpperTpKeyValue).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TpIntv>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IntvId }).HasName("pktp_intv");

            entity.ToTable("tp_intv", tb => tb.HasTrigger("tU_tp_intv"));

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.ActualTimeReq).IsFixedLength();
            entity.Property(e => e.ChartSummaryInd).IsFixedLength();
            entity.Property(e => e.DoseCalcInd).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.GroupInd).IsFixedLength();
            entity.Property(e => e.InstrInd).IsFixedLength();
            entity.Property(e => e.IntvName).IsFixedLength();
            entity.Property(e => e.IntvReq).IsFixedLength();
            entity.Property(e => e.NotificationReq).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.RqstnReq).IsFixedLength();
            entity.Property(e => e.RuleInd).IsFixedLength();
            entity.Property(e => e.SchInd).IsFixedLength();
            entity.Property(e => e.ThisVisitReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.EventTypNavigation).WithMany(p => p.TpIntv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_intv");

            entity.HasOne(d => d.TxPln).WithMany(p => p.TpIntv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tp_intv");
        });

        modelBuilder.Entity<TpIntvCat>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IntvCatId }).HasName("pktp_intv_cat");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.IntvCatDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.EventTypNavigation).WithMany(p => p.TpIntvCat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_intv_cat");
        });

        modelBuilder.Entity<TpIntvFocus>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.OrderId, e.FocusId }).HasName("pktp_intv_focus");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpIrb>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IrbNum }).HasName("pktp_irb");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.RequireAuditInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpIvTherapy>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IntvId }).HasName("pktp_iv_therapy");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.GnrcIvFluidName).IsFixedLength();
            entity.Property(e => e.IvFluidCd).IsFixedLength();
            entity.Property(e => e.IvFluidName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AgtDoseUnitNavigation).WithMany(p => p.TpIvTherapyAgtDoseUnitNavigation).HasConstraintName("fk4_tp_iv_therapy");

            entity.HasOne(d => d.GnrcIvFluidNameNavigation).WithMany(p => p.TpIvTherapy).HasConstraintName("fk5_tp_iv_therapy");

            entity.HasOne(d => d.InfusionTypNavigation).WithMany(p => p.TpIvTherapy).HasConstraintName("fk1_tp_iv_therapy");

            entity.HasOne(d => d.IvRateUnitNavigation).WithMany(p => p.TpIvTherapyIvRateUnitNavigation).HasConstraintName("fk3_tp_iv_therapy");

            entity.HasOne(d => d.TpIntv).WithOne(p => p.TpIvTherapy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tp_iv_therapy");
        });

        modelBuilder.Entity<TpKeyCd>(entity =>
        {
            entity.HasKey(e => e.TpKeyCd1).HasName("pktp_key_cd");

            entity.Property(e => e.TpKeyCd1).ValueGeneratedNever();
            entity.Property(e => e.TpKeyDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpKeyScopeTyp>(entity =>
        {
            entity.HasKey(e => e.TpKeyScopeTyp1).HasName("pktp_key_scope_typ");

            entity.Property(e => e.TpKeyScopeTyp1).ValueGeneratedNever();
            entity.Property(e => e.ScopeTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TpNciProgramCd>(entity =>
        {
            entity.HasKey(e => new { e.TpNciProgramCd1, e.CultureCd }).HasName("pktp_nci_program_cd");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TpNciProgramDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpOutcome>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.OutcomeId }).HasName("pktp_outcome");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.OutcomeDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TpFocus).WithMany(p => p.TpOutcome).HasConstraintName("fk1_tp_outcome");

            entity.HasOne(d => d.TpIntvCat).WithMany(p => p.TpOutcome).HasConstraintName("fk2_tp_outcome");
        });

        modelBuilder.Entity<TpPhiReleaseCd>(entity =>
        {
            entity.HasKey(e => new { e.TpPhiReleaseCd1, e.CultureCd }).HasName("pktp_phi_release_cd");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TpPhiReleaseDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpQstr>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IntvId }).HasName("pktp_qstr");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.QstrNameNavigation).WithMany(p => p.TpQstr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_qstr");

            entity.HasOne(d => d.TpIntv).WithOne(p => p.TpQstr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tp_qstr");
        });

        modelBuilder.Entity<TpRem>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IntvId }).HasName("pktp_rem");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.RemShortDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpSchGroup>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.GroupIntvId, e.CompIntvId }).HasName("pktp_sch_group");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TpIntv).WithMany(p => p.TpSchGroupTpIntv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tp_sch_group");

            entity.HasOne(d => d.TpIntvNavigation).WithMany(p => p.TpSchGroupTpIntvNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_sch_group");
        });

        modelBuilder.Entity<TpScheme>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.SchemeTyp }).HasName("pktp_scheme");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.SchemeTypNavigation).WithMany(p => p.TpScheme)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tp_scheme");

            entity.HasOne(d => d.TxPln).WithMany(p => p.TpScheme)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_scheme");
        });

        modelBuilder.Entity<TpSeq>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.SeqTyp }).HasName("pktp_seq");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.SeqTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TxPln).WithMany(p => p.TpSeq)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_seq");
        });

        modelBuilder.Entity<TpSite>(entity =>
        {
            entity.HasKey(e => new { e.TpSiteId, e.TpName, e.TpVersNo, e.SiteStkhId }).HasName("pktp_site");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.SiteStkhId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.StatusSetCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpSiteStatusHistory>(entity =>
        {
            entity.HasKey(e => new { e.TpSiteId, e.TpSiteStatusId, e.TpName, e.TpVersNo }).HasName("pktp_site_status_history");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TpSiteStatusTyp>(entity =>
        {
            entity.HasKey(e => new { e.TpSiteStatusTypId, e.CultureCd }).HasName("pktp_site_status_typ");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TpSiteStatusDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TpSpsr>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.SpsrStkhId }).HasName("pktp_spsr");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.SpsrStkhId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.CtId).IsFixedLength();
            entity.Property(e => e.CtSpsrCd).IsFixedLength();
            entity.Property(e => e.FundingStatusCd).IsFixedLength();
            entity.Property(e => e.PrimarySpsrInd).IsFixedLength();
            entity.Property(e => e.SpsrCmt).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TpSpsrTyp>(entity =>
        {
            entity.HasKey(e => e.SpsrTypId).HasName("pktp_spsr_typ");

            entity.Property(e => e.SpsrTypId).ValueGeneratedNever();
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.SpsrTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TpStaff>(entity =>
        {
            entity.HasKey(e => new { e.TpStaffId, e.TpName, e.TpVersNo, e.StaffStkhId }).HasName("pktp_staff");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.StaffStkhId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.CurEntryInd).IsFixedLength();
            entity.Property(e => e.SiteStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TpSum>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.PlnSumTyp }).HasName("pktp_sum");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PlnSumTypNavigation).WithMany(p => p.TpSum)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tp_sum");

            entity.HasOne(d => d.TxPln).WithMany(p => p.TpSum)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tp_sum");
        });

        modelBuilder.Entity<TpTperiod>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.PhaseSeqNo, e.TperiodId }).HasName("pktp_tperiod");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TperiodDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TpTxArm>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.TxArmCd }).HasName("pktp_tx_arm");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TxArmCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TxArmDesc).IsFixedLength();
        });

        modelBuilder.Entity<TrAsmt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtTrAsmtId }).HasName("pktr_asmt");

            entity.ToTable("tr_asmt", tb =>
                {
                    tb.HasTrigger("tD_tr_asmt");
                    tb.HasTrigger("tU_tr_asmt");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AeInd).IsFixedLength();
            entity.Property(e => e.CorrectedEntryInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TrCompName).IsFixedLength();
            entity.Property(e => e.TrSubCompName).IsFixedLength();
            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.TrAsmtTypNavigation).WithMany(p => p.TrAsmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tr_asmt");

            entity.HasOne(d => d.TrCsCertTypNavigation).WithMany(p => p.TrAsmt).HasConstraintName("fk4_tr_asmt");

            entity.HasOne(d => d.TrCsTypNavigation).WithMany(p => p.TrAsmt).HasConstraintName("fk3_tr_asmt");

            entity.HasOne(d => d.TrComp).WithMany(p => p.TrAsmt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tr_asmt");
        });

        modelBuilder.Entity<TrAsmtHdr>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TrAsmtHdrId }).HasName("pktr_asmt_hdr");

            entity.ToTable("tr_asmt_hdr", tb =>
                {
                    tb.HasTrigger("tD_tr_asmt_hdr");
                    tb.HasTrigger("tU_tr_asmt_hdr");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.PtEnteredInd).IsFixedLength();
            entity.Property(e => e.ReviewRqdInd).IsFixedLength();
            entity.Property(e => e.ReviewedInd).IsFixedLength();
            entity.Property(e => e.ReviewerStkhId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TrObjInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TrAsmtHdrMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TrAsmtHdrId, e.RevisionNo }).HasName("pktr_asmt_hdr_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.PtEnteredInd).IsFixedLength();
            entity.Property(e => e.ReviewRqdInd).IsFixedLength();
            entity.Property(e => e.ReviewedInd).IsFixedLength();
            entity.Property(e => e.ReviewerStkhId).IsFixedLength();
            entity.Property(e => e.TrObjInd).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TrAsmtMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.PtTrAsmtId, e.RevisionNo }).HasName("pktr_asmt_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AeInd).IsFixedLength();
            entity.Property(e => e.CorrectedEntryInd).IsFixedLength();
            entity.Property(e => e.TrCompName).IsFixedLength();
            entity.Property(e => e.TrSubCompName).IsFixedLength();
            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TrAsmtTyp>(entity =>
        {
            entity.HasKey(e => e.TrAsmtTyp1).HasName("pktr_asmt_typ");

            entity.Property(e => e.TrAsmtTyp1).ValueGeneratedNever();
            entity.Property(e => e.TrAsmtDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TrComp>(entity =>
        {
            entity.HasKey(e => new { e.GsAuthor, e.EffDate, e.TrTyp, e.TrCompName }).HasName("pktr_comp");

            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TrCompName).IsFixedLength();
            entity.Property(e => e.GnrcTrCompName).IsFixedLength();
            entity.Property(e => e.GnrcTrTyp).IsFixedLength();
            entity.Property(e => e.ToxDeathInd).IsFixedLength();
            entity.Property(e => e.TrSubCompInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AsmtMthdNavigation).WithMany(p => p.TrComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tr_comp");

            entity.HasOne(d => d.TrUnitsNavigation).WithMany(p => p.TrComp).HasConstraintName("fk4_tr_comp");

            entity.HasOne(d => d.TrCompNameNavigation).WithMany(p => p.TrComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tr_comp");

            entity.HasOne(d => d.TrTypAuthor).WithMany(p => p.TrComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_tr_comp");
        });

        modelBuilder.Entity<TrCompCulture>(entity =>
        {
            entity.HasKey(e => new { e.TrCompId, e.CultureCd }).HasName("pktr_comp_culture");

            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TrCompName>(entity =>
        {
            entity.HasKey(e => new { e.TrTyp, e.TrCompName1 }).HasName("pktr_comp_name");

            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TrCompName1).IsFixedLength();
            entity.Property(e => e.TrCompDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TrCsCertTyp>(entity =>
        {
            entity.HasKey(e => e.TrCsCertTyp1).HasName("pktr_cs_cert_typ");

            entity.Property(e => e.TrCsCertTyp1).ValueGeneratedNever();
            entity.Property(e => e.TrCsCertDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TrCsTyp>(entity =>
        {
            entity.HasKey(e => e.TrCsTyp1).HasName("pktr_cs_typ");

            entity.Property(e => e.TrCsTyp1).ValueGeneratedNever();
            entity.Property(e => e.TrCsDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TrGrp>(entity =>
        {
            entity.HasKey(e => new { e.GnrcGrpId, e.TrGrpId, e.InstId }).HasName("pktr_grp");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.DefaultInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.GnrcGrp).WithMany(p => p.TrGrp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tr_grp");
        });

        modelBuilder.Entity<TrGrpComp>(entity =>
        {
            entity.HasKey(e => new { e.GnrcGrpId, e.TrGrpId, e.TrGrpCompId, e.InstId }).HasName("pktr_grp_comp");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TrGrp).WithMany(p => p.TrGrpComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tr_grp_comp");
        });

        modelBuilder.Entity<TrTyp>(entity =>
        {
            entity.HasKey(e => e.TrTyp1).HasName("pktr_typ");

            entity.Property(e => e.TrTyp1).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TrTypAuthor>(entity =>
        {
            entity.HasKey(e => new { e.GsAuthor, e.EffDate, e.TrTyp }).HasName("pktr_typ_author");

            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.GnrcTrTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.GnrcTrTypNavigation).WithMany(p => p.TrTypAuthor).HasConstraintName("fk2_tr_typ_author");
        });

        modelBuilder.Entity<TrTypComp>(entity =>
        {
            entity.HasKey(e => new { e.TrTyp, e.TrCompName, e.TypOfTest, e.CompName }).HasName("pktr_typ_comp");

            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TrCompName).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TrCompNameNavigation).WithMany(p => p.TrTypComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tr_typ_comp");

            entity.HasOne(d => d.TestComp).WithMany(p => p.TrTypComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tr_typ_comp");
        });

        modelBuilder.Entity<Tracking>(entity =>
        {
            entity.HasKey(e => e.TrackingSer).HasName("XPKTracking");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Tracking");
                    tb.HasTrigger("tI_Tracking");
                    tb.HasTrigger("tU_Tracking");
                    tb.HasTrigger("tU_Tracking_VaBusinessLogic");
                });

            entity.Property(e => e.TrackingSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.EquipmentSerNavigation).WithMany(p => p.Tracking).HasConstraintName("FKEquipment_Tracking");

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.Tracking).HasConstraintName("FKPlanSetup_Tracking");

            entity.HasOne(d => d.SeriesSerNavigation).WithMany(p => p.Tracking)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSeries_Tracking");
        });

        modelBuilder.Entity<TrackingField>(entity =>
        {
            entity.HasKey(e => new { e.TrackingSer, e.RadiationSer })
                .HasName("XPKTrackingField")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_TrackingField");
                    tb.HasTrigger("tU_TrackingField");
                });

            
                
                

            entity.HasOne(d => d.RadiationSerNavigation).WithMany(p => p.TrackingField)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKExternalFieldCommon_TrackingField");

            entity.HasOne(d => d.TrackingSerNavigation).WithMany(p => p.TrackingField)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTracking_TrackingField");
        });

        modelBuilder.Entity<TrackingImage>(entity =>
        {
            entity.HasKey(e => new { e.TrackingSer, e.ImageSer }).HasName("XPKTrackingImage");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_TrackingImage");
                    tb.HasTrigger("tU_TrackingImage");
                    tb.HasTrigger("tU_TrackingImage_VaBusinessLogic");
                });

            
                
                

            entity.HasOne(d => d.ImageSerNavigation).WithMany(p => p.TrackingImage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKImage_TrackingImage");

            entity.HasOne(d => d.TrackingSerNavigation).WithMany(p => p.TrackingImage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTracking_TrackingImage");
        });

        modelBuilder.Entity<TrackingInformation>(entity =>
        {
            entity.HasKey(e => e.TrackingInformationSer).HasName("XPKTrackingInformation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_TrackingInformation");
                    tb.HasTrigger("tI_TrackingInformation");
                    tb.HasTrigger("tU_TrackingInformation");
                });

            entity.Property(e => e.TrackingInformationSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ArchiveLocationSerNavigation).WithMany(p => p.TrackingInformation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKArchiveLocation_TrackingInformation");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.TrackingInformation).HasConstraintName("FKPatient_TrackingInformation");
        });

        modelBuilder.Entity<TransitionOfCareInbound>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.TransitionOfCareInboundId }).HasName("pktransition_of_care_inbound");

            entity.ToTable("transition_of_care_inbound", tb =>
                {
                    tb.HasTrigger("tD_transition_of_care_inbound");
                    tb.HasTrigger("tU_transition_of_care_inbound");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AllergiesReconciledInd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprovedInd).IsFixedLength();
            entity.Property(e => e.ImgDcmntId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.InterfaceInd).IsFixedLength();
            entity.Property(e => e.MedicationsReconciledInd).IsFixedLength();
            entity.Property(e => e.ProblemsReconciledInd).IsFixedLength();
            entity.Property(e => e.ReceivingProviderStkhId).IsFixedLength();
            entity.Property(e => e.ReferredByStkhId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TransitionOfCareInboundMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.TransitionOfCareInboundId, e.RevisionNo }).HasName("pktransition_of_care_inbound_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AllergiesReconciledInd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprovedInd).IsFixedLength();
            entity.Property(e => e.ImgDcmntId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.InterfaceInd).IsFixedLength();
            entity.Property(e => e.MedicationsReconciledInd).IsFixedLength();
            entity.Property(e => e.ProblemsReconciledInd).IsFixedLength();
            entity.Property(e => e.ReceivingProviderStkhId).IsFixedLength();
            entity.Property(e => e.ReferredByStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TransitionOfCareOutbound>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.TransitionOfCareOutboundId }).HasName("pktransition_of_care_outbound");

            entity.ToTable("transition_of_care_outbound", tb =>
                {
                    tb.HasTrigger("tD_transition_of_care_outbound");
                    tb.HasTrigger("tU_transition_of_care_outbound");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprovedInd).IsFixedLength();
            entity.Property(e => e.CcdaProvidedInd).IsFixedLength();
            entity.Property(e => e.ImgDcmntId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ReasonForReferral).IsFixedLength();
            entity.Property(e => e.ReceivingProviderStkhId).IsFixedLength();
            entity.Property(e => e.ReferredByStkhId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<TransitionOfCareOutboundMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.TransitionOfCareOutboundId, e.RevisionNo }).HasName("pktransition_of_care_outbound_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprovedInd).IsFixedLength();
            entity.Property(e => e.CcdaProvidedInd).IsFixedLength();
            entity.Property(e => e.ImgDcmntId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ReasonForReferral).IsFixedLength();
            entity.Property(e => e.ReceivingProviderStkhId).IsFixedLength();
            entity.Property(e => e.ReferredByStkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<Transportation>(entity =>
        {
            entity.HasKey(e => e.TransportationSer).HasName("XPKTransportation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Transportation");
                    tb.HasTrigger("tI_Transportation");
                    tb.HasTrigger("tU_Transportation");
                });

            entity.Property(e => e.TransportationSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.HospitalSerNavigation).WithMany(p => p.Transportation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKHospital_Transportation");
        });

        modelBuilder.Entity<Tray>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKTray");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Tray");
                    tb.HasTrigger("tI_Tray");
                    tb.HasTrigger("tU_Tray");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithOne(p => p.Tray).HasConstraintName("FKAddOn_Tray");
        });

        modelBuilder.Entity<TreatmentCycle>(entity =>
        {
            entity.HasKey(e => e.CycleSer).HasName("XPKTreatmentCycle");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_TreatmentCycle");
                    tb.HasTrigger("tU_TreatmentCycle");
                });

            entity.Property(e => e.CycleSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<TreatmentPhase>(entity =>
        {
            entity.HasKey(e => e.TreatmentPhaseSer).HasName("XPKTreatmentPhase");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_TreatmentPhase");
                    tb.HasTrigger("tI_TreatmentPhase");
                    tb.HasTrigger("tU_TreatmentPhase");
                });

            entity.Property(e => e.TreatmentPhaseSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.CourseSerNavigation).WithMany(p => p.TreatmentPhase)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKCourse_TreatmentPhase");

            entity.HasOne(d => d.RelTreatmentPhaseSerNavigation).WithMany(p => p.InverseRelTreatmentPhaseSerNavigation).HasConstraintName("FKPhase_RelPhase");
        });

        modelBuilder.Entity<TreatmentRecord>(entity =>
        {
            entity.HasKey(e => e.TreatmentRecordSer).HasName("XPKTreatmentRecord");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_TreatmentRecord");
                    tb.HasTrigger("tD_TreatmentRecord_PatientEditingLog");
                    tb.HasTrigger("tI_TreatmentRecord");
                    tb.HasTrigger("tI_TreatmentRecord_PatientEditingLog");
                    tb.HasTrigger("tU_TreatmentRecord");
                    tb.HasTrigger("tU_TreatmentRecord_PatientEditingLog");
                    tb.HasTrigger("tU_TreatmentRecord_VaBusinessLogic");
                });

            entity.Property(e => e.TreatmentRecordSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActualMachineSerNavigation).WithMany(p => p.TreatmentRecord).HasConstraintName("FKRadiationDevice_TreatmentRecord");

            entity.HasOne(d => d.PatientSerNavigation).WithMany(p => p.TreatmentRecord)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPatient_TreatmentRecord");

            entity.HasOne(d => d.PlanSopclassSerNavigation).WithMany(p => p.TreatmentRecordPlanSopclassSerNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPlanSOPClass_TreatmentRecord");

            entity.HasOne(d => d.RtplanSerNavigation).WithMany(p => p.TreatmentRecord).HasConstraintName("FKRTPlan_TreatmentRecord");

            entity.HasOne(d => d.SeriesSerNavigation).WithMany(p => p.TreatmentRecord)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKSeries_TreatmentRecord");

            entity.HasOne(d => d.TreatmentRecordSopclassSerNavigation).WithMany(p => p.TreatmentRecordTreatmentRecordSopclassSerNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKTreatmentRecordSOPClass_TreatmentRecord");
        });

        modelBuilder.Entity<TrfCall>(entity =>
        {
            entity.HasKey(e => e.CallId).HasName("pktrf_call");

            entity.Property(e => e.CallId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.CallTime).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TrfFnctn).IsFixedLength();

            entity.HasOne(d => d.Inst).WithMany(p => p.TrfCall)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_call");
        });

        modelBuilder.Entity<TrfCallAll>(entity =>
        {
            entity.HasKey(e => e.CallId).HasName("pktrf_call_all");

            entity.Property(e => e.CallId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.CallTime).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TrfFnctn).IsFixedLength();
        });

        modelBuilder.Entity<TrfColToOvride>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TrfDirctn, e.TblName, e.ColName }).HasName("pktrf_col_to_ovride");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TrfDirctn).IsFixedLength();
            entity.Property(e => e.TblName).IsFixedLength();
            entity.Property(e => e.ColName).IsFixedLength();
            entity.Property(e => e.OvrideTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TrfInst).WithMany(p => p.TrfColToOvride)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_col_to_ovride");

            entity.HasOne(d => d.ImpexpColumns).WithMany(p => p.TrfColToOvride)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_trf_col_to_ovride");
        });

        modelBuilder.Entity<TrfCondPt>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.PtId }).HasName("pktrf_cond_pt");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CondRule).IsFixedLength();
            entity.Property(e => e.ResendAllData).IsFixedLength();
            entity.Property(e => e.SuspendTrfPt).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TrfDirctn).IsFixedLength();

            entity.HasOne(d => d.TrfCondRuleInst).WithMany(p => p.TrfCondPt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_cond_pt");
        });

        modelBuilder.Entity<TrfCondPtHist>(entity =>
        {
            entity.Property(e => e.CondRule).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TrfDirctn).IsFixedLength();
            entity.Property(e => e.VoidInd).IsFixedLength();
        });

        modelBuilder.Entity<TrfCondQstr>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TrfDirctn, e.CondRule, e.QstrName }).HasName("pktrf_cond_qstr");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TrfDirctn).IsFixedLength();
            entity.Property(e => e.CondRule).IsFixedLength();
            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.TrfCondRuleInst).WithMany(p => p.TrfCondQstr)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_cond_qstr");
        });

        modelBuilder.Entity<TrfCondRule>(entity =>
        {
            entity.HasKey(e => e.CondRule).HasName("pktrf_cond_rule");

            entity.Property(e => e.CondRule).IsFixedLength();
            entity.Property(e => e.Operator).IsFixedLength();
            entity.Property(e => e.OvrideTyp).IsFixedLength();
            entity.Property(e => e.OvrideVal).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TrfCondRuleInst>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TrfDirctn, e.CondRule }).HasName("pktrf_cond_rule_inst");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TrfDirctn).IsFixedLength();
            entity.Property(e => e.CondRule).IsFixedLength();
            entity.Property(e => e.ProcessRuleInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.CondRuleNavigation).WithMany(p => p.TrfCondRuleInst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_trf_cond_rule_inst");

            entity.HasOne(d => d.TrfInst).WithMany(p => p.TrfCondRuleInst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_cond_rule_inst");
        });

        modelBuilder.Entity<TrfCondTp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TrfDirctn, e.CondRule, e.TpName, e.TpVersNo }).HasName("pktrf_cond_tp");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TrfDirctn).IsFixedLength();
            entity.Property(e => e.CondRule).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.ResendAllData).IsFixedLength();
            entity.Property(e => e.SuspendTrfTp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TrfCondRuleInst).WithMany(p => p.TrfCondTp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_cond_tp");
        });

        modelBuilder.Entity<TrfCondTpHist>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TrfDirctn, e.CondRule, e.TpName, e.TpVersNo, e.TrfTstamp }).HasName("pktrf_cond_tp_hist");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TrfDirctn).IsFixedLength();
            entity.Property(e => e.CondRule).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.VoidInd).IsFixedLength();
        });

        modelBuilder.Entity<TrfEncVal>(entity =>
        {
            entity.HasKey(e => new { e.ScrubRule, e.DecdVal }).HasName("pktrf_enc_val");

            entity.Property(e => e.ScrubRule).IsFixedLength();
            entity.Property(e => e.DecdVal).IsFixedLength();
            entity.Property(e => e.EncVal).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.ScrubRuleNavigation).WithMany(p => p.TrfEncVal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_enc_val");
        });

        modelBuilder.Entity<TrfExclTransLogNulls>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TrfDirctn, e.TblName }).HasName("pktrf_excl_trans_log_nulls");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TrfDirctn).IsFixedLength();
            entity.Property(e => e.TblName).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TrfInst).WithMany(p => p.TrfExclTransLogNulls)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_excl_trans_log_nulls");
        });

        modelBuilder.Entity<TrfInst>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TrfDirctn }).HasName("pktrf_inst");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TrfDirctn).IsFixedLength();
            entity.Property(e => e.ComprFileFlag).IsFixedLength();
            entity.Property(e => e.IgnoreLog).IsFixedLength();
            entity.Property(e => e.RemoteFileDir).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TrfDataAnon).IsFixedLength();
            entity.Property(e => e.TrfFileDir).IsFixedLength();
            entity.Property(e => e.TrfFileName).IsFixedLength();
            entity.Property(e => e.TrfMgr).IsFixedLength();
            entity.Property(e => e.TrfPlnr).IsFixedLength();
            entity.Property(e => e.TrfSharePoint).IsFixedLength();
            entity.Property(e => e.VirusScan).IsFixedLength();

            entity.HasOne(d => d.Inst).WithMany(p => p.TrfInst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_inst");
        });

        modelBuilder.Entity<TrfLog>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TrfDirctn, e.TrfFnctn, e.TrfTstamp }).HasName("pktrf_log");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TrfDirctn).IsFixedLength();
            entity.Property(e => e.TrfFnctn).IsFixedLength();
            entity.Property(e => e.ComplFlag).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VoidInd).IsFixedLength();

            entity.HasOne(d => d.TrfInst).WithMany(p => p.TrfLog)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_log");
        });

        modelBuilder.Entity<TrfMsgLog>(entity =>
        {
            entity.HasKey(e => new { e.TrfFnctn, e.TrfMsgTstamp, e.TrfSeqNo }).HasName("pktrf_msg_log");

            entity.Property(e => e.TrfFnctn).IsFixedLength();
            entity.Property(e => e.CommandTyp).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.MsgText).IsFixedLength();
            entity.Property(e => e.MsgTyp).IsFixedLength();
            entity.Property(e => e.TblName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TrfScrubCondRul>(entity =>
        {
            entity.HasKey(e => new { e.ScrubRule, e.CondRule }).HasName("pktrf_scrub_cond_rul");

            entity.Property(e => e.ScrubRule).IsFixedLength();
            entity.Property(e => e.CondRule).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.CondRuleNavigation).WithMany(p => p.TrfScrubCondRul)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_trf_scrub_cond_rul");

            entity.HasOne(d => d.ScrubRuleNavigation).WithMany(p => p.TrfScrubCondRul)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_scrub_cond_rul");
        });

        modelBuilder.Entity<TrfScrubRule>(entity =>
        {
            entity.HasKey(e => e.ScrubRule).HasName("pktrf_scrub_rule");

            entity.Property(e => e.ScrubRule).IsFixedLength();
            entity.Property(e => e.DecdFnctn).IsFixedLength();
            entity.Property(e => e.EncFlag).IsFixedLength();
            entity.Property(e => e.EncFnctn).IsFixedLength();
            entity.Property(e => e.RuleDesc).IsFixedLength();
            entity.Property(e => e.SpecFnctn).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TrfSeq>(entity =>
        {
            entity.HasKey(e => e.NoTyp).HasName("pktrf_seq");

            entity.Property(e => e.NoTyp).IsFixedLength();
        });

        modelBuilder.Entity<TrfSync>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TrfDirctn, e.SyncSeqNo }).HasName("pktrf_sync");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TrfDirctn).IsFixedLength();
            entity.Property(e => e.ComplFlag).IsFixedLength();
            entity.Property(e => e.DbName).IsFixedLength();
            entity.Property(e => e.Dbms).IsFixedLength();
            entity.Property(e => e.RespInd).IsFixedLength();
            entity.Property(e => e.ServerName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TrfInst).WithMany(p => p.TrfSync)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_sync");
        });

        modelBuilder.Entity<TrfSyncDet>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TrfDirctn, e.SyncSeqNo, e.TblName }).HasName("pktrf_sync_det");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TrfDirctn).IsFixedLength();
            entity.Property(e => e.TblName).IsFixedLength();
            entity.Property(e => e.ComplFlag).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TrfSync).WithMany(p => p.TrfSyncDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_sync_det");
        });

        modelBuilder.Entity<TrfTblSendAll>(entity =>
        {
            entity.HasKey(e => e.TblName).HasName("pktrf_tbl_send_all");

            entity.Property(e => e.TblName).IsFixedLength();
            entity.Property(e => e.Cmt).IsFixedLength();
            entity.Property(e => e.PermFlag).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TblNameNavigation).WithOne(p => p.TrfTblSendAll)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_tbl_send_all");
        });

        modelBuilder.Entity<TrfTblToBlock>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TrfDirctn, e.TblName }).HasName("pktrf_tbl_to_block");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TrfDirctn).IsFixedLength();
            entity.Property(e => e.TblName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TblNameNavigation).WithMany(p => p.TrfTblToBlock)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_trf_tbl_to_block");

            entity.HasOne(d => d.TrfInst).WithMany(p => p.TrfTblToBlock)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_trf_tbl_to_block");
        });

        modelBuilder.Entity<TumClsCritTyp>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.AuthorCd, e.EffDate, e.CritTypCd }).HasName("pktum_cls_crit_typ");

            entity.Property(e => e.CritTypCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TumClsCritTypHdr>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.AuthorCd, e.EffDate, e.HdrCd }).HasName("pktum_cls_crit_typ_hdr");

            entity.Property(e => e.HdrCd).IsFixedLength();
            entity.Property(e => e.HdrDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TumClsCritTypHdrCulture>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.AuthorCd, e.EffDate, e.HdrCd, e.CultureCd }).HasName("pktum_cls_crit_typ_hdr_culture");

            entity.Property(e => e.HdrCd).IsFixedLength();
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.HdrDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TumClsCritValue>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.AuthorCd, e.EffDate, e.CritCd }).HasName("pktum_cls_crit_value");

            entity.Property(e => e.CritCd).IsFixedLength();
            entity.Property(e => e.AssessCd).IsFixedLength();
            entity.Property(e => e.CritTypCd).IsFixedLength();
            entity.Property(e => e.HdrCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TumClsCritTyp).WithMany(p => p.TumClsCritValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tum_cls_crit_value");

            entity.HasOne(d => d.TumClsCritTypHdr).WithMany(p => p.TumClsCritValue).HasConstraintName("fk2_tum_cls_crit_value");
        });

        modelBuilder.Entity<TumClsCritValueCulture>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.AuthorCd, e.EffDate, e.CritCd, e.CultureCd }).HasName("pktum_cls_crit_value_culture");

            entity.Property(e => e.CritCd).IsFixedLength();
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TumClsSchemAuth>(entity =>
        {
            entity.HasKey(e => e.AuthorCd).HasName("pktum_cls_schem_auth");

            entity.Property(e => e.AuthorCd).ValueGeneratedNever();
            entity.Property(e => e.AuthorName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TumClsScheme>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.AuthorCd, e.EffDate }).HasName("pktum_cls_scheme");

            entity.Property(e => e.ApprFlag).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TpClsValue).WithMany(p => p.TumClsScheme)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tum_cls_scheme");
        });

        modelBuilder.Entity<TumClsStageDef>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.AuthorCd, e.EffDate, e.Stage, e.StageDefNo, e.CritCd }).HasName("pktum_cls_stage_def");

            entity.Property(e => e.Stage).IsFixedLength();
            entity.Property(e => e.CritCd).IsFixedLength();
            entity.Property(e => e.CritTypCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TumHstpthDesc>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.AuthorCd, e.EffDate, e.HstpthTypCd }).HasName("pktum_hstpth_desc");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TumHstpthGrade>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.AuthorCd, e.EffDate, e.HstpthGradeCd }).HasName("pktum_hstpth_grade");

            entity.Property(e => e.HstpthGradeCd).IsFixedLength();
            entity.Property(e => e.HstpthGradeDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TumHstpthTyp>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.AuthorCd, e.EffDate, e.HstpthTypCd }).HasName("pktum_hstpth_typ");

            entity.Property(e => e.HstpthTypDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TumHstpthTypHdr>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.AuthorCd, e.EffDate, e.HstpthHdrCd }).HasName("pktum_hstpth_typ_hdr");

            entity.Property(e => e.HstpthHdrDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TumLymphSymptoms>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.AuthorCd, e.EffDate, e.LymphCd }).HasName("pktum_lymph_symptoms");

            entity.Property(e => e.LymphCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<TxPln>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo }).HasName("pktx_pln");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.BillableInd).IsFixedLength();
            entity.Property(e => e.BriefDesc).IsFixedLength();
            entity.Property(e => e.ClinTrialInd).IsFixedLength();
            entity.Property(e => e.DspTpName).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.MndtryAmendInd).IsFixedLength();
            entity.Property(e => e.OriginalInstId).IsFixedLength();
            entity.Property(e => e.OriginalTpName).IsFixedLength();
            entity.Property(e => e.PhysOrderInd).IsFixedLength();
            entity.Property(e => e.RegGroup).IsFixedLength();
            entity.Property(e => e.SexCd).IsFixedLength();
            entity.Property(e => e.SourceTpName).IsFixedLength();
            entity.Property(e => e.TpSource).IsFixedLength();
            entity.Property(e => e.TpTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.OriginalSpsrNavigation).WithMany(p => p.TxPlnOriginalSpsrNavigation).HasConstraintName("fk2_tx_pln");

            entity.HasOne(d => d.PlnTypNavigation).WithMany(p => p.TxPln).HasConstraintName("fk3_tx_pln");

            entity.HasOne(d => d.SpsrNavigation).WithMany(p => p.TxPlnSpsrNavigation).HasConstraintName("fk1_tx_pln");
        });

        modelBuilder.Entity<TxPlnStatusHx>(entity =>
        {
            entity.HasKey(e => e.TpStatusHxId).HasName("pktx_pln_status_hx");

            entity.Property(e => e.TpStatusHxId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<TxTframeIntvUse>(entity =>
        {
            entity.HasKey(e => new { e.TxTframeTyp, e.IntvUseTyp, e.EventTyp }).HasName("pktx_tframe_intv_use");

            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TxTframeIntvUseDesc).IsFixedLength();

            entity.HasOne(d => d.EventTypNavigation).WithMany(p => p.TxTframeIntvUse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_tx_frame_intv_use");

            entity.HasOne(d => d.IntvUseTypNavigation).WithMany(p => p.TxTframeIntvUse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tx_frame_intv_use");

            entity.HasOne(d => d.TxTframeTypNavigation).WithMany(p => p.TxTframeIntvUse)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tx_frame_intv_use");
        });

        modelBuilder.Entity<TxTframeTyp>(entity =>
        {
            entity.HasKey(e => e.TxTframeTyp1).HasName("pktx_tframe_typ");

            entity.Property(e => e.TxTframeTyp1).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TxTframeTypDesc).IsFixedLength();
        });

        modelBuilder.Entity<TxVrtn>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TpName, e.PhaseSeqNo, e.DateTpInit, e.VrtnDate }).HasName("pktx_vrtn");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ReviewingSpsr).IsFixedLength();
            entity.Property(e => e.SpsrChecked).IsFixedLength();
            entity.Property(e => e.SpsrId).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtVisit).WithMany(p => p.TxVrtn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tx_vrtn");

            entity.HasOne(d => d.VrblOrder).WithMany(p => p.TxVrtn).HasConstraintName("fk2_tx_vrtn");
        });

        modelBuilder.Entity<TxVrtnNote>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.TpName, e.PhaseSeqNo, e.DateTpInit, e.TxVrtnNoteTyp, e.VrtnDate }).HasName("pktx_vrtn_note");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.RsnTypInd).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TxVrtnNoteTypNavigation).WithMany(p => p.TxVrtnNote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_tx_vrtn_note");

            entity.HasOne(d => d.TxVrtn).WithMany(p => p.TxVrtnNote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_tx_vrtn_note");
        });

        modelBuilder.Entity<TxVrtnNoteTyp>(entity =>
        {
            entity.HasKey(e => e.TxVrtnNoteTyp1).HasName("pktx_vrtn_note_typ");

            entity.Property(e => e.TxVrtnNoteTyp1).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TxVrtnNoteDesc).IsFixedLength();
        });

        modelBuilder.Entity<TypOfTest>(entity =>
        {
            entity.HasKey(e => e.TypOfTest1).HasName("pktyp_of_test");

            entity.Property(e => e.TypOfTest1).IsFixedLength();
            entity.Property(e => e.FormNo).IsFixedLength();
            entity.Property(e => e.TestCls).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Dss).WithMany(p => p.TypOfTest).HasConstraintName("fk1_typ_of_test");
        });

        modelBuilder.Entity<TypOfTestCulture>(entity =>
        {
            entity.HasKey(e => new { e.TypOfTest, e.CultureCd }).HasName("pktyp_of_test_culture");

            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CultureCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Ucum>(entity =>
        {
            entity.HasKey(e => e.UcumId).HasName("pkucum");

            entity.Property(e => e.UcumId).ValueGeneratedNever();
            entity.Property(e => e.Code).IsFixedLength();
            entity.Property(e => e.CodeName).IsFixedLength();
            entity.Property(e => e.CodePreferredName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<UnavlDow>(entity =>
        {
            entity.HasKey(e => e.UnavlDow1).HasName("pkunavl_dow");

            entity.Property(e => e.UnavlDow1).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.UnavlDesc).IsFixedLength();
        });

        modelBuilder.Entity<UnavlHdr>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.UnavlHdrId }).HasName("pkunavl_hdr");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.LocInd).IsFixedLength();
            entity.Property(e => e.ProfInd).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.PtInd).IsFixedLength();
            entity.Property(e => e.ReadOnlyInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<UnavlTemplate>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.UnavlTemplateId }).HasName("pkunavl_template");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UnavlTemplateTxt).IsFixedLength();
        });

        modelBuilder.Entity<UnavlTyp>(entity =>
        {
            entity.HasKey(e => e.UnavlTyp1).HasName("pkunavl_typ");

            entity.Property(e => e.UnavlTyp1).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.UnavlDesc).IsFixedLength();
        });

        modelBuilder.Entity<UnitConversion>(entity =>
        {
            entity.HasKey(e => new { e.Source, e.Destination }).HasName("pkunit_conversion");

            entity.Property(e => e.Formula).IsFixedLength();
            entity.Property(e => e.InverseFormula).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<UnitOfMeas>(entity =>
        {
            entity.HasKey(e => e.Uom).HasName("pkunit_of_meas");

            entity.Property(e => e.Uom).ValueGeneratedNever();
            entity.Property(e => e.MediUom).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.UomAbbr).IsFixedLength();
            entity.Property(e => e.UomDesc).IsFixedLength();
        });

        modelBuilder.Entity<UomGroup>(entity =>
        {
            entity.HasKey(e => new { e.UomGroupId, e.UomCatId, e.UomGroupName }).HasName("pkuom_group");

            entity.Property(e => e.UomGroupName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<UserDefActAttr>(entity =>
        {
            entity.HasKey(e => e.UserDefActAttrSer).HasName("XPKUserDefActAttr");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_UserDefActAttr");
                    tb.HasTrigger("tI_UserDefActAttr");
                    tb.HasTrigger("tU_UserDefActAttr");
                });

            entity.Property(e => e.UserDefActAttrSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<UserDefActAttrMh>(entity =>
        {
            entity.HasKey(e => new { e.UserDefActAttrSer, e.UserDefActAttrRevCount }).HasName("XPKUserDefActAttrMH");

            entity.ToTable("UserDefActAttrMH", tb =>
                {
                    tb.HasTrigger("tD_UserDefActAttrMH");
                    tb.HasTrigger("tI_UserDefActAttrMH");
                    tb.HasTrigger("tU_UserDefActAttrMH");
                });

            
                
                

            entity.HasOne(d => d.UserDefActAttrSerNavigation).WithMany(p => p.UserDefActAttrMh)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKUserDefActAttr_UserDefActAttrMH");
        });

        modelBuilder.Entity<UserDefActAttrValue>(entity =>
        {
            entity.HasKey(e => e.UserDefActAttrValueSer).HasName("XPKUserDefActAttrValue");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_UserDefActAttrValue");
                    tb.HasTrigger("tU_UserDefActAttrValue");
                });

            entity.Property(e => e.UserDefActAttrValueSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.UserDefActAttrSerNavigation).WithMany(p => p.UserDefActAttrValue)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKUserDefActAttr_UserDefActAttrValue");
        });

        modelBuilder.Entity<UserDefinedDemgr>(entity =>
        {
            entity.HasKey(e => e.DefinedDemgrId).HasName("pkuser_defined_demgr");

            entity.ToTable("user_defined_demgr", tb =>
                {
                    tb.HasTrigger("tD_user_defined_demgr");
                    tb.HasTrigger("tI_user_defined_demgr");
                    tb.HasTrigger("tU_user_defined_demgr");
                });

            entity.Property(e => e.DefinedDemgrId).ValueGeneratedNever();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.DefaultInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<UserEmergAccessLog>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.AccessTime }).HasName("pkuser_emerg_access_log");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AccessCmt).IsFixedLength();
            entity.Property(e => e.AppName).IsFixedLength();
            entity.Property(e => e.GroupInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.UserGroupId).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
        });

        modelBuilder.Entity<UserExamComp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.ExamCompId }).HasName("pkuser_exam_comp");

            entity.ToTable("user_exam_comp", tb => tb.HasTrigger("tU_user_exam_comp"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ExamCd).IsFixedLength();
            entity.Property(e => e.NegDesc).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UserExamCompDesc).IsFixedLength();

            entity.HasOne(d => d.ExamComp).WithMany(p => p.UserExamComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_user_exam_comp");
        });

        modelBuilder.Entity<UserExamSystemDflt>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.InstId, e.SystemTypId }).HasName("pkuser_exam_system_dflt");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AbnormalIntro).IsFixedLength();
            entity.Property(e => e.NormalDesc).IsFixedLength();
            entity.Property(e => e.NormalIntro).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<UserGroup>(entity =>
        {
            entity.HasKey(e => new { e.GroupInstId, e.UserGroupId }).HasName("pkuser_group");

            entity.Property(e => e.GroupInstId).IsFixedLength();
            entity.Property(e => e.UserGroupId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UserGroupDesc).IsFixedLength();

            entity.HasOne(d => d.GroupInst).WithMany(p => p.UserGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_user_group");
        });

        modelBuilder.Entity<UserGroupCtrl>(entity =>
        {
            entity.HasKey(e => new { e.GroupInstId, e.UserGroupId, e.InstId, e.AppCd, e.WindowLabel, e.CtrlLabel }).HasName("pkuser_group_ctrl");

            entity.Property(e => e.GroupInstId).IsFixedLength();
            entity.Property(e => e.UserGroupId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.WindowLabel).IsFixedLength();
            entity.Property(e => e.CtrlLabel).IsFixedLength();
            entity.Property(e => e.EnabledFlag).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.UserGroupCtrl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_user_group_ctrl");

            entity.HasOne(d => d.UserGroup).WithMany(p => p.UserGroupCtrl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_user_group_ctrl");

            entity.HasOne(d => d.DfltCtrl).WithMany(p => p.UserGroupCtrl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_user_group_ctrl");
        });

        modelBuilder.Entity<UserGroupMenu>(entity =>
        {
            entity.HasKey(e => new { e.GroupInstId, e.UserGroupId, e.InstId, e.AppCd, e.MenuLabel }).HasName("pkuser_group_menu");

            entity.Property(e => e.GroupInstId).IsFixedLength();
            entity.Property(e => e.UserGroupId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.MenuLabel).IsFixedLength();
            entity.Property(e => e.EnabledFlag).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.AppCdNavigation).WithMany(p => p.UserGroupMenu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_user_group_menu");

            entity.HasOne(d => d.DfltMenu).WithMany(p => p.UserGroupMenu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_user_group_menu");

            entity.HasOne(d => d.UserGroup).WithMany(p => p.UserGroupMenu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_user_group_menu");
        });

        modelBuilder.Entity<UserInstPtKeyCd>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.PtKeyInstId, e.PtKeyCd }).HasName("pkuser_inst_pt_key_cd");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PtKeyInstId).IsFixedLength();
            entity.Property(e => e.DisplayPtIdInd).IsFixedLength();
            entity.Property(e => e.HeaderInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<UserMsg>(entity =>
        {
            entity.HasKey(e => e.MsgId).HasName("pkuser_msg");

            entity.Property(e => e.MsgId).ValueGeneratedNever();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.MsgCreatorInstId).IsFixedLength();
            entity.Property(e => e.MsgTopic).IsFixedLength();
            entity.Property(e => e.RcpntInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<UserMsgDsp>(entity =>
        {
            entity.HasKey(e => new { e.UserInstId, e.Userid, e.InstId, e.MsgId }).HasName("pkuser_msg_dsp");

            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
        });

        modelBuilder.Entity<UserPnToolbar>(entity =>
        {
            entity.HasKey(e => new { e.UserInstId, e.Userid, e.PnToolbarFcnTyp, e.InstId, e.TemplateId }).HasName("pkuser_pn_toolbar");

            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.UseridNavigation).WithMany(p => p.UserPnToolbar)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_user_pn_toolbar");
        });

        modelBuilder.Entity<UserPrefer>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.UserPreferCd }).HasName("pkuser_prefer");

            entity.ToTable("user_prefer", tb =>
                {
                    tb.HasTrigger("tD_user_prefer");
                    tb.HasTrigger("tU_user_prefer");
                });

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UserPreferValue).IsFixedLength();
        });

        modelBuilder.Entity<UserPreferCd>(entity =>
        {
            entity.HasKey(e => e.UserPreferCd1).HasName("pkuser_prefer_cd");

            entity.Property(e => e.UserPreferCd1).ValueGeneratedNever();
            entity.Property(e => e.DataTyp).IsFixedLength();
            entity.Property(e => e.DefaultValue).IsFixedLength();
            entity.Property(e => e.MgrInd).IsFixedLength();
            entity.Property(e => e.PlnInd).IsFixedLength();
            entity.Property(e => e.SecInd).IsFixedLength();
            entity.Property(e => e.SectionName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UserPreferDesc).IsFixedLength();
            entity.Property(e => e.VisibleInd).IsFixedLength();
        });

        modelBuilder.Entity<UserPreferMh>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.UserPreferCd, e.RevisionNo }).HasName("pkuser_prefer_mh");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UserPreferValue).IsFixedLength();
        });

        modelBuilder.Entity<UserPrivilegeLog>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.AccessTime, e.WindowLabel, e.CtrlLabel, e.TransLogTstamp }).HasName("pkuser_privilege_log");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.WindowLabel).IsFixedLength();
            entity.Property(e => e.CtrlLabel).IsFixedLength();
            entity.Property(e => e.AccessCmt).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AppName).IsFixedLength();
            entity.Property(e => e.ComputerId).IsFixedLength();
            entity.Property(e => e.EmergencyGroupInstId).IsFixedLength();
            entity.Property(e => e.EmergencyUserGroupId).IsFixedLength();
            entity.Property(e => e.GroupInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.UserGroupId).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
        });

        modelBuilder.Entity<UserRouteRstr>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.UserInstId, e.InstId, e.AdmnRouteId }).HasName("pkuser_route_rstr");

            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<UserSchLoc>(entity =>
        {
            entity.HasKey(e => new { e.UserInstId, e.Userid, e.LocInstId, e.LocId }).HasName("pkuser_sch_loc");

            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.LocInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<UserShortcut>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.ShortcutId }).HasName("pkuser_shortcut");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ShortcutLabel).IsFixedLength();
            entity.Property(e => e.ShortcutPath).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<UserWinAccess>(entity =>
        {
            entity.HasKey(e => new { e.WindowName, e.TransLogInstId, e.TransLogUserid, e.TransLogTstamp }).HasName("pkuser_win_access");

            entity.Property(e => e.WindowName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.ActionCd).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.WindowLabel).IsFixedLength();
        });

        modelBuilder.Entity<Userid>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid1 }).HasName("pkuserid");

            entity.ToTable("userid", tb =>
                {
                    tb.HasTrigger("tD_userid");
                    tb.HasTrigger("tU_userid");
                });

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.BccaAgrmtInd).IsFixedLength();
            entity.Property(e => e.BillForMedsInd).IsFixedLength();
            entity.Property(e => e.BillForQstrInd).IsFixedLength();
            entity.Property(e => e.BillForTestInd).IsFixedLength();
            entity.Property(e => e.BillForVisitInd).IsFixedLength();
            entity.Property(e => e.CptAgrmtInd).IsFixedLength();
            entity.Property(e => e.Dea).IsFixedLength();
            entity.Property(e => e.DspName).IsFixedLength();
            entity.Property(e => e.EmergencyGroupInstId).IsFixedLength();
            entity.Property(e => e.EmergencyUserGroupId).IsFixedLength();
            entity.Property(e => e.GroupInstId).IsFixedLength();
            entity.Property(e => e.IntfPreApprInd).IsFixedLength();
            entity.Property(e => e.LicAgrmtInd).IsFixedLength();
            entity.Property(e => e.LoginInstId).IsFixedLength();
            entity.Property(e => e.NameConfirmedInd).IsFixedLength();
            entity.Property(e => e.PnPreApprInd).IsFixedLength();
            entity.Property(e => e.Printer).IsFixedLength();
            entity.Property(e => e.ProfFlag).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.RospeInd).IsFixedLength();
            entity.Property(e => e.SexCd).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.Upin).IsFixedLength();
            entity.Property(e => e.UserAccessTimeOverrideInd).IsFixedLength();
            entity.Property(e => e.UserBusTel).IsFixedLength();
            entity.Property(e => e.UserBusTelExt).IsFixedLength();
            entity.Property(e => e.UserFirstName).IsFixedLength();
            entity.Property(e => e.UserGroupId).IsFixedLength();
            entity.Property(e => e.UserHomeTel).IsFixedLength();
            entity.Property(e => e.UserInitial).IsFixedLength();
            entity.Property(e => e.UserLastName).IsFixedLength();
            entity.Property(e => e.UserPager).IsFixedLength();
            entity.Property(e => e.UserPagerExt).IsFixedLength();
            entity.Property(e => e.UserTypCd).IsFixedLength();
            entity.Property(e => e.Usercuid).IsFixedLength();

            entity.HasOne(d => d.DesignationTypNavigation).WithMany(p => p.Userid).HasConstraintName("fk1_userid");

            entity.HasOne(d => d.DisciplineTypNavigation).WithMany(p => p.Userid).HasConstraintName("fk2_userid");

            entity.HasOne(d => d.Inst).WithMany(p => p.Userid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_userid");

            entity.HasOne(d => d.ProfTypNavigation).WithMany(p => p.Userid).HasConstraintName("fk4_userid");

            entity.HasOne(d => d.Stkh).WithMany(p => p.Userid).HasConstraintName("fk7_userid");

            entity.HasOne(d => d.UserBusTelFmt).WithMany(p => p.UseridUserBusTelFmt).HasConstraintName("fk8_userid");

            entity.HasOne(d => d.UserHomeTelFmt).WithMany(p => p.UseridUserHomeTelFmt).HasConstraintName("fk9_userid");

            entity.HasOne(d => d.UserTitle).WithMany(p => p.Userid).HasConstraintName("fk5_userid");

            entity.HasOne(d => d.UserGroup).WithMany(p => p.UseridUserGroup).HasConstraintName("fk_emergency_access_userid");

            entity.HasOne(d => d.UserGroupNavigation).WithMany(p => p.UseridUserGroupNavigation).HasConstraintName("fk6_userid");
        });

        modelBuilder.Entity<UseridMh>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.RevisionNo }).HasName("pkuserid_mh");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.SexCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UserFirstName).IsFixedLength();
            entity.Property(e => e.UserInitial).IsFixedLength();
            entity.Property(e => e.UserLastName).IsFixedLength();
        });

        modelBuilder.Entity<ValXref>(entity =>
        {
            entity.HasKey(e => e.ValXrefId).HasName("pkval_xref");

            entity.Property(e => e.ValXrefId).ValueGeneratedNever();
            entity.Property(e => e.AInstId).IsFixedLength();
            entity.Property(e => e.ARefId).IsFixedLength();
            entity.Property(e => e.AVal1).IsFixedLength();
            entity.Property(e => e.AVal2).IsFixedLength();
            entity.Property(e => e.AVal3).IsFixedLength();
            entity.Property(e => e.AVal4).IsFixedLength();
            entity.Property(e => e.AVal5).IsFixedLength();
            entity.Property(e => e.BInstId).IsFixedLength();
            entity.Property(e => e.BRefId).IsFixedLength();
            entity.Property(e => e.BVal1).IsFixedLength();
            entity.Property(e => e.BVal2).IsFixedLength();
            entity.Property(e => e.BVal3).IsFixedLength();
            entity.Property(e => e.BVal4).IsFixedLength();
            entity.Property(e => e.BVal5).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.RefXref).WithMany(p => p.ValXref)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_val_xref");
        });

        modelBuilder.Entity<ValueTyp>(entity =>
        {
            entity.HasKey(e => e.ValueTyp1).HasName("pkvalue_typ");

            entity.Property(e => e.ValueTyp1).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.ValueDesc).IsFixedLength();
            entity.Property(e => e.ValueUpdateInd).IsFixedLength();
            entity.Property(e => e.ValueUseDesc).IsFixedLength();
            entity.Property(e => e.ValueUseInd).IsFixedLength();
        });

        modelBuilder.Entity<VarisDbInfo>(entity =>
        {
            entity.HasKey(e => e.LoginUserid).HasName("pkvaris_db_info");

            entity.Property(e => e.DbName).IsFixedLength();
            entity.Property(e => e.Dbms).IsFixedLength();
            entity.Property(e => e.LoginPwd).IsFixedLength();
            entity.Property(e => e.SvrName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<Venue>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKVenue");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Venue");
                    tb.HasTrigger("tI_Venue");
                    tb.HasTrigger("tU_Venue");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.Venue).HasConstraintName("FKResource_Venue");
        });

        modelBuilder.Entity<VideoDigitizer>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKVideoDigitizer");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_VideoDigitizer");
                    tb.HasTrigger("tU_VideoDigitizer");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.VideoDigitizer).HasConstraintName("FKImagingDevice_VideoDigitizer");
        });

        modelBuilder.Entity<VisitFinancialStatusTyp>(entity =>
        {
            entity.HasKey(e => e.VisitFinancialStatusTyp1).HasName("pkvisit_financial_status_typ");

            entity.Property(e => e.VisitFinancialStatusTyp1).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.VisitFinancialStatusDesc).IsFixedLength();
        });

        modelBuilder.Entity<VisitNote>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.VisitNoteId }).HasName("pkvisit_note");

            entity.ToTable("visit_note", tb =>
                {
                    tb.HasTrigger("tD_visit_note");
                    tb.HasTrigger("tU_visit_note");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprFlag).IsFixedLength();
            entity.Property(e => e.ApprStkhId).IsFixedLength();
            entity.Property(e => e.AuthorOrgStkhId).IsFixedLength();
            entity.Property(e => e.AuthorStkhId).IsFixedLength();
            entity.Property(e => e.CertStkhId).IsFixedLength();
            entity.Property(e => e.CompletedInd).IsFixedLength();
            entity.Property(e => e.CorrectionInd).IsFixedLength();
            entity.Property(e => e.CreatorStkhId).IsFixedLength();
            entity.Property(e => e.DcmntErrInd).IsFixedLength();
            entity.Property(e => e.DcmntIdLong).IsFixedLength();
            entity.Property(e => e.DictatedFlag).IsFixedLength();
            entity.Property(e => e.DocPreviewLoc).IsFixedLength();
            entity.Property(e => e.ExternalSystemName).IsFixedLength();
            entity.Property(e => e.GeneratedInd).IsFixedLength();
            entity.Property(e => e.ImgDcmntId).IsFixedLength();
            entity.Property(e => e.IntfCreatedInd).IsFixedLength();
            entity.Property(e => e.LtArchiveInd).IsFixedLength();
            entity.Property(e => e.OverrideInstId).IsFixedLength();
            entity.Property(e => e.OverrideTxt).IsFixedLength();
            entity.Property(e => e.PreApprInd).IsFixedLength();
            entity.Property(e => e.PrintedInd).IsFixedLength();
            entity.Property(e => e.PrivInd).IsFixedLength();
            entity.Property(e => e.PtProvidedInd).IsFixedLength();
            entity.Property(e => e.RemAttachInd).IsFixedLength();
            entity.Property(e => e.ReviewReqInd).IsFixedLength();
            entity.Property(e => e.RevisedInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.SignedStkhId).IsFixedLength();
            entity.Property(e => e.SupervisorStkhId).IsFixedLength();
            entity.Property(e => e.SystemGenInd).IsFixedLength();
            entity.Property(e => e.TemplateName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.NoteLevelNavigation).WithMany(p => p.VisitNote).HasConstraintName("fk1_visit_note");

            entity.HasOne(d => d.NoteTypNavigation).WithMany(p => p.VisitNote).HasConstraintName("fk2_visit_note");

            entity.HasOne(d => d.BillAcct).WithMany(p => p.VisitNote).HasConstraintName("fk6_visit_note");

            entity.HasOne(d => d.PtTpEval).WithMany(p => p.VisitNote).HasConstraintName("fk3_visit_note");

            entity.HasOne(d => d.PtTpFocus).WithMany(p => p.VisitNote).HasConstraintName("fk4_visit_note");
        });

        modelBuilder.Entity<VisitNoteDictation>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.VisitNoteId, e.DictationQueueId }).HasName("pk_visit_note_dictation");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DictationQueue).WithMany(p => p.VisitNoteDictation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_visit_note_dictation");
        });

        modelBuilder.Entity<VisitNoteMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.VisitNoteId, e.RevisionNo }).HasName("pkvisit_note_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ApprFlag).IsFixedLength();
            entity.Property(e => e.ApprStkhId).IsFixedLength();
            entity.Property(e => e.AuthorOrgStkhId).IsFixedLength();
            entity.Property(e => e.AuthorStkhId).IsFixedLength();
            entity.Property(e => e.CertStkhId).IsFixedLength();
            entity.Property(e => e.CompletedInd).IsFixedLength();
            entity.Property(e => e.CorrectionInd).IsFixedLength();
            entity.Property(e => e.CreatorStkhId).IsFixedLength();
            entity.Property(e => e.DcmntErrInd).IsFixedLength();
            entity.Property(e => e.DcmntIdLong).IsFixedLength();
            entity.Property(e => e.DictatedFlag).IsFixedLength();
            entity.Property(e => e.ExternalSystemName).IsFixedLength();
            entity.Property(e => e.GeneratedInd).IsFixedLength();
            entity.Property(e => e.ImgDcmntId).IsFixedLength();
            entity.Property(e => e.IntfCreatedInd).IsFixedLength();
            entity.Property(e => e.LtArchiveInd).IsFixedLength();
            entity.Property(e => e.OverrideInstId).IsFixedLength();
            entity.Property(e => e.OverrideTxt).IsFixedLength();
            entity.Property(e => e.PreApprInd).IsFixedLength();
            entity.Property(e => e.PrintedInd).IsFixedLength();
            entity.Property(e => e.PrivInd).IsFixedLength();
            entity.Property(e => e.PtProvidedInd).IsFixedLength();
            entity.Property(e => e.RemAttachInd).IsFixedLength();
            entity.Property(e => e.ReviewReqInd).IsFixedLength();
            entity.Property(e => e.RevisedInd).IsFixedLength();
            entity.Property(e => e.SignedStkhId).IsFixedLength();
            entity.Property(e => e.SupervisorStkhId).IsFixedLength();
            entity.Property(e => e.SystemGenInd).IsFixedLength();
            entity.Property(e => e.TemplateName).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<VisitNoteNonRtf>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.VisitNoteId }).HasName("pkvisit_note_non_rtf");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<VisitNoteRcpt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.VisitNoteRcptId, e.PtVisitId, e.VisitNoteId }).HasName("pkvisit_note_rcpt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CorspMthdCd).IsFixedLength();
            entity.Property(e => e.FaxStatus).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<VisitNoteTyp>(entity =>
        {
            entity.HasKey(e => e.VisitNoteTyp1).HasName("pkvisit_note_typ");

            entity.Property(e => e.VisitNoteTyp1).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.VisitNoteDesc).IsFixedLength();
        });

        modelBuilder.Entity<VisitReasonPnTemplate>(entity =>
        {
            entity.HasKey(e => new { e.VisitReasonId, e.VisitReasonInstId, e.Userid, e.UserInstId }).HasName("pk_visit_reason_pn_template");

            entity.Property(e => e.VisitReasonInstId).IsFixedLength();
            entity.Property(e => e.UserInstId).IsFixedLength();
            entity.Property(e => e.TemplateInstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PnTemplate).WithMany(p => p.VisitReasonPnTemplate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_visit_reason_pn_template");

            entity.HasOne(d => d.UseridNavigation).WithMany(p => p.VisitReasonPnTemplate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk3_visit_reason_pn_template");

            entity.HasOne(d => d.InstVisitReasonTyp).WithMany(p => p.VisitReasonPnTemplate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_visit_reason_pn_template");
        });

        modelBuilder.Entity<VisitReasonTyp>(entity =>
        {
            entity.HasKey(e => e.VisitReasonTyp1).HasName("pkvisit_reason_typ");

            entity.Property(e => e.VisitReasonTyp1).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.VisitReasonDesc).IsFixedLength();
        });

        modelBuilder.Entity<VisitTask>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.VisitReasonId, e.CatNameTyp }).HasName("pkvisit_task");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.CatNameTypNavigation).WithMany(p => p.VisitTask)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_visit_task");
        });

        modelBuilder.Entity<VisitTrackingTyp>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.VisitTrackingTyp1 }).HasName("pkvisit_tracking_typ");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VisitTrackingAbrv).IsFixedLength();
            entity.Property(e => e.VisitTrackingDesc).IsFixedLength();
        });

        modelBuilder.Entity<VisitTyp>(entity =>
        {
            entity.HasKey(e => e.VisitTyp1).HasName("pkvisit_typ");

            entity.Property(e => e.VisitTyp1).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.VisitDesc).IsFixedLength();
        });

        modelBuilder.Entity<VolOptConstraints>(entity =>
        {
            entity.HasKey(e => e.VolOptConstraintsSer).HasName("XPKVolOptConstraints");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_VolOptConstraints");
                    tb.HasTrigger("tI_VolOptConstraints");
                    tb.HasTrigger("tU_VolOptConstraints");
                });

            entity.Property(e => e.VolOptConstraintsSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.PlanSetupSerNavigation).WithMany(p => p.VolOptConstraints).HasConstraintName("FKPlanSetup_VolOptConstraints");
        });

        modelBuilder.Entity<VolOptMatrix>(entity =>
        {
            entity.HasKey(e => e.VolOptMatrixSer).HasName("XPKVolOptMatrix");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_VolOptMatrix");
                    tb.HasTrigger("tU_VolOptMatrix");
                });

            entity.Property(e => e.VolOptMatrixSer).ValueGeneratedNever();
            
                
                
            entity.Property(e => e.Transformation).IsFixedLength();

            entity.HasOne(d => d.VolOptConstraintsSerNavigation).WithMany(p => p.VolOptMatrix).HasConstraintName("FKVolOptConstraints_VolOptMatrix");
        });

        modelBuilder.Entity<VolOptStruct>(entity =>
        {
            entity.HasKey(e => e.VolOptStructSer).HasName("XPKVolOptStruct");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_VolOptStruct");
                    tb.HasTrigger("tI_VolOptStruct");
                    tb.HasTrigger("tU_VolOptStruct");
                });

            entity.Property(e => e.VolOptStructSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.StructureSerNavigation).WithMany(p => p.VolOptStruct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKStructure_VolOptStruct");

            entity.HasOne(d => d.VolOptConstraintsSerNavigation).WithMany(p => p.VolOptStruct).HasConstraintName("FKVolOptConstraints_VolOptStruct");
        });

        modelBuilder.Entity<VolOptStructCstr>(entity =>
        {
            entity.HasKey(e => e.VolOptStructCstrSer).HasName("XPKVolOptStructCstr");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_VolOptStructCstr");
                    tb.HasTrigger("tU_VolOptStructCstr");
                });

            entity.Property(e => e.VolOptStructCstrSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.VolOptStructSerNavigation).WithMany(p => p.VolOptStructCstr).HasConstraintName("FKVolOptStruct_VolOptStructCstr");
        });

        modelBuilder.Entity<VolumeCode>(entity =>
        {
            entity.HasKey(e => e.VolumeCodeSer).HasName("XPKVolumeCode");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_VolumeCode");
                    tb.HasTrigger("tI_VolumeCode");
                    tb.HasTrigger("tU_VolumeCode");
                });

            entity.Property(e => e.VolumeCodeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.Language).WithMany(p => p.VolumeCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKLanguageLookup_VolumeCode");

            entity.HasOne(d => d.MaterialSerNavigation).WithMany(p => p.VolumeCode).HasConstraintName("FKMaterial_VolumeCode");
        });

        modelBuilder.Entity<VolumeType>(entity =>
        {
            entity.HasKey(e => e.VolumeTypeSer).HasName("XPKVolumeType");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_VolumeType");
                    tb.HasTrigger("tI_VolumeType");
                    tb.HasTrigger("tU_VolumeType");
                });

            entity.Property(e => e.VolumeTypeSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.MaterialSerNavigation).WithMany(p => p.VolumeType).HasConstraintName("FKMaterial_VolumeType");
        });

        modelBuilder.Entity<VrblOrder>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.VrblId }).HasName("pkvrbl_order");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.AppliedInd).IsFixedLength();
            entity.Property(e => e.AppliedInstId).IsFixedLength();
            entity.Property(e => e.ApprOnFileInd).IsFixedLength();
            entity.Property(e => e.CancelEntryInd).IsFixedLength();
            entity.Property(e => e.CompletedInd).IsFixedLength();
            entity.Property(e => e.ErrorInstId).IsFixedLength();
            entity.Property(e => e.ExtTpName).IsFixedLength();
            entity.Property(e => e.GeneratedInd).IsFixedLength();
            entity.Property(e => e.HxInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.PlacerOrderNo).IsFixedLength();
            entity.Property(e => e.PlnAffectInd).IsFixedLength();
            entity.Property(e => e.PoCat).IsFixedLength();
            entity.Property(e => e.PthwyOrder).IsFixedLength();
            entity.Property(e => e.RecurringInd).IsFixedLength();
            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
            entity.Property(e => e.VrblApprFlag).IsFixedLength();
            entity.Property(e => e.VrblInstId).IsFixedLength();
            entity.Property(e => e.VrblSourceTyp).IsFixedLength();
            entity.Property(e => e.VrblTyp).IsFixedLength();
        });

        modelBuilder.Entity<VrblOrderDetail>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.VrblId, e.VrblOrderDetailId }).HasName("pkvrbl_order_detail");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.PoCat).IsFixedLength();
            entity.Property(e => e.PoDesc).IsFixedLength();
            entity.Property(e => e.PoDetails).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.VrblOrder).WithMany(p => p.VrblOrderDetail)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_vrbl_order_detail");
        });

        modelBuilder.Entity<VrblOrderLink>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.FromVrblId, e.ToVrblId }).HasName("pkvrbl_order_link");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<VrblTyp>(entity =>
        {
            entity.HasKey(e => e.VrblTyp1).HasName("pkvrbl_typ");

            entity.Property(e => e.VrblTyp1).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.VrblTypDesc).IsFixedLength();
        });

        modelBuilder.Entity<VrtnRsnTyp>(entity =>
        {
            entity.HasKey(e => new { e.FcnAreaTyp, e.VrtnTyp, e.VrtnRsnTyp1 }).HasName("pkvrtn_rsn_typ");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.VrtnTypNavigation).WithMany(p => p.VrtnRsnTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_vrtn_rsn_typ");
        });

        modelBuilder.Entity<VrtnSourceCls>(entity =>
        {
            entity.HasKey(e => e.VrtnSourceCls1).HasName("pkvrtn_source_cls");

            entity.Property(e => e.VrtnSourceCls1).ValueGeneratedNever();
            entity.Property(e => e.ClsDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<VrtnSourceTyp>(entity =>
        {
            entity.HasKey(e => new { e.VrtnSourceCls, e.VrtnSourceTyp1 }).HasName("pkvrtn_source_typ");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TypDesc).IsFixedLength();

            entity.HasOne(d => d.VrtnSourceClsNavigation).WithMany(p => p.VrtnSourceTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_vrtn_source_typ");
        });

        modelBuilder.Entity<VrtnTyp>(entity =>
        {
            entity.HasKey(e => new { e.FcnAreaTyp, e.VrtnTyp1 }).HasName("pkvrtn_typ");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.VrtnTypDesc).IsFixedLength();

            entity.HasOne(d => d.FcnAreaTypNavigation).WithMany(p => p.VrtnTyp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_vrtn_cat_typ");
        });

        modelBuilder.Entity<VvActivity>(entity =>
        {
            entity.ToView("vv_Activity");
        });

        modelBuilder.Entity<VvActivityCategory>(entity =>
        {
            entity.ToView("vv_ActivityCategory");
        });

        modelBuilder.Entity<VvActivityCategoryLng>(entity =>
        {
            entity.ToView("vv_ActivityCategoryLng");
        });

        modelBuilder.Entity<VvActivityInstance>(entity =>
        {
            entity.ToView("vv_ActivityInstance");

            
                
                
        });

        modelBuilder.Entity<VvActivityLng>(entity =>
        {
            entity.ToView("vv_ActivityLng");
        });

        modelBuilder.Entity<VvAppointmentTaskPriority>(entity =>
        {
            entity.ToView("vv_AppointmentTaskPriority");
        });

        modelBuilder.Entity<VvAppointmentTaskPriorityLng>(entity =>
        {
            entity.ToView("vv_AppointmentTaskPriorityLng");
        });

        modelBuilder.Entity<VvArchiveDeleteStatus>(entity =>
        {
            entity.ToView("vv_ArchiveDeleteStatus");
        });

        modelBuilder.Entity<VvArchiveDeleteStatusLng>(entity =>
        {
            entity.ToView("vv_ArchiveDeleteStatusLng");
        });

        modelBuilder.Entity<VvArchiveMediaStatus>(entity =>
        {
            entity.ToView("vv_ArchiveMediaStatus");
        });

        modelBuilder.Entity<VvArchiveMediaStatusLng>(entity =>
        {
            entity.ToView("vv_ArchiveMediaStatusLng");
        });

        modelBuilder.Entity<VvArchiveMediaType>(entity =>
        {
            entity.ToView("vv_ArchiveMediaType");
        });

        modelBuilder.Entity<VvArchiveMediaTypeLng>(entity =>
        {
            entity.ToView("vv_ArchiveMediaTypeLng");
        });

        modelBuilder.Entity<VvAttendee>(entity =>
        {
            entity.ToView("vv_Attendee");

            
                
                
        });

        modelBuilder.Entity<VvAutoSetupLevel>(entity =>
        {
            entity.ToView("vv_AutoSetupLevel");
        });

        modelBuilder.Entity<VvAutoSetupLevelLng>(entity =>
        {
            entity.ToView("vv_AutoSetupLevelLng");
        });

        modelBuilder.Entity<VvAuxiliary>(entity =>
        {
            entity.ToView("vv_Auxiliary");
        });

        modelBuilder.Entity<VvAuxiliaryLng>(entity =>
        {
            entity.ToView("vv_AuxiliaryLng");
        });

        modelBuilder.Entity<VvBillEventTypeEnm>(entity =>
        {
            entity.ToView("vv_BillEventType_enm", "DWH");
        });

        modelBuilder.Entity<VvBillingCode>(entity =>
        {
            entity.ToView("vv_BillingCode", "DWH");

            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.FacilityBillCode).IsFixedLength();
        });

        modelBuilder.Entity<VvBlock>(entity =>
        {
            entity.ToView("vv_Block", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvBloodGroup>(entity =>
        {
            entity.ToView("vv_BloodGroup");
        });

        modelBuilder.Entity<VvBloodGroupLng>(entity =>
        {
            entity.ToView("vv_BloodGroupLng");
        });

        modelBuilder.Entity<VvBodySystemName>(entity =>
        {
            entity.ToView("vv_BodySystemName");
        });

        modelBuilder.Entity<VvBodySystemNameLng>(entity =>
        {
            entity.ToView("vv_BodySystemNameLng");
        });

        modelBuilder.Entity<VvBrachyField>(entity =>
        {
            entity.ToView("vv_BrachyField", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvBrachyFieldHstry>(entity =>
        {
            entity.ToView("vv_BrachyFieldHstry");
        });

        modelBuilder.Entity<VvBreakPoint>(entity =>
        {
            entity.ToView("vv_BreakPoint", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvCalcTypEnm>(entity =>
        {
            entity.ToView("vv_calc_typ_enm", "DWH");
        });

        modelBuilder.Entity<VvCancelReasonTypeEnm>(entity =>
        {
            entity.ToView("vv_CancelReasonType_enm", "DWH");
        });

        modelBuilder.Entity<VvCancerTypeEnm>(entity =>
        {
            entity.ToView("vv_CancerType_enm", "DWH");
        });

        modelBuilder.Entity<VvChecklistResponse>(entity =>
        {
            entity.ToView("vv_ChecklistResponse");
        });

        modelBuilder.Entity<VvChecklistResponseLng>(entity =>
        {
            entity.ToView("vv_ChecklistResponseLng");
        });

        modelBuilder.Entity<VvClinicalStatus>(entity =>
        {
            entity.ToView("vv_ClinicalStatus");
        });

        modelBuilder.Entity<VvClinicalStatusLng>(entity =>
        {
            entity.ToView("vv_ClinicalStatusLng");
        });

        modelBuilder.Entity<VvCompensator>(entity =>
        {
            entity.ToView("vv_Compensator", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvControlPoint>(entity =>
        {
            entity.ToView("vv_ControlPoint", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvControlPointProton>(entity =>
        {
            entity.ToView("vv_ControlPointProton", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvCountry>(entity =>
        {
            entity.ToView("vv_Country");
        });

        modelBuilder.Entity<VvCountryLng>(entity =>
        {
            entity.ToView("vv_CountryLng");
        });

        modelBuilder.Entity<VvCourse>(entity =>
        {
            entity.ToView("vv_Course");

            
                
                
        });

        modelBuilder.Entity<VvCourse1>(entity =>
        {
            entity.ToView("vv_Course", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvCourseIntent>(entity =>
        {
            entity.ToView("vv_CourseIntent");
        });

        modelBuilder.Entity<VvCourseIntentLng>(entity =>
        {
            entity.ToView("vv_CourseIntentLng");
        });

        modelBuilder.Entity<VvDbhistory>(entity =>
        {
            entity.ToView("vv_DBHistory");
        });

        modelBuilder.Entity<VvDerivedImageCode>(entity =>
        {
            entity.ToView("vv_DerivedImageCode");
        });

        modelBuilder.Entity<VvDiagnosisCodeDesc>(entity =>
        {
            entity.ToView("vv_DiagnosisCodeDesc");

            entity.Property(e => e.DiagnosisCode).IsFixedLength();
        });

        modelBuilder.Entity<VvDiagnosisCodeDescLng>(entity =>
        {
            entity.ToView("vv_DiagnosisCodeDescLng");

            entity.Property(e => e.DiagnosisCode).IsFixedLength();
        });

        modelBuilder.Entity<VvDiagnosisStagingMethod>(entity =>
        {
            entity.ToView("vv_DiagnosisStagingMethod");
        });

        modelBuilder.Entity<VvDiagnosisStagingMethodLng>(entity =>
        {
            entity.ToView("vv_DiagnosisStagingMethodLng");
        });

        modelBuilder.Entity<VvDiagnosisTableStandard>(entity =>
        {
            entity.ToView("vv_DiagnosisTableStandard");
        });

        modelBuilder.Entity<VvDiagnosisTableStandardLng>(entity =>
        {
            entity.ToView("vv_DiagnosisTableStandardLng");
        });

        modelBuilder.Entity<VvDiagnosisType>(entity =>
        {
            entity.ToView("vv_DiagnosisType");
        });

        modelBuilder.Entity<VvDiagnosisTypeLng>(entity =>
        {
            entity.ToView("vv_DiagnosisTypeLng");
        });

        modelBuilder.Entity<VvDimActInstTemplateLink>(entity =>
        {
            entity.ToView("vv_DimActInstTemplateLink", "DWH");
        });

        modelBuilder.Entity<VvDimActInstTemplateLinkIncr>(entity =>
        {
            entity.ToView("vv_DimActInstTemplateLink_Incr", "DWH");
        });

        modelBuilder.Entity<VvDimActivity>(entity =>
        {
            entity.ToView("vv_DimActivity", "DWH");
        });

        modelBuilder.Entity<VvDimActivityAttribute>(entity =>
        {
            entity.ToView("vv_DimActivityAttribute", "DWH");
        });

        modelBuilder.Entity<VvDimActivityMh>(entity =>
        {
            entity.ToView("vv_DimActivityMH", "DWH");
        });

        modelBuilder.Entity<VvDimActivityTransaction>(entity =>
        {
            entity.ToView("vv_DimActivityTransaction", "DWH");
        });

        modelBuilder.Entity<VvDimActivityTransactionInSightive>(entity =>
        {
            entity.ToView("vv_DimActivityTransaction_InSightive", "DWH");
        });

        modelBuilder.Entity<VvDimActivityTransactionIncr>(entity =>
        {
            entity.ToView("vv_DimActivityTransaction_INCR", "DWH");
        });

        modelBuilder.Entity<VvDimActivityTransactionMo>(entity =>
        {
            entity.ToView("vv_DimActivityTransaction_MO", "DWH");

            entity.Property(e => e.CheckedIn).IsFixedLength();
            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.NewDeptInd).IsFixedLength();
            entity.Property(e => e.NewInstInd).IsFixedLength();
            entity.Property(e => e.NewProviderInd).IsFixedLength();
            entity.Property(e => e.PtAttendInd).IsFixedLength();
            entity.Property(e => e.TentativeInd).IsFixedLength();
            entity.Property(e => e.TreatmentPlanName).IsFixedLength();
        });

        modelBuilder.Entity<VvDimActivityTransactionMoIncr>(entity =>
        {
            entity.ToView("vv_DimActivityTransaction_MO_INCR", "DWH");

            entity.Property(e => e.CheckedIn).IsFixedLength();
            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.NewDeptInd).IsFixedLength();
            entity.Property(e => e.NewInstInd).IsFixedLength();
            entity.Property(e => e.NewProviderInd).IsFixedLength();
            entity.Property(e => e.PtAttendInd).IsFixedLength();
            entity.Property(e => e.TentativeInd).IsFixedLength();
            entity.Property(e => e.TreatmentPlanName).IsFixedLength();
        });

        modelBuilder.Entity<VvDimAddOn>(entity =>
        {
            entity.ToView("vv_DimAddOn", "DWH");
        });

        modelBuilder.Entity<VvDimBrachyApplicator>(entity =>
        {
            entity.ToView("vv_DimBrachyApplicator", "DWH");
        });

        modelBuilder.Entity<VvDimBrachyApplicatorIncr>(entity =>
        {
            entity.ToView("vv_DimBrachyApplicator_INCR", "DWH");
        });

        modelBuilder.Entity<VvDimBrachyField>(entity =>
        {
            entity.ToView("vv_DimBrachyField", "DWH");
        });

        modelBuilder.Entity<VvDimCellTypeEnm>(entity =>
        {
            entity.ToView("vv_DimCellType_enm", "DWH");
        });

        modelBuilder.Entity<VvDimChannel>(entity =>
        {
            entity.ToView("vv_DimChannel", "DWH");
        });

        modelBuilder.Entity<VvDimClinic>(entity =>
        {
            entity.ToView("vv_DimClinic", "DWH");

            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.ClinicName).IsFixedLength();
        });

        modelBuilder.Entity<VvDimConstantResource>(entity =>
        {
            entity.ToView("vv_DimConstantResource", "DWH");
        });

        modelBuilder.Entity<VvDimDateRangeController>(entity =>
        {
            entity.ToView("vv_DimDateRangeController", "DWH");
        });

        modelBuilder.Entity<VvDimDateRangeControllerIncr>(entity =>
        {
            entity.ToView("vv_DimDateRangeController_INCR", "DWH");
        });

        modelBuilder.Entity<VvDimDiagnosisCodeEnm>(entity =>
        {
            entity.ToView("vv_DimDiagnosisCode_enm", "DWH");
        });

        modelBuilder.Entity<VvDimDoctor>(entity =>
        {
            entity.ToView("vv_DimDoctor", "DWH");
        });

        modelBuilder.Entity<VvDimDoctorEnm>(entity =>
        {
            entity.ToView("vv_DimDoctor_ENM", "DWH");

            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.NameCd).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
        });

        modelBuilder.Entity<VvDimDrug>(entity =>
        {
            entity.ToView("vv_DimDrug", "DWH");
        });

        modelBuilder.Entity<VvDimDxSiteEnm>(entity =>
        {
            entity.ToView("vv_DimDxSite_enm", "DWH");
        });

        modelBuilder.Entity<VvDimEnergy>(entity =>
        {
            entity.ToView("vv_DimEnergy", "DWH");
        });

        modelBuilder.Entity<VvDimGroupResources>(entity =>
        {
            entity.ToView("vv_DimGroupResources", "DWH");
        });

        modelBuilder.Entity<VvDimHospitalDepartment>(entity =>
        {
            entity.ToView("vv_DimHospitalDepartment", "DWH");
        });

        modelBuilder.Entity<VvDimIcdositeEnm>(entity =>
        {
            entity.ToView("vv_DimICDOSite_enm", "DWH");
        });

        modelBuilder.Entity<VvDimInstituteLocation>(entity =>
        {
            entity.ToView("vv_DimInstituteLocation", "DWH");

            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.BuildingName).IsFixedLength();
            entity.Property(e => e.DepartmentName).IsFixedLength();
            entity.Property(e => e.EventType).IsFixedLength();
            entity.Property(e => e.FloorName).IsFixedLength();
            entity.Property(e => e.LocationCloseTime).IsFixedLength();
            entity.Property(e => e.LocationDescription).IsFixedLength();
            entity.Property(e => e.LocationGroupName).IsFixedLength();
            entity.Property(e => e.LocationOpenTime).IsFixedLength();
            entity.Property(e => e.LocationTel).IsFixedLength();
            entity.Property(e => e.LocationUnavlComment).IsFixedLength();
            entity.Property(e => e.OutbndSchInd).IsFixedLength();
            entity.Property(e => e.PrimaryInd).IsFixedLength();
            entity.Property(e => e.RoomName).IsFixedLength();
        });

        modelBuilder.Entity<VvDimLocation>(entity =>
        {
            entity.ToView("vv_DimLocation", "DWH");
        });

        modelBuilder.Entity<VvDimLocationMo>(entity =>
        {
            entity.ToView("vv_DimLocation_MO", "DWH");
        });

        modelBuilder.Entity<VvDimLookup>(entity =>
        {
            entity.ToView("vv_DimLookup", "DWH");
        });

        modelBuilder.Entity<VvDimLookupResourceType>(entity =>
        {
            entity.ToView("vv_DimLookup_ResourceType", "DWH");
        });

        modelBuilder.Entity<VvDimMachine>(entity =>
        {
            entity.ToView("vv_DimMachine", "DWH");
        });

        modelBuilder.Entity<VvDimMedOncPlan>(entity =>
        {
            entity.ToView("vv_DimMedOncPlan", "DWH");

            entity.Property(e => e.ActiveIndicator).IsFixedLength();
            entity.Property(e => e.ClinicalTrialIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvDimMedOncPlanSummary>(entity =>
        {
            entity.ToView("vv_DimMedOncPlanSummary", "DWH");
        });

        modelBuilder.Entity<VvDimMedoncPlanInterval>(entity =>
        {
            entity.ToView("vv_DimMedoncPlanInterval", "DWH");

            entity.Property(e => e.CyclicIndicator).IsFixedLength();
            entity.Property(e => e.EventType).IsFixedLength();
            entity.Property(e => e.Prnindicator).IsFixedLength();
        });

        modelBuilder.Entity<VvDimMedoncPlanPhase>(entity =>
        {
            entity.ToView("vv_DimMedoncPlanPhase", "DWH");

            entity.Property(e => e.PhaseDescription).IsFixedLength();
            entity.Property(e => e.RequiredIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvDimNationality>(entity =>
        {
            entity.ToView("vv_DimNationality", "DWH");
        });

        modelBuilder.Entity<VvDimOperatingLimit>(entity =>
        {
            entity.ToView("vv_DimOperatingLimit", "DWH");
        });

        modelBuilder.Entity<VvDimPatientDepartment>(entity =>
        {
            entity.ToView("vv_DimPatientDepartment", "DWH");
        });

        modelBuilder.Entity<VvDimPatientDepartmentbyCuid>(entity =>
        {
            entity.ToView("vv_DimPatientDepartmentbyCUID", "DWH");
        });

        modelBuilder.Entity<VvDimPatientDiseaseResponse>(entity =>
        {
            entity.ToView("vv_DimPatientDiseaseResponse", "DWH");

            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.DiagnosisValidEntryIndicator).IsFixedLength();
            entity.Property(e => e.DiseaseStatusValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvDimPatientDoctor>(entity =>
        {
            entity.ToView("vv_DimPatientDoctor", "DWH");
        });

        modelBuilder.Entity<VvDimPatientDoctorMo>(entity =>
        {
            entity.ToView("vv_DimPatientDoctor_MO", "DWH");

            entity.Property(e => e.ActiveEntryIndicator).IsFixedLength();
            entity.Property(e => e.CtrorgStkhId).IsFixedLength();
            entity.Property(e => e.CtrproviderStkhId).IsFixedLength();
            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.EndReasonCode).IsFixedLength();
            entity.Property(e => e.InternalIndicator).IsFixedLength();
            entity.Property(e => e.ProfRelationTypeDesc).IsFixedLength();
            entity.Property(e => e.ReferralCode).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvDimPatientJournal>(entity =>
        {
            entity.ToView("vv_DimPatientJournal", "DWH");

            entity.Property(e => e.ApprovedFlag).IsFixedLength();
            entity.Property(e => e.JournalValidEntryIndicator).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<VvDimPatientPhoto>(entity =>
        {
            entity.ToView("vv_DimPatientPhoto", "DWH");
        });

        modelBuilder.Entity<VvDimPatientUserDefinedLabels>(entity =>
        {
            entity.ToView("vv_DimPatientUserDefinedLabels", "DWH");
        });

        modelBuilder.Entity<VvDimPatientVisitTracking>(entity =>
        {
            entity.ToView("vv_DimPatientVisitTracking", "DWH");
        });

        modelBuilder.Entity<VvDimPatientVisitTrackingIncr>(entity =>
        {
            entity.ToView("vv_DimPatientVisitTracking_INCR", "DWH");
        });

        modelBuilder.Entity<VvDimPayor>(entity =>
        {
            entity.ToView("vv_DimPayor", "DWH");
        });

        modelBuilder.Entity<VvDimPayorMo>(entity =>
        {
            entity.ToView("vv_DimPayor_MO", "DWH");

            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvDimPrescription>(entity =>
        {
            entity.ToView("vv_DimPrescription", "DWH");
        });

        modelBuilder.Entity<VvDimPrescriptionAnatomy>(entity =>
        {
            entity.ToView("vv_DimPrescriptionAnatomy", "DWH");
        });

        modelBuilder.Entity<VvDimPrescriptionIncr>(entity =>
        {
            entity.ToView("vv_DimPrescription_INCR", "DWH");
        });

        modelBuilder.Entity<VvDimPrescriptionProperty>(entity =>
        {
            entity.ToView("vv_DimPrescriptionProperty", "DWH");
        });

        modelBuilder.Entity<VvDimProcedureCode>(entity =>
        {
            entity.ToView("vv_DimProcedureCode", "DWH");
        });

        modelBuilder.Entity<VvDimQuestionnaires>(entity =>
        {
            entity.ToView("vv_DimQuestionnaires", "DWH");

            entity.Property(e => e.QuestionnaireStatus).IsFixedLength();
        });

        modelBuilder.Entity<VvDimRadioactiveModelSource>(entity =>
        {
            entity.ToView("vv_DimRadioactiveModelSource", "DWH");

            entity.Property(e => e.ActiveSize).IsFixedLength();
            entity.Property(e => e.TotalSize).IsFixedLength();
        });

        modelBuilder.Entity<VvDimResource>(entity =>
        {
            entity.ToView("vv_DimResource", "DWH");
        });

        modelBuilder.Entity<VvDimResourceDepartmentHospital>(entity =>
        {
            entity.ToView("vv_DimResourceDepartmentHospital", "DWH");
        });

        modelBuilder.Entity<VvDimResourceEnm>(entity =>
        {
            entity.ToView("vv_DimResource_ENM", "DWH");

            entity.Property(e => e.Usercuid).IsFixedLength();
        });

        modelBuilder.Entity<VvDimResoureGroup>(entity =>
        {
            entity.ToView("vv_DimResoureGroup", "DWH");

            
                
                
        });

        modelBuilder.Entity<VvDimRx>(entity =>
        {
            entity.ToView("vv_DimRx", "DWH");

            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.RxCompletedIndicator).IsFixedLength();
            entity.Property(e => e.RxDispensedIndicator).IsFixedLength();
            entity.Property(e => e.RxInteractionCheckingIndicator).IsFixedLength();
            entity.Property(e => e.RxNotDispensedIndicator).IsFixedLength();
            entity.Property(e => e.RxPlacerOrderNo).IsFixedLength();
            entity.Property(e => e.RxPromptTreatmentStartDateIndicator).IsFixedLength();
            entity.Property(e => e.RxReOrderCommentIndicator).IsFixedLength();
            entity.Property(e => e.RxReorderReviewIndicator).IsFixedLength();
            entity.Property(e => e.RxStatus).IsFixedLength();
            entity.Property(e => e.RxTpName).IsFixedLength();
            entity.Property(e => e.RxTpVersion).IsFixedLength();
            entity.Property(e => e.RxValidEntry).IsFixedLength();
        });

        modelBuilder.Entity<VvDimRxAdmin>(entity =>
        {
            entity.ToView("vv_DimRxAdmin", "DWH");

            entity.Property(e => e.RxAdminAdhocEntry).IsFixedLength();
            entity.Property(e => e.RxAdminAsAdvised).IsFixedLength();
            entity.Property(e => e.RxAdminCorrected).IsFixedLength();
            entity.Property(e => e.RxAdminCourseAdjustIndicator).IsFixedLength();
            entity.Property(e => e.RxAdminDisclosedFlag).IsFixedLength();
            entity.Property(e => e.RxAdminDispensedIndicator).IsFixedLength();
            entity.Property(e => e.RxAdminDoseApproved).IsFixedLength();
            entity.Property(e => e.RxAdminNotDispensedIndicator).IsFixedLength();
            entity.Property(e => e.RxAdminRefusedIndicator).IsFixedLength();
            entity.Property(e => e.RxAdminValidEntry).IsFixedLength();
            entity.Property(e => e.RxAdminVarianceIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvDimRxAgt>(entity =>
        {
            entity.ToView("vv_DimRxAgt", "DWH");

            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.RxAdhocActiveEntry).IsFixedLength();
            entity.Property(e => e.RxAdminDoseChange).IsFixedLength();
            entity.Property(e => e.RxAgentLevelStatus).IsFixedLength();
            entity.Property(e => e.RxAgtAgentName).IsFixedLength();
            entity.Property(e => e.RxAgtChangeIndicator).IsFixedLength();
            entity.Property(e => e.RxAgtInactivateIndicator).IsFixedLength();
            entity.Property(e => e.RxAgtNotDispensedIndicator).IsFixedLength();
            entity.Property(e => e.RxAgtStatus).IsFixedLength();
            entity.Property(e => e.RxAgtTakeAsDirected).IsFixedLength();
            entity.Property(e => e.RxAgtValidEntryInd).IsFixedLength();
            entity.Property(e => e.RxAppCd).IsFixedLength();
            entity.Property(e => e.RxConcentration).IsFixedLength();
            entity.Property(e => e.RxContinueRxIndicator).IsFixedLength();
            entity.Property(e => e.RxDispenseDoseLevelIndicator).IsFixedLength();
            entity.Property(e => e.RxDispensedIndicator).IsFixedLength();
            entity.Property(e => e.RxDoseRecordIndicator).IsFixedLength();
            entity.Property(e => e.RxDoseStrength).IsFixedLength();
            entity.Property(e => e.RxImmunizationCode).IsFixedLength();
            entity.Property(e => e.RxOverrideDoseTimesIndicator).IsFixedLength();
            entity.Property(e => e.RxPrnIndicator).IsFixedLength();
            entity.Property(e => e.RxPrnRepeatIndicator).IsFixedLength();
            entity.Property(e => e.RxReason).IsFixedLength();
            entity.Property(e => e.RxRefillIndicator).IsFixedLength();
            entity.Property(e => e.RxRequired).IsFixedLength();
            entity.Property(e => e.RxReviewRequiredIndicator).IsFixedLength();
            entity.Property(e => e.RxSubstitutionsAllowed).IsFixedLength();
            entity.Property(e => e.RxSynchronizeDoseTimesIndicator).IsFixedLength();
            entity.Property(e => e.RxTpName).IsFixedLength();
            entity.Property(e => e.RxTpVersion).IsFixedLength();
        });

        modelBuilder.Entity<VvDimRxAgtIncr>(entity =>
        {
            entity.ToView("vv_DimRxAgt_INCR", "DWH");

            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.RxAdhocActiveEntry).IsFixedLength();
            entity.Property(e => e.RxAdminDoseChange).IsFixedLength();
            entity.Property(e => e.RxAgentLevelStatus).IsFixedLength();
            entity.Property(e => e.RxAgtAgentName).IsFixedLength();
            entity.Property(e => e.RxAgtChangeIndicator).IsFixedLength();
            entity.Property(e => e.RxAgtInactivateIndicator).IsFixedLength();
            entity.Property(e => e.RxAgtNotDispensedIndicator).IsFixedLength();
            entity.Property(e => e.RxAgtStatus).IsFixedLength();
            entity.Property(e => e.RxAgtTakeAsDirected).IsFixedLength();
            entity.Property(e => e.RxAgtValidEntryInd).IsFixedLength();
            entity.Property(e => e.RxAppCd).IsFixedLength();
            entity.Property(e => e.RxConcentration).IsFixedLength();
            entity.Property(e => e.RxContinueRxIndicator).IsFixedLength();
            entity.Property(e => e.RxDispenseDoseLevelIndicator).IsFixedLength();
            entity.Property(e => e.RxDispensedIndicator).IsFixedLength();
            entity.Property(e => e.RxDoseRecordIndicator).IsFixedLength();
            entity.Property(e => e.RxDoseStrength).IsFixedLength();
            entity.Property(e => e.RxImmunizationCode).IsFixedLength();
            entity.Property(e => e.RxOverrideDoseTimesIndicator).IsFixedLength();
            entity.Property(e => e.RxPrnIndicator).IsFixedLength();
            entity.Property(e => e.RxPrnRepeatIndicator).IsFixedLength();
            entity.Property(e => e.RxReason).IsFixedLength();
            entity.Property(e => e.RxRefillIndicator).IsFixedLength();
            entity.Property(e => e.RxRequired).IsFixedLength();
            entity.Property(e => e.RxReviewRequiredIndicator).IsFixedLength();
            entity.Property(e => e.RxSubstitutionsAllowed).IsFixedLength();
            entity.Property(e => e.RxSynchronizeDoseTimesIndicator).IsFixedLength();
            entity.Property(e => e.RxTpName).IsFixedLength();
            entity.Property(e => e.RxTpVersion).IsFixedLength();
        });

        modelBuilder.Entity<VvDimRxHydra>(entity =>
        {
            entity.ToView("vv_DimRxHydra", "DWH");

            entity.Property(e => e.RxHydraCalculationType).IsFixedLength();
        });

        modelBuilder.Entity<VvDimRxIncr>(entity =>
        {
            entity.ToView("vv_DimRx_INCR", "DWH");

            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.RxCompletedIndicator).IsFixedLength();
            entity.Property(e => e.RxDispensedIndicator).IsFixedLength();
            entity.Property(e => e.RxInteractionCheckingIndicator).IsFixedLength();
            entity.Property(e => e.RxNotDispensedIndicator).IsFixedLength();
            entity.Property(e => e.RxPlacerOrderNo).IsFixedLength();
            entity.Property(e => e.RxPromptTreatmentStartDateIndicator).IsFixedLength();
            entity.Property(e => e.RxReOrderCommentIndicator).IsFixedLength();
            entity.Property(e => e.RxReorderReviewIndicator).IsFixedLength();
            entity.Property(e => e.RxStatus).IsFixedLength();
            entity.Property(e => e.RxTpName).IsFixedLength();
            entity.Property(e => e.RxTpVersion).IsFixedLength();
            entity.Property(e => e.RxValidEntry).IsFixedLength();
        });

        modelBuilder.Entity<VvDimStaff>(entity =>
        {
            entity.ToView("vv_DimStaff", "DWH");
        });

        modelBuilder.Entity<VvDimStaffEnm>(entity =>
        {
            entity.ToView("vv_DimStaff_ENM", "DWH");

            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.NameCd).IsFixedLength();
            entity.Property(e => e.StkhCd).IsFixedLength();
        });

        modelBuilder.Entity<VvDimStructure>(entity =>
        {
            entity.ToView("vv_DimStructure", "DWH");

            
                
                
        });

        modelBuilder.Entity<VvDimStructureIncr>(entity =>
        {
            entity.ToView("vv_DimStructure_INCR", "DWH");

            
                
                
        });

        modelBuilder.Entity<VvDimTemplateCycle>(entity =>
        {
            entity.ToView("vv_DimTemplateCycle", "DWH");
        });

        modelBuilder.Entity<VvDimToxicityGradingCriteriaEnm>(entity =>
        {
            entity.ToView("vv_DimToxicityGradingCriteria_enm", "DWH");
        });

        modelBuilder.Entity<VvDimTreatmentDateRangeController>(entity =>
        {
            entity.ToView("vv_DimTreatmentDateRangeController", "DWH");
        });

        modelBuilder.Entity<VvDimTreatmentDateRangeControllerIncr>(entity =>
        {
            entity.ToView("vv_DimTreatmentDateRangeController_INCR", "DWH");
        });

        modelBuilder.Entity<VvDimUser>(entity =>
        {
            entity.ToView("vv_DimUser", "DWH");

            entity.Property(e => e.ProfDescription).IsFixedLength();
        });

        modelBuilder.Entity<VvDimUserDepartment>(entity =>
        {
            entity.ToView("vv_DimUserDepartment", "DWH");
        });

        modelBuilder.Entity<VvDimUserEnm>(entity =>
        {
            entity.ToView("vv_DimUser_ENM", "DWH");

            entity.Property(e => e.ProfDescription).IsFixedLength();
        });

        modelBuilder.Entity<VvDimUserMo>(entity =>
        {
            entity.ToView("vv_DimUser_MO", "DWH");

            entity.Property(e => e.CtrstkhId).IsFixedLength();
            entity.Property(e => e.DspName).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ProfDescription).IsFixedLength();
            entity.Property(e => e.UserCuid).IsFixedLength();
            entity.Property(e => e.UserFirstName).IsFixedLength();
            entity.Property(e => e.UserLastName).IsFixedLength();
        });

        modelBuilder.Entity<VvDimVisitEventDetail>(entity =>
        {
            entity.ToView("vv_DimVisitEventDetail", "DWH");

            entity.Property(e => e.EventType).IsFixedLength();
            entity.Property(e => e.LocationIndicator).IsFixedLength();
            entity.Property(e => e.PatientIndicator).IsFixedLength();
            entity.Property(e => e.ProfIndicator).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvDimVisitEventDetailIncr>(entity =>
        {
            entity.ToView("vv_DimVisitEventDetail_INCR", "DWH");

            entity.Property(e => e.EventType).IsFixedLength();
            entity.Property(e => e.LocationIndicator).IsFixedLength();
            entity.Property(e => e.PatientIndicator).IsFixedLength();
            entity.Property(e => e.ProfIndicator).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvDocumentTypes>(entity =>
        {
            entity.ToView("vv_DocumentTypes");
        });

        modelBuilder.Entity<VvDocumentTypesLng>(entity =>
        {
            entity.ToView("vv_DocumentTypesLng");
        });

        modelBuilder.Entity<VvDoseContribution>(entity =>
        {
            entity.ToView("vv_DoseContribution");

            
                
                
        });

        modelBuilder.Entity<VvDoseContribution1>(entity =>
        {
            entity.ToView("vv_DoseContribution", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvDoseCorrectionLog>(entity =>
        {
            entity.ToView("vv_DoseCorrectionLog", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvDoseLevelEnm>(entity =>
        {
            entity.ToView("vv_dose_level_enm", "DWH");
        });

        modelBuilder.Entity<VvDoseOverrideView>(entity =>
        {
            entity.ToView("vv_DoseOverrideView");
        });

        modelBuilder.Entity<VvDoseVrtnTypEnm>(entity =>
        {
            entity.ToView("vv_dose_vrtn_typ_enm", "DWH");
        });

        modelBuilder.Entity<VvDwActivityBillingModel>(entity =>
        {
            entity.ToView("vv_dwActivityBillingModel", "DWH");
        });

        modelBuilder.Entity<VvDwActivityBillingModelIncr>(entity =>
        {
            entity.ToView("vv_dwActivityBillingModel_INCR", "DWH");
        });

        modelBuilder.Entity<VvDwActivityBillingNoCaptureModel>(entity =>
        {
            entity.ToView("vv_dwActivityBillingNoCaptureModel", "DWH");
        });

        modelBuilder.Entity<VvDwActivityBillingNoCaptureModelIncr>(entity =>
        {
            entity.ToView("vv_dwActivityBillingNoCaptureModel_INCR", "DWH");
        });

        modelBuilder.Entity<VvDwActivityModel>(entity =>
        {
            entity.ToView("vv_dwActivityModel", "DWH");
        });

        modelBuilder.Entity<VvDwDateRangeControllerModel>(entity =>
        {
            entity.ToView("vv_dwDateRangeControllerModel", "DWH");
        });

        modelBuilder.Entity<VvDwDiagnosisCodeDescLng>(entity =>
        {
            entity.ToView("vv_dwDiagnosisCodeDescLng", "DWH");

            entity.Property(e => e.DiagnosisCode).IsFixedLength();
        });

        modelBuilder.Entity<VvDwDiagnosisCodeDescLngEnm>(entity =>
        {
            entity.ToView("vv_dwDiagnosisCodeDescLngEnm", "DWH");

            entity.Property(e => e.DiagnosisCode).IsFixedLength();
        });

        modelBuilder.Entity<VvDwDimPatient>(entity =>
        {
            entity.ToView("vv_dwDimPatient", "DWH");
        });

        modelBuilder.Entity<VvDwDimPatientEnm>(entity =>
        {
            entity.ToView("vv_dwDimPatient_ENM", "DWH");

            entity.Property(e => e.BirthPlace).IsFixedLength();
            entity.Property(e => e.DoNotHospitalize).IsFixedLength();
            entity.Property(e => e.DoNotResuscitate).IsFixedLength();
            entity.Property(e => e.FatherName).IsFixedLength();
            entity.Property(e => e.FeedingRestrictions).IsFixedLength();
            entity.Property(e => e.HasLivingWill).IsFixedLength();
            entity.Property(e => e.HealthCaredpoa).IsFixedLength();
            entity.Property(e => e.HospitalAddress).IsFixedLength();
            entity.Property(e => e.HospitalName).IsFixedLength();
            entity.Property(e => e.IsAutopsyRequested).IsFixedLength();
            entity.Property(e => e.IsOrganDonor).IsFixedLength();
            entity.Property(e => e.MedicationRestrictions).IsFixedLength();
            entity.Property(e => e.MotherName).IsFixedLength();
            entity.Property(e => e.PatientAddressLine1).IsFixedLength();
            entity.Property(e => e.PatientAddressLine2).IsFixedLength();
            entity.Property(e => e.PatientCitizenShip).IsFixedLength();
            entity.Property(e => e.PatientCity).IsFixedLength();
            entity.Property(e => e.PatientCountry).IsFixedLength();
            entity.Property(e => e.PatientCounty).IsFixedLength();
            entity.Property(e => e.PatientDiagnosisCode).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactFullName).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactHomePhone).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactMobilePhone).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactRelationship).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactWorkPhone).IsFixedLength();
            entity.Property(e => e.PatientFirstName).IsFixedLength();
            entity.Property(e => e.PatientHomePhone).IsFixedLength();
            entity.Property(e => e.PatientLanguage).IsFixedLength();
            entity.Property(e => e.PatientMaritalStatus).IsFixedLength();
            entity.Property(e => e.PatientMiddleName).IsFixedLength();
            entity.Property(e => e.PatientMobilePhone).IsFixedLength();
            entity.Property(e => e.PatientPagerNumber).IsFixedLength();
            entity.Property(e => e.PatientPresentEmployerName).IsFixedLength();
            entity.Property(e => e.PatientSsn).IsFixedLength();
            entity.Property(e => e.PatientWorkPhone).IsFixedLength();
            entity.Property(e => e.PostalCode).IsFixedLength();
            entity.Property(e => e.State).IsFixedLength();
            entity.Property(e => e.TreatmentRestrictions).IsFixedLength();
        });

        modelBuilder.Entity<VvDwFactPatient>(entity =>
        {
            entity.ToView("vv_dwFactPatient", "DWH");
        });

        modelBuilder.Entity<VvDwFactPatientEnm>(entity =>
        {
            entity.ToView("vv_dwFactPatient_ENM", "DWH");
        });

        modelBuilder.Entity<VvDwFactPatientEnmonly>(entity =>
        {
            entity.ToView("vv_dwFactPatient_ENMOnly", "DWH");

            entity.Property(e => e.BirthPlace).IsFixedLength();
            entity.Property(e => e.DoNotHospitalize).IsFixedLength();
            entity.Property(e => e.DoNotResuscitate).IsFixedLength();
            entity.Property(e => e.FatherName).IsFixedLength();
            entity.Property(e => e.FeedingRestrictions).IsFixedLength();
            entity.Property(e => e.HasLivingWill).IsFixedLength();
            entity.Property(e => e.HealthCaredpoa).IsFixedLength();
            entity.Property(e => e.HospitalAddress).IsFixedLength();
            entity.Property(e => e.HospitalName).IsFixedLength();
            entity.Property(e => e.IsAutopsyRequested).IsFixedLength();
            entity.Property(e => e.IsOrganDonor).IsFixedLength();
            entity.Property(e => e.MedicationRestrictions).IsFixedLength();
            entity.Property(e => e.MotherName).IsFixedLength();
            entity.Property(e => e.PatientAddressLine1).IsFixedLength();
            entity.Property(e => e.PatientAddressLine2).IsFixedLength();
            entity.Property(e => e.PatientCitizenShip).IsFixedLength();
            entity.Property(e => e.PatientCity).IsFixedLength();
            entity.Property(e => e.PatientCountry).IsFixedLength();
            entity.Property(e => e.PatientCounty).IsFixedLength();
            entity.Property(e => e.PatientDiagnosisCode).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactFullName).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactHomePhone).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactMobilePhone).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactRelationship).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactWorkPhone).IsFixedLength();
            entity.Property(e => e.PatientFirstName).IsFixedLength();
            entity.Property(e => e.PatientHomePhone).IsFixedLength();
            entity.Property(e => e.PatientLanguage).IsFixedLength();
            entity.Property(e => e.PatientMaritalStatus).IsFixedLength();
            entity.Property(e => e.PatientMiddleName).IsFixedLength();
            entity.Property(e => e.PatientMobilePhone).IsFixedLength();
            entity.Property(e => e.PatientPagerNumber).IsFixedLength();
            entity.Property(e => e.PatientPresentEmployerName).IsFixedLength();
            entity.Property(e => e.PatientSsn).IsFixedLength();
            entity.Property(e => e.PatientWorkPhone).IsFixedLength();
            entity.Property(e => e.PostalCode).IsFixedLength();
            entity.Property(e => e.State).IsFixedLength();
            entity.Property(e => e.TreatmentRestrictions).IsFixedLength();
        });

        modelBuilder.Entity<VvDwGetPatientsAllDxSite>(entity =>
        {
            entity.ToView("vv_dwGetPatientsAllDxSite", "DWH");

            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<VvDwPatientDiagnosisEnmModel>(entity =>
        {
            entity.ToView("vv_dwPatientDiagnosisEnmModel", "DWH");

            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.Behaviour).IsFixedLength();
            entity.Property(e => e.CncrStage).IsFixedLength();
            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.Gvalue).IsFixedLength();
            entity.Property(e => e.IsMeasurable).IsFixedLength();
            entity.Property(e => e.IsResectable).IsFixedLength();
            entity.Property(e => e.LesionDescription).IsFixedLength();
            entity.Property(e => e.Ranking).IsFixedLength();
            entity.Property(e => e.Rvalue).IsFixedLength();
            entity.Property(e => e.StageBasisCode).IsFixedLength();
            entity.Property(e => e.StageScheme).IsFixedLength();
            entity.Property(e => e.Stagebasis).IsFixedLength();
            entity.Property(e => e.Svalue).IsFixedLength();
        });

        modelBuilder.Entity<VvDwPatientDiagnosisEnmModelIncr>(entity =>
        {
            entity.ToView("vv_dwPatientDiagnosisEnmModel_Incr", "DWH");

            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.Behaviour).IsFixedLength();
            entity.Property(e => e.CncrStage).IsFixedLength();
            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.Gvalue).IsFixedLength();
            entity.Property(e => e.IsMeasurable).IsFixedLength();
            entity.Property(e => e.IsResectable).IsFixedLength();
            entity.Property(e => e.LesionDescription).IsFixedLength();
            entity.Property(e => e.Ranking).IsFixedLength();
            entity.Property(e => e.Rvalue).IsFixedLength();
            entity.Property(e => e.StageBasisCode).IsFixedLength();
            entity.Property(e => e.StageScheme).IsFixedLength();
            entity.Property(e => e.Stagebasis).IsFixedLength();
            entity.Property(e => e.Svalue).IsFixedLength();
        });

        modelBuilder.Entity<VvDwPatientDiagnosisEnmModelPerf>(entity =>
        {
            entity.ToView("vv_dwPatientDiagnosisEnmModel_Perf", "DWH");

            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.DiagnosisCode).IsFixedLength();
            entity.Property(e => e.DiagnosisType).IsFixedLength();
        });

        modelBuilder.Entity<VvDwPatientDiagnosisModel>(entity =>
        {
            entity.ToView("vv_dwPatientDiagnosisModel", "DWH");

            entity.Property(e => e.Behaviour).IsFixedLength();
            entity.Property(e => e.Ranking).IsFixedLength();
            entity.Property(e => e.StageScheme).IsFixedLength();
            entity.Property(e => e.Stagebasis).IsFixedLength();
        });

        modelBuilder.Entity<VvDwPatientDoctorModel>(entity =>
        {
            entity.ToView("vv_dwPatientDoctorModel", "DWH");
        });

        modelBuilder.Entity<VvDwPatientModel>(entity =>
        {
            entity.ToView("vv_dwPatientModel", "DWH");
        });

        modelBuilder.Entity<VvDwPatientModelEnm>(entity =>
        {
            entity.ToView("vv_dwPatientModel_ENM", "DWH");

            entity.Property(e => e.BirthPlace).IsFixedLength();
            entity.Property(e => e.DoNotHospitalize).IsFixedLength();
            entity.Property(e => e.DoNotResuscitate).IsFixedLength();
            entity.Property(e => e.FatherName).IsFixedLength();
            entity.Property(e => e.FeedingRestrictions).IsFixedLength();
            entity.Property(e => e.HasLivingWill).IsFixedLength();
            entity.Property(e => e.HealthCaredpoa).IsFixedLength();
            entity.Property(e => e.HospitalAddress).IsFixedLength();
            entity.Property(e => e.HospitalName).IsFixedLength();
            entity.Property(e => e.IsAutopsyRequested).IsFixedLength();
            entity.Property(e => e.IsOrganDonor).IsFixedLength();
            entity.Property(e => e.MedicationRestrictions).IsFixedLength();
            entity.Property(e => e.MotherName).IsFixedLength();
            entity.Property(e => e.PatientAddressLine1).IsFixedLength();
            entity.Property(e => e.PatientAddressLine2).IsFixedLength();
            entity.Property(e => e.PatientCitizenShip).IsFixedLength();
            entity.Property(e => e.PatientCity).IsFixedLength();
            entity.Property(e => e.PatientCountry).IsFixedLength();
            entity.Property(e => e.PatientCounty).IsFixedLength();
            entity.Property(e => e.PatientDiagnosisCode).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactFullName).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactHomePhone).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactMobilePhone).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactRelationship).IsFixedLength();
            entity.Property(e => e.PatientEmergencyContactWorkPhone).IsFixedLength();
            entity.Property(e => e.PatientFirstName).IsFixedLength();
            entity.Property(e => e.PatientHomePhone).IsFixedLength();
            entity.Property(e => e.PatientLanguage).IsFixedLength();
            entity.Property(e => e.PatientMaritalStatus).IsFixedLength();
            entity.Property(e => e.PatientMiddleName).IsFixedLength();
            entity.Property(e => e.PatientMobilePhone).IsFixedLength();
            entity.Property(e => e.PatientPagerNumber).IsFixedLength();
            entity.Property(e => e.PatientPresentEmployerName).IsFixedLength();
            entity.Property(e => e.PatientSsn).IsFixedLength();
            entity.Property(e => e.PatientWorkPhone).IsFixedLength();
            entity.Property(e => e.PostalCode).IsFixedLength();
            entity.Property(e => e.State).IsFixedLength();
            entity.Property(e => e.TreatmentRestrictions).IsFixedLength();
        });

        modelBuilder.Entity<VvDwPatientPhotoModel>(entity =>
        {
            entity.ToView("vv_dwPatientPhotoModel", "DWH");
        });

        modelBuilder.Entity<VvDwPatientUserDefinedLabelsModel>(entity =>
        {
            entity.ToView("vv_dwPatientUserDefinedLabelsModel", "DWH");
        });

        modelBuilder.Entity<VvDwResourceActivity>(entity =>
        {
            entity.ToView("vv_dwResourceActivity", "DWH");

            
                
                
        });

        modelBuilder.Entity<VvDwResourceDetails>(entity =>
        {
            entity.ToView("vv_dwResourceDetails", "DWH");
        });

        modelBuilder.Entity<VvDwResourceModel>(entity =>
        {
            entity.ToView("vv_dwResourceModel", "DWH");
        });

        modelBuilder.Entity<VvDwTreatmentDateRangeControllerModel>(entity =>
        {
            entity.ToView("vv_dwTreatmentDateRangeControllerModel", "DWH");
        });

        modelBuilder.Entity<VvEthnicity>(entity =>
        {
            entity.ToView("vv_Ethnicity");
        });

        modelBuilder.Entity<VvEthnicityLng>(entity =>
        {
            entity.ToView("vv_EthnicityLng");
        });

        modelBuilder.Entity<VvExternalField>(entity =>
        {
            entity.ToView("vv_ExternalField");
        });

        modelBuilder.Entity<VvExternalField1>(entity =>
        {
            entity.ToView("vv_ExternalField", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvExternalFieldCommon>(entity =>
        {
            entity.ToView("vv_ExternalFieldCommon");
        });

        modelBuilder.Entity<VvExternalFieldCommon1>(entity =>
        {
            entity.ToView("vv_ExternalFieldCommon", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvExternalFieldCommonHstry>(entity =>
        {
            entity.ToView("vv_ExternalFieldCommonHstry");

            entity.Property(e => e.Pfflag).IsFixedLength();
            entity.Property(e => e.Piflag).IsFixedLength();
        });

        modelBuilder.Entity<VvExternalFieldCommonHstry1>(entity =>
        {
            entity.ToView("vv_ExternalFieldCommonHstry", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvExternalFieldHstry>(entity =>
        {
            entity.ToView("vv_ExternalFieldHstry");
        });

        modelBuilder.Entity<VvExternalFieldHstry1>(entity =>
        {
            entity.ToView("vv_ExternalFieldHstry", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvFactActivityBillingMo>(entity =>
        {
            entity.ToView("vv_FactActivityBilling_MO", "DWH");

            entity.Property(e => e.AllModifierCodes).IsFixedLength();
            entity.Property(e => e.BillEventDescription).IsFixedLength();
            entity.Property(e => e.BillEventStatus).IsFixedLength();
            entity.Property(e => e.BillItemDescription).IsFixedLength();
            entity.Property(e => e.BillingInventoryId).IsFixedLength();
            entity.Property(e => e.CtrinstId).IsFixedLength();
            entity.Property(e => e.CtrndcUpcHriCd).IsFixedLength();
            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.OverrideIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactActivityBillingMoIncr>(entity =>
        {
            entity.ToView("vv_FactActivityBilling_MO_INCR", "DWH");

            entity.Property(e => e.AllModifierCodes).IsFixedLength();
            entity.Property(e => e.BillEventDescription).IsFixedLength();
            entity.Property(e => e.BillEventStatus).IsFixedLength();
            entity.Property(e => e.BillItemDescription).IsFixedLength();
            entity.Property(e => e.BillingInventoryId).IsFixedLength();
            entity.Property(e => e.CtrinstId).IsFixedLength();
            entity.Property(e => e.CtrndcUpcHriCd).IsFixedLength();
            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.OverrideIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactActivityCaptureAttribute>(entity =>
        {
            entity.ToView("vv_FactActivityCaptureAttribute", "DWH");
        });

        modelBuilder.Entity<VvFactActivityCaptureAttributeIncr>(entity =>
        {
            entity.ToView("vv_FactActivityCaptureAttribute_Incr", "DWH");
        });

        modelBuilder.Entity<VvFactBrachySourcePosition>(entity =>
        {
            entity.ToView("vv_FactBrachySourcePosition", "DWH");
        });

        modelBuilder.Entity<VvFactBrachySourcePositionIncr>(entity =>
        {
            entity.ToView("vv_FactBrachySourcePosition_INCR", "DWH");
        });

        modelBuilder.Entity<VvFactBrachyTreatment>(entity =>
        {
            entity.ToView("vv_FactBrachyTreatment", "DWH");
        });

        modelBuilder.Entity<VvFactBrachyTreatmentIncr>(entity =>
        {
            entity.ToView("vv_FactBrachyTreatment_INCR", "DWH");
        });

        modelBuilder.Entity<VvFactInVivoDosimetry>(entity =>
        {
            entity.ToView("vv_FactInVivoDosimetry", "DWH");
        });

        modelBuilder.Entity<VvFactInVivoDosimetryIncr>(entity =>
        {
            entity.ToView("vv_FactInVivoDosimetry_INCR", "DWH");
        });

        modelBuilder.Entity<VvFactPatientAllergy>(entity =>
        {
            entity.ToView("vv_FactPatientAllergy", "DWH");

            entity.Property(e => e.AllergyCode).IsFixedLength();
            entity.Property(e => e.AllergySeverityCode).IsFixedLength();
            entity.Property(e => e.AllergySeverityDescripton).IsFixedLength();
            entity.Property(e => e.AllergyTypeDesc).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactPatientAllergyIncr>(entity =>
        {
            entity.ToView("vv_FactPatientAllergy_INCR", "DWH");

            entity.Property(e => e.AllergyCode).IsFixedLength();
            entity.Property(e => e.AllergySeverityCode).IsFixedLength();
            entity.Property(e => e.AllergySeverityDescripton).IsFixedLength();
            entity.Property(e => e.AllergyTypeDesc).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactPatientExam>(entity =>
        {
            entity.ToView("vv_FactPatientExam", "DWH");
        });

        modelBuilder.Entity<VvFactPatientExamIncr>(entity =>
        {
            entity.ToView("vv_FactPatientExam_Incr", "DWH");
        });

        modelBuilder.Entity<VvFactPatientFamilyHistoryEnm>(entity =>
        {
            entity.ToView("vv_FactPatientFamilyHistory_enm", "DWH");

            entity.Property(e => e.AliveIndicator).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactPatientLabResult>(entity =>
        {
            entity.ToView("vv_FactPatientLabResult", "DWH");

            entity.Property(e => e.AlertIndicator).IsFixedLength();
            entity.Property(e => e.CancelIndicator).IsFixedLength();
            entity.Property(e => e.CollectedBy).IsFixedLength();
            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.DangerCode).IsFixedLength();
            entity.Property(e => e.DspRefRange).IsFixedLength();
            entity.Property(e => e.FacilityCategoryDescritpion).IsFixedLength();
            entity.Property(e => e.FacilityRequisitionId).IsFixedLength();
            entity.Property(e => e.OrderApprovedIndicator).IsFixedLength();
            entity.Property(e => e.PrimaryDx).IsFixedLength();
            entity.Property(e => e.ProducerStakeholderId).IsFixedLength();
            entity.Property(e => e.ResultApprovedIndicator).IsFixedLength();
            entity.Property(e => e.SentFlag).IsFixedLength();
            entity.Property(e => e.SpecimenAction).IsFixedLength();
            entity.Property(e => e.SpecimenIndicator).IsFixedLength();
            entity.Property(e => e.SpecimenSource).IsFixedLength();
            entity.Property(e => e.SpecimentCondCode).IsFixedLength();
            entity.Property(e => e.TestResultApprovedIndicator).IsFixedLength();
            entity.Property(e => e.TestResultIndicator).IsFixedLength();
            entity.Property(e => e.TestResultValidEntryIndicator).IsFixedLength();
            entity.Property(e => e.TestValidEntryIndicator).IsFixedLength();
            entity.Property(e => e.TestValueStatusCode).IsFixedLength();
        });

        modelBuilder.Entity<VvFactPatientMedicalHistoryEnm>(entity =>
        {
            entity.ToView("vv_FactPatientMedicalHistory_enm", "DWH");

            entity.Property(e => e.ActiveDiagnosisIndicator).IsFixedLength();
            entity.Property(e => e.CurrentEntryIndicator).IsFixedLength();
            entity.Property(e => e.HormoneUseIndicator).IsFixedLength();
            entity.Property(e => e.MedicalHistoryValidEntryIndicator).IsFixedLength();
            entity.Property(e => e.MpauseHormoneIndicator).IsFixedLength();
            entity.Property(e => e.OcpUseIndicator).IsFixedLength();
            entity.Property(e => e.OtherHormoneUseIndicator).IsFixedLength();
            entity.Property(e => e.TreatmentIndicator).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactPatientMedicalHistoryEnmIncr>(entity =>
        {
            entity.ToView("vv_FactPatientMedicalHistory_enm_INCR", "DWH");

            entity.Property(e => e.ActiveDiagnosisIndicator).IsFixedLength();
            entity.Property(e => e.CurrentEntryIndicator).IsFixedLength();
            entity.Property(e => e.HormoneUseIndicator).IsFixedLength();
            entity.Property(e => e.MedicalHistoryValidEntryIndicator).IsFixedLength();
            entity.Property(e => e.MpauseHormoneIndicator).IsFixedLength();
            entity.Property(e => e.OcpUseIndicator).IsFixedLength();
            entity.Property(e => e.OtherHormoneUseIndicator).IsFixedLength();
            entity.Property(e => e.TreatmentIndicator).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactPatientMedoncTreatment>(entity =>
        {
            entity.ToView("vv_FactPatientMedoncTreatment", "DWH");
        });

        modelBuilder.Entity<VvFactPatientMedoncTreatmentIncr>(entity =>
        {
            entity.ToView("vv_FactPatientMedoncTreatment_INCR", "DWH");
        });

        modelBuilder.Entity<VvFactPatientPayor>(entity =>
        {
            entity.ToView("vv_FactPatientPayor", "DWH");
        });

        modelBuilder.Entity<VvFactPatientPayorIncr>(entity =>
        {
            entity.ToView("vv_FactPatientPayor_INCR", "DWH");
        });

        modelBuilder.Entity<VvFactPatientPrescription>(entity =>
        {
            entity.ToView("vv_FactPatientPrescription", "DWH");
        });

        modelBuilder.Entity<VvFactPatientPrescriptionIncr>(entity =>
        {
            entity.ToView("vv_FactPatientPrescription_INCR", "DWH");
        });

        modelBuilder.Entity<VvFactPatientProcedureHistory>(entity =>
        {
            entity.ToView("vv_FactPatientProcedureHistory", "DWH");

            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.DateApproxIndicator).IsFixedLength();
            entity.Property(e => e.IcdCode).IsFixedLength();
            entity.Property(e => e.ProcedureValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactPatientProcedureHistoryIncr>(entity =>
        {
            entity.ToView("vv_FactPatientProcedureHistory_INCR", "DWH");

            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.DateApproxIndicator).IsFixedLength();
            entity.Property(e => e.IcdCode).IsFixedLength();
            entity.Property(e => e.ProcedureValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactPatientSocialHistoryEnm>(entity =>
        {
            entity.ToView("vv_FactPatientSocialHistory_enm", "DWH");

            entity.Property(e => e.HazardMaterialContactIndicator).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactPatientSocialHistoryEnmIncr>(entity =>
        {
            entity.ToView("vv_FactPatientSocialHistory_enm_INCR", "DWH");

            entity.Property(e => e.HazardMaterialContactIndicator).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactPatientToxicity>(entity =>
        {
            entity.ToView("vv_FactPatientToxicity", "DWH");

            entity.Property(e => e.AdverseEventsIndicator).IsFixedLength();
            entity.Property(e => e.CorrectedEntryIndicator).IsFixedLength();
            entity.Property(e => e.ToxicityApprovedIndicator).IsFixedLength();
            entity.Property(e => e.ToxicityHeaderValidEntryIndicator).IsFixedLength();
            entity.Property(e => e.ToxicityReviewRequestIndicator).IsFixedLength();
            entity.Property(e => e.ToxicityReviewedIndicator).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactPatientToxicityIncr>(entity =>
        {
            entity.ToView("vv_FactPatientToxicity_Incr", "DWH");

            entity.Property(e => e.AdverseEventsIndicator).IsFixedLength();
            entity.Property(e => e.CorrectedEntryIndicator).IsFixedLength();
            entity.Property(e => e.ToxicityApprovedIndicator).IsFixedLength();
            entity.Property(e => e.ToxicityHeaderValidEntryIndicator).IsFixedLength();
            entity.Property(e => e.ToxicityReviewRequestIndicator).IsFixedLength();
            entity.Property(e => e.ToxicityReviewedIndicator).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactPhysicianOrder>(entity =>
        {
            entity.ToView("vv_FactPhysicianOrder", "DWH");

            entity.Property(e => e.AppliedIndicator).IsFixedLength();
            entity.Property(e => e.ApprovedOnFileIndicator).IsFixedLength();
            entity.Property(e => e.CancelEntryIndicator).IsFixedLength();
            entity.Property(e => e.CompletedIndicator).IsFixedLength();
            entity.Property(e => e.GeneratedIndicator).IsFixedLength();
            entity.Property(e => e.PlacerOrderNumber).IsFixedLength();
            entity.Property(e => e.PlanAffectIndicator).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RecurringIndicator).IsFixedLength();
            entity.Property(e => e.VerbalOrderValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactPhysicianOrderIncr>(entity =>
        {
            entity.ToView("vv_FactPhysicianOrder_INCR", "DWH");

            entity.Property(e => e.AppliedIndicator).IsFixedLength();
            entity.Property(e => e.ApprovedOnFileIndicator).IsFixedLength();
            entity.Property(e => e.CancelEntryIndicator).IsFixedLength();
            entity.Property(e => e.CompletedIndicator).IsFixedLength();
            entity.Property(e => e.GeneratedIndicator).IsFixedLength();
            entity.Property(e => e.PlacerOrderNumber).IsFixedLength();
            entity.Property(e => e.PlanAffectIndicator).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RecurringIndicator).IsFixedLength();
            entity.Property(e => e.VerbalOrderValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactQuestionnaires>(entity =>
        {
            entity.ToView("vv_FactQuestionnaires", "DWH");

            entity.Property(e => e.ResponseHeaderValidEntryIndicator).IsFixedLength();
            entity.Property(e => e.ResponseValidEntryIndicator).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
        });

        modelBuilder.Entity<VvFactQuestionnairesIncr>(entity =>
        {
            entity.ToView("vv_FactQuestionnaires_INCR", "DWH");

            entity.Property(e => e.ResponseHeaderValidEntryIndicator).IsFixedLength();
            entity.Property(e => e.ResponseValidEntryIndicator).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
        });

        modelBuilder.Entity<VvFactRxAdminAgtLevel>(entity =>
        {
            entity.ToView("vv_FactRxAdminAgtLevel", "DWH");

            entity.Property(e => e.RxAdminAgtValidEntry).IsFixedLength();
        });

        modelBuilder.Entity<VvFactRxAdminAgtLevelIncr>(entity =>
        {
            entity.ToView("vv_FactRxAdminAgtLevel_INCR", "DWH");

            entity.Property(e => e.RxAdminAgtValidEntry).IsFixedLength();
        });

        modelBuilder.Entity<VvFactRxAdminDetail>(entity =>
        {
            entity.ToView("vv_FactRxAdminDetail", "DWH");

            entity.Property(e => e.RxAdminDetailValidEntry).IsFixedLength();
        });

        modelBuilder.Entity<VvFactRxAdminDetailIncr>(entity =>
        {
            entity.ToView("vv_FactRxAdminDetail_INCR", "DWH");

            entity.Property(e => e.RxAdminDetailValidEntry).IsFixedLength();
        });

        modelBuilder.Entity<VvFactRxDispSyringe>(entity =>
        {
            entity.ToView("vv_FactRxDispSyringe", "DWH");
        });

        modelBuilder.Entity<VvFactRxDispSyringeIncr>(entity =>
        {
            entity.ToView("vv_FactRxDispSyringe_INCR", "DWH");
        });

        modelBuilder.Entity<VvFactRxDispensary>(entity =>
        {
            entity.ToView("vv_FactRxDispensary", "DWH");

            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.RxDispAgentName).IsFixedLength();
            entity.Property(e => e.RxDispApproved).IsFixedLength();
            entity.Property(e => e.RxDispByInstId).IsFixedLength();
            entity.Property(e => e.RxDispChangeIndicator).IsFixedLength();
            entity.Property(e => e.RxDispComment).IsFixedLength();
            entity.Property(e => e.RxDispConcentration).IsFixedLength();
            entity.Property(e => e.RxDispCustomSyringeIndicator).IsFixedLength();
            entity.Property(e => e.RxDispDoseStrength).IsFixedLength();
            entity.Property(e => e.RxDispEnteredByInstId).IsFixedLength();
            entity.Property(e => e.RxDispFormularyChecked).IsFixedLength();
            entity.Property(e => e.RxDispHydraOverriddenByInstId).IsFixedLength();
            entity.Property(e => e.RxDispLastModifiedByInstId).IsFixedLength();
            entity.Property(e => e.RxDispNotDispensedIndicator).IsFixedLength();
            entity.Property(e => e.RxDispPlacerOrderNo).IsFixedLength();
            entity.Property(e => e.RxDispReviewIndicator).IsFixedLength();
            entity.Property(e => e.RxDispValidEntry).IsFixedLength();
        });

        modelBuilder.Entity<VvFactRxDispensaryIncr>(entity =>
        {
            entity.ToView("vv_FactRxDispensary_INCR", "DWH");

            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.RxDispAgentName).IsFixedLength();
            entity.Property(e => e.RxDispApproved).IsFixedLength();
            entity.Property(e => e.RxDispByInstId).IsFixedLength();
            entity.Property(e => e.RxDispChangeIndicator).IsFixedLength();
            entity.Property(e => e.RxDispComment).IsFixedLength();
            entity.Property(e => e.RxDispConcentration).IsFixedLength();
            entity.Property(e => e.RxDispCustomSyringeIndicator).IsFixedLength();
            entity.Property(e => e.RxDispDoseStrength).IsFixedLength();
            entity.Property(e => e.RxDispEnteredByInstId).IsFixedLength();
            entity.Property(e => e.RxDispFormularyChecked).IsFixedLength();
            entity.Property(e => e.RxDispHydraOverriddenByInstId).IsFixedLength();
            entity.Property(e => e.RxDispLastModifiedByInstId).IsFixedLength();
            entity.Property(e => e.RxDispNotDispensedIndicator).IsFixedLength();
            entity.Property(e => e.RxDispPlacerOrderNo).IsFixedLength();
            entity.Property(e => e.RxDispReviewIndicator).IsFixedLength();
            entity.Property(e => e.RxDispValidEntry).IsFixedLength();
        });

        modelBuilder.Entity<VvFactVisitNotes>(entity =>
        {
            entity.ToView("vv_FactVisitNotes", "DWH");

            entity.Property(e => e.ApprovedFlag).IsFixedLength();
            entity.Property(e => e.CompletedIndicator).IsFixedLength();
            entity.Property(e => e.DictatedFlag).IsFixedLength();
            entity.Property(e => e.DisciplineType).IsFixedLength();
            entity.Property(e => e.GeneratedIndicator).IsFixedLength();
            entity.Property(e => e.OverrideTxt).IsFixedLength();
            entity.Property(e => e.PrivateIndicator).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RemAttachedIndicator).IsFixedLength();
            entity.Property(e => e.TemplateName).IsFixedLength();
            entity.Property(e => e.ValidIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFactVisitNotesIncr>(entity =>
        {
            entity.ToView("vv_FactVisitNotes_INCR", "DWH");

            entity.Property(e => e.ApprovedFlag).IsFixedLength();
            entity.Property(e => e.CompletedIndicator).IsFixedLength();
            entity.Property(e => e.DictatedFlag).IsFixedLength();
            entity.Property(e => e.DisciplineType).IsFixedLength();
            entity.Property(e => e.GeneratedIndicator).IsFixedLength();
            entity.Property(e => e.OverrideTxt).IsFixedLength();
            entity.Property(e => e.PrivateIndicator).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.RemAttachedIndicator).IsFixedLength();
            entity.Property(e => e.TemplateName).IsFixedLength();
            entity.Property(e => e.ValidIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvFieldAddOn>(entity =>
        {
            entity.ToView("vv_FieldAddOn", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvFieldProton>(entity =>
        {
            entity.ToView("vv_FieldProton", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvFlatPatientDiagnosisSite>(entity =>
        {
            entity.ToView("vv_FlatPatientDiagnosisSite", "DWH");

            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<VvFlatPatientDiagnosisSiteIncr>(entity =>
        {
            entity.ToView("vv_FlatPatientDiagnosisSite_INCR", "DWH");

            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<VvGblUnitDoseConfig>(entity =>
        {
            entity.ToView("vv_GblUnitDoseConfig", "DWH");
        });

        modelBuilder.Entity<VvGetActivityDetails>(entity =>
        {
            entity.ToView("vv_GetActivityDetails", "DWH");
        });

        modelBuilder.Entity<VvGetAppointmentTaskDates>(entity =>
        {
            entity.ToView("vv_GetAppointmentTaskDates", "DWH");
        });

        modelBuilder.Entity<VvGetChartQatreatment>(entity =>
        {
            entity.ToView("vv_GetChartQATreatment", "DWH");
        });

        modelBuilder.Entity<VvGetEnumNlslookupStrings>(entity =>
        {
            entity.ToView("vv_GetEnumNLSLookupStrings", "DWH");
        });

        modelBuilder.Entity<VvGetLatestApproval>(entity =>
        {
            entity.ToView("vv_GetLatestApproval", "DWH");

            entity.Property(e => e.ApprovalSer).ValueGeneratedOnAdd();
            
                
                
        });

        modelBuilder.Entity<VvGetMachineDelayStatus>(entity =>
        {
            entity.ToView("vv_GetMachineDelayStatus", "DWH");

            entity.Property(e => e.Sex).IsFixedLength();
        });

        modelBuilder.Entity<VvGetPatientPrimaryOncologistDetails>(entity =>
        {
            entity.ToView("vv_GetPatientPrimaryOncologistDetails", "DWH");
        });

        modelBuilder.Entity<VvGetPatientPrimaryReferringPhysicianDetails>(entity =>
        {
            entity.ToView("vv_GetPatientPrimaryReferringPhysicianDetails", "DWH");
        });

        modelBuilder.Entity<VvGetPatientWaitTimeData>(entity =>
        {
            entity.ToView("vv_GetPatientWaitTimeData", "DWH");
        });

        modelBuilder.Entity<VvGetPredecessorAndCurrentActivityStatus>(entity =>
        {
            entity.ToView("vv_GetPredecessorAndCurrentActivityStatus", "DWH");
        });

        modelBuilder.Entity<VvGetPredecessorAndCurrentActivityStatus14days>(entity =>
        {
            entity.ToView("vv_GetPredecessorAndCurrentActivityStatus_14Days", "DWH");
        });

        modelBuilder.Entity<VvGetPrimaryOncologist>(entity =>
        {
            entity.ToView("vv_GetPrimaryOncologist", "DWH");
        });

        modelBuilder.Entity<VvGetPrimaryOncologist14days>(entity =>
        {
            entity.ToView("vv_GetPrimaryOncologist_14Days", "DWH");
        });

        modelBuilder.Entity<VvGetPrimaryOncologistDosimetry>(entity =>
        {
            entity.ToView("vv_GetPrimaryOncologist_Dosimetry", "DWH");
        });

        modelBuilder.Entity<VvHistologyCodeDesc>(entity =>
        {
            entity.ToView("vv_HistologyCodeDesc");
        });

        modelBuilder.Entity<VvHistologyCodeDescLng>(entity =>
        {
            entity.ToView("vv_HistologyCodeDescLng");
        });

        modelBuilder.Entity<VvHistologyTableStandard>(entity =>
        {
            entity.ToView("vv_HistologyTableStandard");
        });

        modelBuilder.Entity<VvHistologyTableStandardLng>(entity =>
        {
            entity.ToView("vv_HistologyTableStandardLng");
        });

        modelBuilder.Entity<VvHowRecordedEnm>(entity =>
        {
            entity.ToView("vv_how_recorded_enm", "DWH");
        });

        modelBuilder.Entity<VvImage>(entity =>
        {
            entity.ToView("vv_Image");

            entity.Property(e => e.DisplayTransformation).IsFixedLength();
            
                
                
            entity.Property(e => e.Transformation).IsFixedLength();
            entity.Property(e => e.UserOrigin).IsFixedLength();
            entity.Property(e => e.VolumeTransformation).IsFixedLength();
        });

        modelBuilder.Entity<VvImageRadiation>(entity =>
        {
            entity.ToView("vv_ImageRadiation");
        });

        modelBuilder.Entity<VvInSightiveWaitTimeHospitalDepartment>(entity =>
        {
            entity.ToView("vv_InSightive_WaitTimeHospitalDepartment", "DWH");
        });

        modelBuilder.Entity<VvInfusionTypEnm>(entity =>
        {
            entity.ToView("vv_infusion_typ_enm", "DWH");
        });

        modelBuilder.Entity<VvInstituteDepartmentEnm>(entity =>
        {
            entity.ToView("vv_InstituteDepartment_enm", "DWH");

            entity.Property(e => e.DepartmentName).IsFixedLength();
            entity.Property(e => e.HospitalName).IsFixedLength();
            entity.Property(e => e.HospitalTelephoneExtension).IsFixedLength();
        });

        modelBuilder.Entity<VvLatestApproval>(entity =>
        {
            entity.ToView("vv_LatestApproval");

            entity.Property(e => e.ApprovalSer).ValueGeneratedOnAdd();
            
                
                
        });

        modelBuilder.Entity<VvLookupCdCultureEnm>(entity =>
        {
            entity.ToView("vv_lookup_cd_culture_enm", "DWH");
        });

        modelBuilder.Entity<VvLookupTypCultureEnm>(entity =>
        {
            entity.ToView("vv_lookup_typ_culture_enm", "DWH");
        });

        modelBuilder.Entity<VvMachineType>(entity =>
        {
            entity.ToView("vv_MachineType");
        });

        modelBuilder.Entity<VvMachineTypeLng>(entity =>
        {
            entity.ToView("vv_MachineTypeLng");
        });

        modelBuilder.Entity<VvMaritalStatus>(entity =>
        {
            entity.ToView("vv_MaritalStatus");
        });

        modelBuilder.Entity<VvMaritalStatusLng>(entity =>
        {
            entity.ToView("vv_MaritalStatusLng");
        });

        modelBuilder.Entity<VvMlcplan>(entity =>
        {
            entity.ToView("vv_MLCPlan", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvNonScheduledActivity>(entity =>
        {
            entity.ToView("vv_NonScheduledActivity");
        });

        modelBuilder.Entity<VvNonScheduledActivityActive>(entity =>
        {
            entity.ToView("vv_NonScheduledActivityActive");

            
                
                
        });

        modelBuilder.Entity<VvNonScheduledActivityLng>(entity =>
        {
            entity.ToView("vv_NonScheduledActivityLng");
        });

        modelBuilder.Entity<VvObjectStatus>(entity =>
        {
            entity.ToView("vv_ObjectStatus");
        });

        modelBuilder.Entity<VvObjectStatusLng>(entity =>
        {
            entity.ToView("vv_ObjectStatusLng");
        });

        modelBuilder.Entity<VvOpLimit>(entity =>
        {
            entity.ToView("vv_OpLimit");
        });

        modelBuilder.Entity<VvOpLimitLng>(entity =>
        {
            entity.ToView("vv_OpLimitLng");
        });

        modelBuilder.Entity<VvOpLimitParameterName>(entity =>
        {
            entity.ToView("vv_OpLimitParameterName");
        });

        modelBuilder.Entity<VvOpLimitParameterNameLng>(entity =>
        {
            entity.ToView("vv_OpLimitParameterNameLng");
        });

        modelBuilder.Entity<VvOperationStatus>(entity =>
        {
            entity.ToView("vv_OperationStatus");
        });

        modelBuilder.Entity<VvOperationStatusLng>(entity =>
        {
            entity.ToView("vv_OperationStatusLng");
        });

        modelBuilder.Entity<VvPatient>(entity =>
        {
            entity.ToView("vv_Patient", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvPatientDepartmentbyCuid>(entity =>
        {
            entity.ToView("vv_PatientDepartmentbyCUID");
        });

        modelBuilder.Entity<VvPatientDoctor>(entity =>
        {
            entity.ToView("vv_PatientDoctor");
        });

        modelBuilder.Entity<VvPatientNote>(entity =>
        {
            entity.ToView("vv_PatientNote");
        });

        modelBuilder.Entity<VvPatientNote1>(entity =>
        {
            entity.ToView("vv_PatientNote", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvPatientNoteLng>(entity =>
        {
            entity.ToView("vv_PatientNoteLng");
        });

        modelBuilder.Entity<VvPatientPayorInfo>(entity =>
        {
            entity.ToView("vv_PatientPayorInfo");
        });

        modelBuilder.Entity<VvPatientPerformanceStatus>(entity =>
        {
            entity.ToView("vv_PatientPerformanceStatus", "DWH");

            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.ApprInd).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<VvPatientStatus>(entity =>
        {
            entity.ToView("vv_PatientStatus");
        });

        modelBuilder.Entity<VvPatientStatusLng>(entity =>
        {
            entity.ToView("vv_PatientStatusLng");
        });

        modelBuilder.Entity<VvPatientType>(entity =>
        {
            entity.ToView("vv_PatientType");
        });

        modelBuilder.Entity<VvPatientTypeLng>(entity =>
        {
            entity.ToView("vv_PatientTypeLng");
        });

        modelBuilder.Entity<VvPatientWaitTimeInSightive>(entity =>
        {
            entity.ToView("vv_PatientWaitTime_InSightive", "DWH");
        });

        modelBuilder.Entity<VvPimodel>(entity =>
        {
            entity.ToView("vv_PIModel");
        });

        modelBuilder.Entity<VvPimodelLng>(entity =>
        {
            entity.ToView("vv_PIModelLng");
        });

        modelBuilder.Entity<VvPlanRelationship>(entity =>
        {
            entity.ToView("vv_PlanRelationship", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvPlanSetup>(entity =>
        {
            entity.ToView("vv_PlanSetup");

            
                
                
            entity.Property(e => e.ViewingPlane).IsFixedLength();
            entity.Property(e => e.ViewingPlaneLrcorner).IsFixedLength();
            entity.Property(e => e.ViewingPlaneUlcorner).IsFixedLength();
        });

        modelBuilder.Entity<VvPlanSetup1>(entity =>
        {
            entity.ToView("vv_PlanSetup", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvPortalImages>(entity =>
        {
            entity.ToView("vv_PortalImages");
        });

        modelBuilder.Entity<VvPrmryDiagnosisWithStages>(entity =>
        {
            entity.ToView("vv_PrmryDiagnosisWithStages");
        });

        modelBuilder.Entity<VvProcedureItem>(entity =>
        {
            entity.ToView("vv_ProcedureItem");
        });

        modelBuilder.Entity<VvProcedureItemLng>(entity =>
        {
            entity.ToView("vv_ProcedureItemLng");
        });

        modelBuilder.Entity<VvPrtyOfSrvEnm>(entity =>
        {
            entity.ToView("vv_prty_of_srv_enm", "DWH");
        });

        modelBuilder.Entity<VvPtInstKey>(entity =>
        {
            entity.ToView("vv_PtInstKey", "DWH");

            entity.Property(e => e.CtrinstId).IsFixedLength();
            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.CurrentValueIndicator).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvPtInstKeyIncr>(entity =>
        {
            entity.ToView("vv_PtInstKey_INCR", "DWH");

            entity.Property(e => e.CtrinstId).IsFixedLength();
            entity.Property(e => e.CtrptId).IsFixedLength();
            entity.Property(e => e.CurrentValueIndicator).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvPtQmresults>(entity =>
        {
            entity.ToView("vv_PtQMResults");

            entity.Property(e => e.DenominatorInd).IsFixedLength();
            entity.Property(e => e.EpisodeOfCareInd).IsFixedLength();
            entity.Property(e => e.NumeratorInd).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
        });

        modelBuilder.Entity<VvQmQmCriteria>(entity =>
        {
            entity.ToView("vv_Qm_QmCriteria");
        });

        modelBuilder.Entity<VvRace>(entity =>
        {
            entity.ToView("vv_Race");
        });

        modelBuilder.Entity<VvRaceLng>(entity =>
        {
            entity.ToView("vv_RaceLng");
        });

        modelBuilder.Entity<VvRadiation>(entity =>
        {
            entity.ToView("vv_Radiation");

            
                
                
        });

        modelBuilder.Entity<VvRadiation1>(entity =>
        {
            entity.ToView("vv_Radiation", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvRadiationHstry>(entity =>
        {
            entity.ToView("vv_RadiationHstry");

            
                
                
        });

        modelBuilder.Entity<VvRadiationHstry1>(entity =>
        {
            entity.ToView("vv_RadiationHstry", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvRadiationRefPoint>(entity =>
        {
            entity.ToView("vv_RadiationRefPoint");

            
                
                
        });

        modelBuilder.Entity<VvRadiationRefPoint1>(entity =>
        {
            entity.ToView("vv_RadiationRefPoint", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvRefIndex>(entity =>
        {
            entity.ToView("vv_RefIndex");
        });

        modelBuilder.Entity<VvRefPoint>(entity =>
        {
            entity.ToView("vv_RefPoint");

            
                
                
        });

        modelBuilder.Entity<VvRefPoint1>(entity =>
        {
            entity.ToView("vv_RefPoint", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvRefPointLog>(entity =>
        {
            entity.ToView("vv_RefPointLog", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvReferenceImages>(entity =>
        {
            entity.ToView("vv_ReferenceImages");
        });

        modelBuilder.Entity<VvReligion>(entity =>
        {
            entity.ToView("vv_Religion");
        });

        modelBuilder.Entity<VvReligionLng>(entity =>
        {
            entity.ToView("vv_ReligionLng");
        });

        modelBuilder.Entity<VvResource>(entity =>
        {
            entity.ToView("vv_Resource", "DWH");
        });

        modelBuilder.Entity<VvResourceGroup>(entity =>
        {
            entity.ToView("vv_ResourceGroup");
        });

        modelBuilder.Entity<VvResourceGroupLng>(entity =>
        {
            entity.ToView("vv_ResourceGroupLng");
        });

        modelBuilder.Entity<VvResourceName>(entity =>
        {
            entity.ToView("vv_ResourceName");
        });

        modelBuilder.Entity<VvResourceType>(entity =>
        {
            entity.ToView("vv_ResourceType");
        });

        modelBuilder.Entity<VvResourceTypeLng>(entity =>
        {
            entity.ToView("vv_ResourceTypeLng");
        });

        modelBuilder.Entity<VvRpTfhCourse>(entity =>
        {
            entity.ToView("vv_rpTfhCourse");
        });

        modelBuilder.Entity<VvRtplan>(entity =>
        {
            entity.ToView("vv_RTPlan");

            
                
                
        });

        modelBuilder.Entity<VvRtplan1>(entity =>
        {
            entity.ToView("vv_RTPlan", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvScheduledActivity>(entity =>
        {
            entity.ToView("vv_ScheduledActivity");
        });

        modelBuilder.Entity<VvScheduledActivityActive>(entity =>
        {
            entity.ToView("vv_ScheduledActivityActive");

            
                
                
        });

        modelBuilder.Entity<VvScheduledActivityLng>(entity =>
        {
            entity.ToView("vv_ScheduledActivityLng");
        });

        modelBuilder.Entity<VvSeries>(entity =>
        {
            entity.ToView("vv_Series");

            
                
                
        });

        modelBuilder.Entity<VvSession>(entity =>
        {
            entity.ToView("vv_Session");

            
                
                
        });

        modelBuilder.Entity<VvSessionProcedure>(entity =>
        {
            entity.ToView("vv_SessionProcedure");

            
                
                
        });

        modelBuilder.Entity<VvSessionProcedure1>(entity =>
        {
            entity.ToView("vv_SessionProcedure", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvSessionProcedurePart>(entity =>
        {
            entity.ToView("vv_SessionProcedurePart");

            
                
                
        });

        modelBuilder.Entity<VvSessionRtplan>(entity =>
        {
            entity.ToView("vv_SessionRTPlan");

            
                
                
        });

        modelBuilder.Entity<VvSessionRtplan1>(entity =>
        {
            entity.ToView("vv_SessionRTPlan", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvSessionStatus>(entity =>
        {
            entity.ToView("vv_SessionStatus");
        });

        modelBuilder.Entity<VvSessionStatusLng>(entity =>
        {
            entity.ToView("vv_SessionStatusLng");
        });

        modelBuilder.Entity<VvSex>(entity =>
        {
            entity.ToView("vv_Sex");
        });

        modelBuilder.Entity<VvSexLng>(entity =>
        {
            entity.ToView("vv_SexLng");
        });

        modelBuilder.Entity<VvSlice>(entity =>
        {
            entity.ToView("vv_Slice");

            
                
                
            entity.Property(e => e.Transformation).IsFixedLength();
        });

        modelBuilder.Entity<VvSlot>(entity =>
        {
            entity.ToView("vv_Slot");
        });

        modelBuilder.Entity<VvSlotLng>(entity =>
        {
            entity.ToView("vv_SlotLng");
        });

        modelBuilder.Entity<VvSmokingStatus>(entity =>
        {
            entity.ToView("vv_SmokingStatus");
        });

        modelBuilder.Entity<VvSmokingStatusLng>(entity =>
        {
            entity.ToView("vv_SmokingStatusLng");
        });

        modelBuilder.Entity<VvSourcePosition>(entity =>
        {
            entity.ToView("vv_SourcePosition", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvSpatialRegistration>(entity =>
        {
            entity.ToView("vv_SpatialRegistration");

            
                
                
            entity.Property(e => e.Transformation).IsFixedLength();
        });

        modelBuilder.Entity<VvSpatialRegistrationImage>(entity =>
        {
            entity.ToView("vv_SpatialRegistrationImage");

            
                
                
            entity.Property(e => e.Transformation).IsFixedLength();
        });

        modelBuilder.Entity<VvSpatialRegistrationIod>(entity =>
        {
            entity.ToView("vv_SpatialRegistrationIOD");

            
                
                
        });

        modelBuilder.Entity<VvSsisGetDimAddon>(entity =>
        {
            entity.ToView("vv_ssis_GetDimAddon", "DWH");
        });

        modelBuilder.Entity<VvStageDefCultureEnm>(entity =>
        {
            entity.ToView("vv_stage_def_culture_enm", "DWH");
        });

        modelBuilder.Entity<VvStatusTypCultureEnm>(entity =>
        {
            entity.ToView("vv_status_typ_culture_enm", "DWH");
        });

        modelBuilder.Entity<VvStkhKey>(entity =>
        {
            entity.ToView("vv_StkhKey", "DWH");

            entity.Property(e => e.ActiveIndicator).IsFixedLength();
            entity.Property(e => e.CtrstkhId).IsFixedLength();
            entity.Property(e => e.CurrentValueIndicator).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.InstLabel).IsFixedLength();
            entity.Property(e => e.KeyValue).IsFixedLength();
            entity.Property(e => e.ValidEntryIndicator).IsFixedLength();
        });

        modelBuilder.Entity<VvStkhProfTypeEnm>(entity =>
        {
            entity.ToView("vv_StkhProfType_enm", "DWH");
        });

        modelBuilder.Entity<VvStkhRoleTypeEnm>(entity =>
        {
            entity.ToView("vv_StkhRoleType_enm", "DWH");
        });

        modelBuilder.Entity<VvStudy>(entity =>
        {
            entity.ToView("vv_Study");

            
                
                
        });

        modelBuilder.Entity<VvSyActiveImagingSession>(entity =>
        {
            entity.ToView("vv_syActiveImagingSession");
        });

        modelBuilder.Entity<VvSyActiveSession>(entity =>
        {
            entity.ToView("vv_syActiveSession");
        });

        modelBuilder.Entity<VvSyCategory>(entity =>
        {
            entity.ToView("vv_syCategory", "CareEventPrivate");
        });

        modelBuilder.Entity<VvSyDcmallObjects>(entity =>
        {
            entity.ToView("vv_syDCMAllObjects", "QRPrivate");
        });

        modelBuilder.Entity<VvSyDcmdoseMatrix>(entity =>
        {
            entity.ToView("vv_syDCMDoseMatrix", "QRPrivate");
        });

        modelBuilder.Entity<VvSyDcmmotionManagement>(entity =>
        {
            entity.ToView("vv_syDCMMotionManagement", "QRPrivate");
        });

        modelBuilder.Entity<VvSyDcmrtplan>(entity =>
        {
            entity.ToView("vv_syDCMRTPlan", "QRPrivate");
        });

        modelBuilder.Entity<VvSyDcmslice>(entity =>
        {
            entity.ToView("vv_syDCMSlice", "QRPrivate");
        });

        modelBuilder.Entity<VvSyDcmspatialRegistration>(entity =>
        {
            entity.ToView("vv_syDCMSpatialRegistration", "QRPrivate");
        });

        modelBuilder.Entity<VvSyDcmstructureSet>(entity =>
        {
            entity.ToView("vv_syDCMStructureSet", "QRPrivate");
        });

        modelBuilder.Entity<VvSyDcmtreatmentRecord>(entity =>
        {
            entity.ToView("vv_syDCMTreatmentRecord", "QRPrivate");
        });

        modelBuilder.Entity<VvSyDoseFiguresApp>(entity =>
        {
            entity.ToView("vv_syDoseFiguresApp");
        });

        modelBuilder.Entity<VvSyDoseFiguresAppSum>(entity =>
        {
            entity.ToView("vv_syDoseFiguresAppSum");
        });

        modelBuilder.Entity<VvSyExternalFieldHstryAddOn>(entity =>
        {
            entity.ToView("vv_syExternalFieldHstryAddOn");
        });

        modelBuilder.Entity<VvSyFieldMu>(entity =>
        {
            entity.ToView("vv_syFieldMU");
        });

        modelBuilder.Entity<VvSyFieldMunative>(entity =>
        {
            entity.ToView("vv_syFieldMUNative");
        });

        modelBuilder.Entity<VvSyLastTreatedImagedSession>(entity =>
        {
            entity.ToView("vv_syLastTreatedImagedSession");
        });

        modelBuilder.Entity<VvSyLastTreatedSession>(entity =>
        {
            entity.ToView("vv_syLastTreatedSession");
        });

        modelBuilder.Entity<VvSyLockingInformation>(entity =>
        {
            entity.ToView("vv_syLockingInformation", "VMSService");

            entity.Property(e => e.Description).IsFixedLength();
        });

        modelBuilder.Entity<VvSyObjectCat>(entity =>
        {
            entity.ToView("vv_syObjectCat", "CareEventPrivate");
        });

        modelBuilder.Entity<VvSyObjectPermissions>(entity =>
        {
            entity.ToView("vv_syObjectPermissions", "VMSService");

            entity.Property(e => e.PermissionName).UseCollation("Latin1_General_CI_AS_KS_WS");
        });

        modelBuilder.Entity<VvSyObjectType>(entity =>
        {
            entity.ToView("vv_syObjectType", "CareEventPrivate");
        });

        modelBuilder.Entity<VvSyPatientRtstatusCbct>(entity =>
        {
            entity.ToView("vv_syPatientRTStatusCBCT");
        });

        modelBuilder.Entity<VvSyPatientRtstatusCourses>(entity =>
        {
            entity.ToView("vv_syPatientRTStatusCourses");
        });

        modelBuilder.Entity<VvSyPatientRtstatusImages>(entity =>
        {
            entity.ToView("vv_syPatientRTStatusImages");
        });

        modelBuilder.Entity<VvSyPatientRtstatusPlans>(entity =>
        {
            entity.ToView("vv_syPatientRTStatusPlans");
        });

        modelBuilder.Entity<VvSyPatientRtstatusTrackings>(entity =>
        {
            entity.ToView("vv_syPatientRTStatusTrackings");
        });

        modelBuilder.Entity<VvSyPredecessorPlanRelationship>(entity =>
        {
            entity.ToView("vv_syPredecessorPlanRelationship");
        });

        modelBuilder.Entity<VvSySessionProcedureRtplan>(entity =>
        {
            entity.ToView("vv_sySessionProcedureRTPlan");
        });

        modelBuilder.Entity<VvSySessionsWithScheduledPlans>(entity =>
        {
            entity.ToView("vv_sySessionsWithScheduledPlans");
        });

        modelBuilder.Entity<VvSyTfhfull>(entity =>
        {
            entity.ToView("vv_syTFHFull");

            
                
                
            entity.Property(e => e.Pfflag).IsFixedLength();
            entity.Property(e => e.Piflag).IsFixedLength();
        });

        modelBuilder.Entity<VvSyTrtevents>(entity =>
        {
            entity.ToView("vv_syTRTEvents");
        });

        modelBuilder.Entity<VvSyTrteventsCorrelated>(entity =>
        {
            entity.ToView("vv_syTRTEventsCorrelated");
        });

        modelBuilder.Entity<VvSyTrthistoryRecords>(entity =>
        {
            entity.ToView("vv_syTRTHistoryRecords");
        });

        modelBuilder.Entity<VvSyTrthistoryRecordsDose>(entity =>
        {
            entity.ToView("vv_syTRTHistoryRecordsDose");
        });

        modelBuilder.Entity<VvSyVerificationPlanRelationship>(entity =>
        {
            entity.ToView("vv_syVerificationPlanRelationship");
        });

        modelBuilder.Entity<VvTechnique>(entity =>
        {
            entity.ToView("vv_Technique");
        });

        modelBuilder.Entity<VvTechniqueLng>(entity =>
        {
            entity.ToView("vv_TechniqueLng");
        });

        modelBuilder.Entity<VvTemplate>(entity =>
        {
            entity.ToView("vv_Template");

            
                
                
        });

        modelBuilder.Entity<VvTemplateCycle>(entity =>
        {
            entity.ToView("vv_TemplateCycle");

            
                
                
        });

        modelBuilder.Entity<VvTestRequestTypEnm>(entity =>
        {
            entity.ToView("vv_test_request_typ_enm", "DWH");
        });

        modelBuilder.Entity<VvToxicMaterialType>(entity =>
        {
            entity.ToView("vv_ToxicMaterialType");
        });

        modelBuilder.Entity<VvToxicMaterialTypeLng>(entity =>
        {
            entity.ToView("vv_ToxicMaterialTypeLng");
        });

        modelBuilder.Entity<VvToxicUsageType>(entity =>
        {
            entity.ToView("vv_ToxicUsageType");
        });

        modelBuilder.Entity<VvToxicUsageTypeLng>(entity =>
        {
            entity.ToView("vv_ToxicUsageTypeLng");
        });

        modelBuilder.Entity<VvTpClsValueEnm>(entity =>
        {
            entity.ToView("vv_tp_cls_value_enm", "DWH");
        });

        modelBuilder.Entity<VvTreatmentRecord>(entity =>
        {
            entity.ToView("vv_TreatmentRecord");

            
                
                
        });

        modelBuilder.Entity<VvTreatmentRecord1>(entity =>
        {
            entity.ToView("vv_TreatmentRecord", "PatientEditingLogNavigationPrivate");
        });

        modelBuilder.Entity<VvUserLanguage>(entity =>
        {
            entity.ToView("vv_UserLanguage");
        });

        modelBuilder.Entity<VvVaAddOnValidation>(entity =>
        {
            entity.ToView("vv_vaAddOnValidation");

            
                
                
        });

        modelBuilder.Entity<VvVaConfiguredEmt>(entity =>
        {
            entity.ToView("vv_vaConfiguredEMT");

            
                
                
        });

        modelBuilder.Entity<VvVaMlcleafWide>(entity =>
        {
            entity.ToView("vv_vaMLCLeafWide");
        });

        modelBuilder.Entity<VvVaRegisteredVolImage>(entity =>
        {
            entity.ToView("vv_vaRegisteredVolImage");

            entity.Property(e => e.DisplayTransformation).IsFixedLength();
            
                
                
            entity.Property(e => e.Transformation).IsFixedLength();
            entity.Property(e => e.UserOrigin).IsFixedLength();
            entity.Property(e => e.VolumeTransformation).IsFixedLength();
        });

        modelBuilder.Entity<VvVaRegisteredVolImage1>(entity =>
        {
            entity.ToView("vv_vaRegisteredVolImage", "SpatialRegPrivate");

            entity.Property(e => e.DisplayTransformation).IsFixedLength();
            
                
                
            entity.Property(e => e.Transformation).IsFixedLength();
            entity.Property(e => e.UserOrigin).IsFixedLength();
            entity.Property(e => e.VolumeTransformation).IsFixedLength();
        });

        modelBuilder.Entity<VvVaSliceCbct>(entity =>
        {
            entity.ToView("vv_vaSliceCBCT");
        });

        modelBuilder.Entity<VvVaWedge>(entity =>
        {
            entity.ToView("vv_vaWedge");
        });

        modelBuilder.Entity<VvVenueType>(entity =>
        {
            entity.ToView("vv_VenueType");
        });

        modelBuilder.Entity<VvVenueTypeLng>(entity =>
        {
            entity.ToView("vv_VenueTypeLng");
        });

        modelBuilder.Entity<VvXrefTpClsEnm>(entity =>
        {
            entity.ToView("vv_xref_tp_cls_enm", "DWH");
        });

        modelBuilder.Entity<Wedge>(entity =>
        {
            entity.HasKey(e => e.AddOnSer).HasName("XPKWedge");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Wedge");
                    tb.HasTrigger("tI_Wedge");
                    tb.HasTrigger("tU_Wedge");
                });

            entity.Property(e => e.AddOnSer).ValueGeneratedNever();

            entity.HasOne(d => d.AddOnSerNavigation).WithOne(p => p.Wedge).HasConstraintName("FKAddOn_Wedge");
        });

        modelBuilder.Entity<WeeklyChargeLink>(entity =>
        {
            entity.HasKey(e => e.WeeklyChargeLinkSer).HasName("XPKWeeklyChargeLink");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tI_WeeklyChargeLink");
                    tb.HasTrigger("tU_WeeklyChargeLink");
                });

            entity.Property(e => e.WeeklyChargeLinkSer).ValueGeneratedNever();
            
                
                

            entity.HasOne(d => d.ActInstProcCodeSerNavigation).WithMany(p => p.WeeklyChargeLink).HasConstraintName("FKActInstProcCode_WeeklyChargeLink");

            entity.HasOne(d => d.ActivityInstanceSerNavigation).WithMany(p => p.WeeklyChargeLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKActivityInstance_WeeklyChargeLink");
        });

        modelBuilder.Entity<WeightTestResult>(entity =>
        {
            entity.ToView("WeightTestResult");

            entity.Property(e => e.MeasurementType).IsFixedLength();
            entity.Property(e => e.Unit).IsFixedLength();
        });

        modelBuilder.Entity<Workspace>(entity =>
        {
            entity.HasKey(e => e.ResourceSer).HasName("XPKWorkspace");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Workspace");
                    tb.HasTrigger("tI_Workspace");
                    tb.HasTrigger("tU_Workspace");
                });

            entity.Property(e => e.ResourceSer).ValueGeneratedNever();

            entity.HasOne(d => d.ResourceSerNavigation).WithOne(p => p.Workspace).HasConstraintName("FKResource_Workspace");
        });

        modelBuilder.Entity<Workstation>(entity =>
        {
            entity.HasKey(e => e.WorkstationSer).HasName("XPKWorkstation");

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("tD_Workstation");
                    tb.HasTrigger("tU_Workstation");
                });

            entity.Property(e => e.WorkstationSer).ValueGeneratedNever();
            
                
                
        });

        modelBuilder.Entity<WorkstationPrinter>(entity =>
        {
            entity.HasKey(e => e.WorkstationPrinterId).HasName("pkworkstation_printer");

            entity.Property(e => e.WorkstationPrinterId).ValueGeneratedNever();
            entity.Property(e => e.PrinterTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefActivityEvent>(entity =>
        {
            entity.HasKey(e => e.XrefActivityEventId).HasName("pkxref_activity_event");

            entity.Property(e => e.XrefActivityEventId).ValueGeneratedNever();
            entity.Property(e => e.EventTyp).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefActivityQstr>(entity =>
        {
            entity.HasKey(e => new { e.ActivitySer, e.QstrName }).HasName("pkxref_activity_qstr");

            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.QstrTitle).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefAgtDx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DxId, e.AgtName, e.DateStarted }).HasName("pkxref_agt_dx");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtDx).WithMany(p => p.XrefAgtDx)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_agt_dx");
        });

        modelBuilder.Entity<XrefAgtFormularyDispLoc>(entity =>
        {
            entity.HasKey(e => e.AgtFormularyDispLocId).HasName("pkxref_agt_formulary_disp_loc");

            entity.Property(e => e.AgtFormularyDispLocId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DispLoc).WithMany(p => p.XrefAgtFormularyDispLoc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_agt_frmlry_disp_loc");

            entity.HasOne(d => d.AgtFormulary).WithMany(p => p.XrefAgtFormularyDispLoc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_agt_frmlry_disp_loc");
        });

        modelBuilder.Entity<XrefAgtLookupCvx>(entity =>
        {
            entity.HasKey(e => new { e.CvxCd, e.GroupCd }).HasName("pkxref_agt_lookup_cvx");

            entity.Property(e => e.CvxCd).IsFixedLength();
            entity.Property(e => e.GroupCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefAgtPt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.AgtName, e.DosageForm, e.DateStarted }).HasName("pkxref_agt_pt");

            entity.ToTable("xref_agt_pt", tb =>
                {
                    tb.HasTrigger("tD_xref_agt_pt");
                    tb.HasTrigger("tU_xref_agt_pt");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.AgtCls).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.DateApproxInd).IsFixedLength();
            entity.Property(e => e.DoseStrength).IsFixedLength();
            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.DrugLotNo).IsFixedLength();
            entity.Property(e => e.ExternalAgtFlag).IsFixedLength();
            entity.Property(e => e.MediActiveInd).IsFixedLength();
            entity.Property(e => e.PrnInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.TakeAsDirectedInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UniqueCcdaId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();

            entity.HasOne(d => d.DateStartedCdNavigation).WithMany(p => p.XrefAgtPt).HasConstraintName("fk2_xref_agt_pt");

            entity.HasOne(d => d.Pt).WithMany(p => p.XrefAgtPt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_agt_pt");
        });

        modelBuilder.Entity<XrefAgtPtExternal>(entity =>
        {
            entity.HasKey(e => e.XrefAgtPtExternalId).HasName("pkxref_agt_pt_external");

            entity.Property(e => e.XrefAgtPtExternalId).ValueGeneratedNever();
            entity.Property(e => e.AgtCls).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.DateApproxInd).IsFixedLength();
            entity.Property(e => e.DoseStrength).IsFixedLength();
            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.DrugLotNo).IsFixedLength();
            entity.Property(e => e.ExternalAgtFlag).IsFixedLength();
            entity.Property(e => e.MedParsingStatus).IsFixedLength();
            entity.Property(e => e.MediActiveInd).IsFixedLength();
            entity.Property(e => e.PrnInd).IsFixedLength();
            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ReconSourceTyp).HasDefaultValue(2700);
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.TakeAsDirectedInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UniqueCcdaId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
            entity.Property(e => e.XrefAgtPtExtAddedInd).IsFixedLength();
            entity.Property(e => e.XrefAgtPtExtReconInd)
                .HasDefaultValue("N")
                .IsFixedLength();

            entity.HasOne(d => d.TransitionOfCareInbound).WithMany(p => p.XrefAgtPtExternal).HasConstraintName("fk1_xref_agt_pt_external");
        });

        modelBuilder.Entity<XrefAgtPtMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.AgtName, e.DosageForm, e.DateStarted, e.RevisionNo }).HasName("pkxref_agt_pt_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AgtName).IsFixedLength();
            entity.Property(e => e.AgtCls).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.DateApproxInd).IsFixedLength();
            entity.Property(e => e.DoseStrength).IsFixedLength();
            entity.Property(e => e.DrugDescId).IsFixedLength();
            entity.Property(e => e.DrugLotNo).IsFixedLength();
            entity.Property(e => e.ExternalAgtFlag).IsFixedLength();
            entity.Property(e => e.MediActiveInd).IsFixedLength();
            entity.Property(e => e.PrnInd).IsFixedLength();
            entity.Property(e => e.Status).IsFixedLength();
            entity.Property(e => e.TakeAsDirectedInd).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.UniqueCcdaId).IsFixedLength();
            entity.Property(e => e.ValidEntryInd).IsFixedLength();
        });

        modelBuilder.Entity<XrefAgtRxDx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.RxId, e.ItemNo, e.DxId }).HasName("pkxref_agt_rx_dx");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.SendApprInd)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtDx).WithMany(p => p.XrefAgtRxDx)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_agt_rx_dx");
        });

        modelBuilder.Entity<XrefBaseTyp>(entity =>
        {
            entity.HasKey(e => new { e.FromBaseTyp, e.ToBaseTyp }).HasName("pkxref_base_typ");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefBillEventPrecert>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.BillEventId, e.PtVisitId }).HasName("pkxref_bill_event_precert");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.ReasonCd).IsFixedLength();
            entity.Property(e => e.TransCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.BillEvent).WithOne(p => p.XrefBillEventPrecert)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_bill_event_precert");

            entity.HasOne(d => d.PtInsPrecertDet).WithMany(p => p.XrefBillEventPrecert).HasConstraintName("fk2_xref_bill_event_precert");
        });

        modelBuilder.Entity<XrefCatGroup>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacId, e.FacGroupId, e.FacRqstnNo, e.FacRqstnCatNo }).HasName("pkxref_cat_group");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.FacRqstnNo).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.FacGroup).WithMany(p => p.XrefCatGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_cat_group");

            entity.HasOne(d => d.FacRqstnCat).WithMany(p => p.XrefCatGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_cat_group");
        });

        modelBuilder.Entity<XrefCmteeIssueRcmd>(entity =>
        {
            entity.HasKey(e => new { e.CnteeIssueId, e.CmteeIssueRcmdId }).HasName("pkxref_cmtee_issue_rcmd");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefComplianceItemBillCd>(entity =>
        {
            entity.HasKey(e => new { e.ComplianceItemId, e.CompliancePgmId, e.BillCd, e.AppCd }).HasName("pkxref_compliance_item_bill_cd");

            entity.Property(e => e.BillCd).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefCompliancePrdProvider>(entity =>
        {
            entity.HasKey(e => new { e.CompliancePrdId, e.StkhId }).HasName("pkxref_compliance_prd_provider");

            entity.Property(e => e.StkhId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefDcmntCompTemplate>(entity =>
        {
            entity.HasKey(e => new { e.XrefDcmntCompTemplateId, e.InstId }).HasName("pkxref_dcmnt_comp_template");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PnTemplate).WithMany(p => p.XrefDcmntCompTemplatePnTemplate)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_dcmnt_comp_template");

            entity.HasOne(d => d.PnTemplateNavigation).WithMany(p => p.XrefDcmntCompTemplatePnTemplateNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_dcmnt_comp_template");
        });

        modelBuilder.Entity<XrefDxBillEvent>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DxId, e.BillEventId }).HasName("pkxref_dx_bill_event");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtDx).WithMany(p => p.XrefDxBillEvent)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_dx_bill_event");

            entity.HasOne(d => d.BillEvent).WithMany(p => p.XrefDxBillEvent).HasConstraintName("fk1_xref_dx_bill_event");
        });

        modelBuilder.Entity<XrefDxRx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtDxId, e.PtVisitId, e.RxId }).HasName("pkxref_dx_rx");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefDxStg>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtStageId, e.PtDxId }).HasName("pkxref_dx_stg");

            entity.ToTable("xref_dx_stg", tb =>
                {
                    tb.HasTrigger("tD_xref_dx_stg");
                    tb.HasTrigger("tU_xref_dx_stg");
                });

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.CurStgInd).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtCncrStg).WithMany(p => p.XrefDxStg)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_dx_stg");
        });

        modelBuilder.Entity<XrefDxStgMh>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtStageId, e.PtDxId, e.RevisionNo }).HasName("pkxref_dx_stg_mh");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.AppCd).IsFixedLength();
            entity.Property(e => e.CurStgInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefDxTp>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtDxId, e.DateTpInit }).HasName("pkxref_dx_tp");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtTp).WithMany(p => p.XrefDxTp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_dx_tp");

            entity.HasOne(d => d.PtDx).WithMany(p => p.XrefDxTp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_dx_tp");
        });

        modelBuilder.Entity<XrefExamCompIcd>(entity =>
        {
            entity.HasKey(e => new { e.ExamCompId, e.InstId, e.ClsSchemeId, e.IcdCd }).HasName("pkxref_exam_comp_icd");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.PrimaryCdInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.ExamComp).WithMany(p => p.XrefExamCompIcd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_exam_comp_icd");
        });

        modelBuilder.Entity<XrefExamSystemCpt>(entity =>
        {
            entity.HasKey(e => new { e.SystemTypId, e.BillEmCptTyp }).HasName("pkxref_exam_system_cpt");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefFacGroup>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacId, e.FacGroupId, e.FacCompId }).HasName("pkxref_fac_group");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.CalcPrcsCd).IsFixedLength();
            entity.Property(e => e.CalcReltnCd).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.ConfiguredInd).IsFixedLength();
            entity.Property(e => e.OptionalInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();

            entity.HasOne(d => d.FacComp).WithMany(p => p.XrefFacGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_fac_group");

            entity.HasOne(d => d.FacGroup).WithMany(p => p.XrefFacGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_fac_group");
        });

        modelBuilder.Entity<XrefHxCompIcd>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.HxCompId, e.ClsSchemeId, e.IcdCd }).HasName("pkxref_hx_comp_icd");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.DefaultInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefIcd10ReadCd>(entity =>
        {
            entity.HasKey(e => new { e.IcdCd, e.ReadCd }).HasName("pkxref_icd_10_read_cd");

            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.ReadCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefIcdGroup>(entity =>
        {
            entity.HasKey(e => new { e.IcdGroupId, e.IcdCd, e.ClsSchemeId }).HasName("pkxref_icd_group");

            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.IcdGroup).WithMany(p => p.XrefIcdGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_icd_group");

            entity.HasOne(d => d.IcdDx).WithMany(p => p.XrefIcdGroup)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_icd_group");
        });

        modelBuilder.Entity<XrefIcdIcdo>(entity =>
        {
            entity.HasKey(e => new { e.IcdClsSchemeId, e.IcdCd, e.IcdoSiteCd, e.BehaviorCd, e.UnsureInd, e.IcdoSiteSeq }).HasName("pkxref_icd_icdo");

            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.IcdoSiteCd).IsFixedLength();
            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.UnsureInd).IsFixedLength();
            entity.Property(e => e.IcdoSiteSeq).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefIcdTpCls>(entity =>
        {
            entity.HasKey(e => new { e.ClsSchemeId, e.IcdCd, e.TpClsTypId, e.TpClsValueId }).HasName("pkxref_icd_tp_cls");

            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefIcdoMorph>(entity =>
        {
            entity.HasKey(e => new { e.ClsSchemeId, e.IcdoSiteCd, e.MorphCd, e.MorphCdSeq, e.BehaviorCd }).HasName("pkxref_icdo_morph");

            entity.Property(e => e.IcdoSiteCd).IsFixedLength();
            entity.Property(e => e.MorphCd).IsFixedLength();
            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.ExclusInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefIcdoTpCls>(entity =>
        {
            entity.HasKey(e => new { e.IcdoSiteCd, e.TpClsTypId, e.TpClsValueId }).HasName("pkxref_icdo_tp_cls");

            entity.Property(e => e.IcdoSiteCd).IsFixedLength();
            entity.Property(e => e.DfltIcdoForSiteInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.TpClsValue).WithMany(p => p.XrefIcdoTpCls)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_icdo_tp_cls");
        });

        modelBuilder.Entity<XrefInstDispLoc>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.DispLocId }).HasName("pkxref_inst_disp_loc");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.InstViewInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DispLoc).WithMany(p => p.XrefInstDispLoc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_inst_disp_loc");

            entity.HasOne(d => d.Inst).WithMany(p => p.XrefInstDispLoc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_inst_disp_loc");
        });

        modelBuilder.Entity<XrefInstLocDispLoc>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.LocId, e.DispLocId }).HasName("pkxref_inst_loc_disp_loc");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ActiveEntryInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.DispLoc).WithMany(p => p.XrefInstLocDispLoc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_inst_loc_disp_loc");

            entity.HasOne(d => d.InstLoc).WithMany(p => p.XrefInstLocDispLoc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_inst_loc_disp_loc");
        });

        modelBuilder.Entity<XrefInstLocTracking>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.LocId, e.VisitTrackingTyp, e.ReltnTyp }).HasName("pkxref_inst_loc_tracking");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefInstRqstn>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.FacInstId, e.FacId, e.FacRqstnNo }).HasName("pkxref_inst_rqstn");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.FacInstId).IsFixedLength();
            entity.Property(e => e.FacRqstnNo).IsFixedLength();
            entity.Property(e => e.ElctrncTransfer).IsFixedLength();
            entity.Property(e => e.IntfUnsolInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Inst).WithMany(p => p.XrefInstRqstn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_inst_rqstn");

            entity.HasOne(d => d.FacRqstn).WithMany(p => p.XrefInstRqstn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_inst_rqstn");
        });

        modelBuilder.Entity<XrefInstTestCompGroup>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.TypOfTest, e.CompName, e.InstTestCompGroupId }).HasName("pkxref_inst_test_comp_group");

            entity.ToTable("xref_inst_test_comp_group", tb => tb.HasTrigger("tU_xref_inst_test_comp_group"));

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.RevisionNo).HasDefaultValue(1);
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefInvasiveTypTpCls>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.InvasiveTyp }).HasName("pkxref_invasive_typ_tp_cls");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefMarginStatusTpCls>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.MarginStatusTyp }).HasName("pkxref_margin_status_tp_cls");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefMorphIcd>(entity =>
        {
            entity.HasKey(e => new { e.MorphClsSchemeId, e.MorphCd, e.BehaviorCd, e.IcdoSiteCd, e.SexCd, e.IcdClsSchemeId }).HasName("pkxref_morph_icd");

            entity.Property(e => e.MorphCd).IsFixedLength();
            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.IcdoSiteCd).IsFixedLength();
            entity.Property(e => e.SexCd).IsFixedLength();
            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefMorphTpCls>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.MorphCd, e.BehaviorCd }).HasName("pkxref_morph_tp_cls");

            entity.Property(e => e.MorphCd).IsFixedLength();
            entity.Property(e => e.BehaviorCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefOptPtDose>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DoseDataId, e.CompName, e.PtOptionId }).HasName("pkxref_opt_pt_dose");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtOption).WithMany(p => p.XrefOptPtDose)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_opt_pt_dose");

            entity.HasOne(d => d.PtDoseData).WithMany(p => p.XrefOptPtDose)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_opt_pt_dose");
        });

        modelBuilder.Entity<XrefPnSecCat>(entity =>
        {
            entity.HasKey(e => new { e.PnSecCode, e.PnCatCode }).HasName("pkxref_pn_sec_cat");

            entity.Property(e => e.PnSecCode).IsFixedLength();
            entity.Property(e => e.PnCatCode).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefPnSystemComp>(entity =>
        {
            entity.HasKey(e => new { e.FromCompId, e.ToCompId }).HasName("pkxref_pn_system_comp");

            entity.Property(e => e.FromCompId).IsFixedLength();
            entity.Property(e => e.ToCompId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefPtAeCmtee>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtAeId, e.CmteeId }).HasName("pkxref_pt_ae_cmtee");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefPtRespHdrApptTask>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtVisitId, e.QstrName, e.QstrId, e.NonScheduledActivitySer, e.ScheduledActivitySer }).HasName("pkxref_pt_resp_hdr_appt_task");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.QstrName).IsFixedLength();
            entity.Property(e => e.ReqInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefPtTxDx>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.PtTxId, e.PtDxId }).HasName("pkxref_pt_tx_dx");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.PtDx).WithMany(p => p.XrefPtTxDx)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_pt_tx_dx");
        });

        modelBuilder.Entity<XrefQmValueSetEventCode>(entity =>
        {
            entity.HasKey(e => new { e.QmValueSetId, e.QmEventCodeId }).HasName("pkxref_qm_value_set_event_code");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.QmEventCode).WithMany(p => p.XrefQmValueSetEventCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_qm_value_set_event_code");

            entity.HasOne(d => d.QmValueSet).WithMany(p => p.XrefQmValueSetEventCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_qm_value_set_event_code");
        });

        modelBuilder.Entity<XrefQmValueSetQm>(entity =>
        {
            entity.HasKey(e => new { e.QmId, e.QmValueSetId }).HasName("pkxref_qm_value_set_qm");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Qm).WithMany(p => p.XrefQmValueSetQm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_qm_value_set_qm");

            entity.HasOne(d => d.QmValueSet).WithMany(p => p.XrefQmValueSetQm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_qm_value_set_qm");
        });

        modelBuilder.Entity<XrefQmValueSetQmCriteriaPart>(entity =>
        {
            entity.HasKey(e => new { e.QmId, e.ValueSet, e.QmcpTyp }).HasName("PK__xref_qm___B725DECA2B6F9625");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefRxPtDose>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.DoseDataId, e.CompName, e.RxId, e.PtVisitId }).HasName("pkxref_rx_pt_dose");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.PtDoseData).WithMany(p => p.XrefRxPtDose)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_rx_pt_dose");
        });

        modelBuilder.Entity<XrefRxTypInst>(entity =>
        {
            entity.HasKey(e => new { e.RxTyp, e.InstId }).HasName("pkxref_rx_typ_inst");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.BillableInd).IsFixedLength();
            entity.Property(e => e.DfltPrintInd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.Inst).WithMany(p => p.XrefRxTypInst)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_rx_typ_inst");
        });

        modelBuilder.Entity<XrefSiteExam>(entity =>
        {
            entity.HasKey(e => new { e.InstId, e.Userid, e.TpClsTypId, e.TpClsValueId, e.SystemTypId }).HasName("pkxref_site_exam");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.ExamCd).IsFixedLength();
            entity.Property(e => e.SystemDesc).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.InstExamSystem).WithMany(p => p.XrefSiteExam)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_site_exam");

            entity.HasOne(d => d.TpClsValue).WithMany(p => p.XrefSiteExam)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_site_exam");
        });

        modelBuilder.Entity<XrefSiteTest>(entity =>
        {
            entity.HasKey(e => new { e.Userid, e.InstId, e.TpClsTypId, e.TpClsValueId, e.TypOfTest, e.CompName }).HasName("pkxref_site_test");

            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.AspectName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.TpClsValue).WithMany(p => p.XrefSiteTest)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_site_test");

            entity.HasOne(d => d.TestComp).WithMany(p => p.XrefSiteTest)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_site_test");
        });

        modelBuilder.Entity<XrefSnomedCd>(entity =>
        {
            entity.HasKey(e => new { e.SnomedTypCd, e.XrefSnomedCdValue }).HasName("pkxref_snomed_cd");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.SnomedTypCdNavigation).WithMany(p => p.XrefSnomedCd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_snomed_cd");
        });

        modelBuilder.Entity<XrefSnomedTyp>(entity =>
        {
            entity.HasKey(e => e.SnomedTypCd).HasName("pkxref_snomed_typ");

            entity.Property(e => e.SnomedTypCd).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefTestCompCpt>(entity =>
        {
            entity.HasKey(e => new { e.TypOfTest, e.CompName, e.BillEmCptTyp }).HasName("pkxref_test_comp_cpt");

            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.BillEmCptTypNavigation).WithMany(p => p.XrefTestCompCpt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_test_comp_cpt");

            entity.HasOne(d => d.TestComp).WithMany(p => p.XrefTestCompCpt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_test_comp_cpt");
        });

        modelBuilder.Entity<XrefTestTpCls>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypId, e.TpClsValueId, e.TypOfTest, e.CompName }).HasName("pkxref_test_tp_cls");

            entity.Property(e => e.TypOfTest).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefTimeFrameBaseTyp>(entity =>
        {
            entity.HasKey(e => new { e.TimeFrameTyp, e.BaseTyp, e.BaseClsTyp }).HasName("pk1_xref_time_frame_base_typ");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefTpCls>(entity =>
        {
            entity.HasKey(e => new { e.TpClsTypFrom, e.TpClsValueFrom, e.TpClsTypTo, e.TpClsValueTo }).HasName("pkxref_tp_cls");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefTpRule>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.PhaseSeqNo, e.InstId, e.RuleId, e.RuleIdDesc }).HasName("pkxref_tp_rule");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.RuleIdDesc).IsFixedLength();
            entity.Property(e => e.ActiveInd).IsFixedLength();
            entity.Property(e => e.Req).IsFixedLength();
            entity.Property(e => e.RuleSeq).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.RuleBody).WithMany(p => p.XrefTpRule)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_tp_rule");

            entity.HasOne(d => d.Phase).WithMany(p => p.XrefTpRule)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_tp_rule");
        });

        modelBuilder.Entity<XrefTpTest>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IntvId }).HasName("pkxref_tp_test");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.CompName).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
            entity.Property(e => e.TypOfTest).IsFixedLength();

            entity.HasOne(d => d.TpIntv).WithOne(p => p.XrefTpTest)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_tp_test");
        });

        modelBuilder.Entity<XrefTrTypPln>(entity =>
        {
            entity.HasKey(e => new { e.TpName, e.TpVersNo, e.IntvId }).HasName("pkxref_tr_typ_pln");

            entity.Property(e => e.TpName).IsFixedLength();
            entity.Property(e => e.TpVersNo).IsFixedLength();
            entity.Property(e => e.DoseLimitInd).IsFixedLength();
            entity.Property(e => e.TrCompName).IsFixedLength();
            entity.Property(e => e.TrSubCompName).IsFixedLength();
            entity.Property(e => e.TrTyp).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();

            entity.HasOne(d => d.TpIntv).WithOne(p => p.XrefTrTypPln)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_tr_typ_pln");

            entity.HasOne(d => d.TrComp).WithMany(p => p.XrefTrTypPln)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_tr_typ_pln");
        });

        modelBuilder.Entity<XrefTumGrpIcd>(entity =>
        {
            entity.HasKey(e => new { e.TumGrpId, e.ClsSchemeId, e.IcdCd }).HasName("pkxref_tum_grp_icd");

            entity.Property(e => e.IcdCd).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefUcumUnit>(entity =>
        {
            entity.HasKey(e => new { e.UcumId, e.Uom }).HasName("pkxref_ucum_unit");

            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.Ucum).WithMany(p => p.XrefUcumUnit)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk2_xref_ucum_unit");

            entity.HasOne(d => d.UomNavigation).WithMany(p => p.XrefUcumUnit)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_ucum_unit");
        });

        modelBuilder.Entity<XrefUnitFcn>(entity =>
        {
            entity.HasKey(e => new { e.Uom, e.FcnTyp }).HasName("pkxref_unit_fcn");

            entity.Property(e => e.TransLogInstId).IsFixedLength();

            entity.HasOne(d => d.UomNavigation).WithMany(p => p.XrefUnitFcn)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk1_xref_unit_fcn");
        });

        modelBuilder.Entity<XrefUomGroup>(entity =>
        {
            entity.HasKey(e => new { e.UomGroupId, e.UomCatId, e.Uom }).HasName("pkxref_uom_group");

            entity.Property(e => e.TransLogInstId).IsFixedLength();
        });

        modelBuilder.Entity<XrefUseridPt>(entity =>
        {
            entity.HasKey(e => new { e.PtId, e.InstId, e.Userid }).HasName("pkxref_userid_pt");

            entity.Property(e => e.PtId).IsFixedLength();
            entity.Property(e => e.InstId).IsFixedLength();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XsConfig>(entity =>
        {
            entity.HasKey(e => e.XsConfig1).HasName("pkxs_config");

            entity.Property(e => e.XsConfig1).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });

        modelBuilder.Entity<XsHandler>(entity =>
        {
            entity.HasKey(e => e.XsHandler1).HasName("pkxs_handler");

            entity.Property(e => e.XsHandler1).ValueGeneratedNever();
            entity.Property(e => e.TransLogInstId).IsFixedLength();
            entity.Property(e => e.TransLogMinstId).IsFixedLength();
        });
        modelBuilder.HasSequence("ActivityCategorySeq");
        modelBuilder.HasSequence("ActivityChecklistItemSeq");
        modelBuilder.HasSequence("ActivityInstanceLinkSeq");
        modelBuilder.HasSequence("ActivityInstanceSeq");
        modelBuilder.HasSequence("ActivitySeq");
        modelBuilder.HasSequence("AttendeeSeq");
        modelBuilder.HasSequence("DeliverySetupDeviceMachineCacheKeySerSeq");
        modelBuilder.HasSequence("DepartmentSeq");
        modelBuilder.HasSequence("LookupTableSeq");
        modelBuilder.HasSequence("NonScheduledActivitySeq");
        modelBuilder.HasSequence("PatientAddressSeq");
        modelBuilder.HasSequence("PatientDepartmentSeq");
        modelBuilder.HasSequence("PatientLocationSeq");
        modelBuilder.HasSequence("PatientNameSeq");
        modelBuilder.HasSequence("PatientNoteSeq");
        modelBuilder.HasSequence("PatientSeq");
        modelBuilder.HasSequence("ProcedureItemSeq");
        modelBuilder.HasSequence("RadiationDeliverySetupDeviceCacheKeySerSeq");
        modelBuilder.HasSequence("ResourceDepartmentSeq");
        modelBuilder.HasSequence("ScheduledActivitySeq");
        modelBuilder.HasSequence("TemplateCycleSeq");
        modelBuilder.HasSequence("TemplateSeq");

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
